"use strict";(self.webpackChunkleaf_vue=self.webpackChunkleaf_vue||[]).push([[951],{105:(e,t,n)=>{n.d(t,{A:()=>o});const o={name:"import-form-dialog",data:function(){return{initialFocusElID:"formPacket",files:null,userMessage:"",inputStyles:{padding:"1.25rem 0.5rem",border:"1px solid #cadff0",borderRadius:"2px",backgroundColor:"#f2f2f8"}}},inject:["APIroot","CSRFToken","setDialogSaveFunction","closeFormDialog"],created:function(){this.setDialogSaveFunction(this.onSave)},mounted:function(){document.getElementById(this.initialFocusElID).focus()},emits:["import-form"],methods:{onSave:function(){var e=this;if(null!==this.files){this.userMessage="Form is being imported ...";var t=new FormData;t.append("formPacket",this.files[0]),t.append("CSRFToken",this.CSRFToken),$.ajax({type:"POST",url:"".concat(this.APIroot,"formStack/import"),processData:!1,contentType:!1,cache:!1,data:t,success:function(t){!0!==/^form_[0-9a-f]{5}$/i.test(t)&&alert(t),e.closeFormDialog(),e.$emit("import-form",t)},error:function(e){return console.log("form import error",e)}})}else console.log("no attachment")},attachForm:function(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},o=(null===(e=n.target)||void 0===e?void 0:e.files)||(null===(t=n.dataTransfer)||void 0===t?void 0:t.files);(null==o?void 0:o.length)>0&&(this.files=o)}},template:'\n            <div id="file_control" style="margin: 1em 0; min-height: 50px;">\n                <label for="formPacket">Select LEAF Form Packet to import:</label>\n                <input id="formPacket" name="formPacket" type="file" @change="attachForm" :style=inputStyles />\n                <div v-if="userMessage" style="padding: 0.5rem 0"><b>{{ userMessage }}</b></div>\n            </div>'}},315:(e,t,n)=>{n.r(t),n.d(t,{default:()=>l});var o=n(392),i=n(448),a=n(105);const l={name:"restore-fields-view",data:function(){return{disabledFields:null,headerSortTracking:{indicatorID:null,categoryName:null,name:null,format:null}}},components:{LeafFormDialog:o.A,NewFormDialog:i.A,ImportFormDialog:a.A},inject:["APIroot","CSRFToken","setDefaultAjaxResponseMessage","showFormDialog","dialogFormContent"],created:function(){var e=this;fetch("".concat(this.APIroot,"form/indicator/list/disabled")).then((function(e){return e.json()})).then((function(t){e.disabledFields=t.filter((function(e){return+e.indicatorID>0}))})).catch((function(e){return console.log(e)}))},beforeRouteEnter:function(e,t,n){n((function(e){e.setDefaultAjaxResponseMessage()}))},computed:{disabledFieldsParentIDLookup:function(){var e={},t=null;return this.disabledFields.forEach((function(n){null!==(t=n.parentIndicatorID)&&(e[n.indicatorID]=t)})),e},disabledFieldsLookup:function(){var e={};return this.disabledFields.forEach((function(t){return e[t.indicatorID]=1})),e}},methods:{restoreField:function(e){var t=this,n=this.disabledFields.find((function(t){return t.indicatorID===e})),o=!0,i=this.getDisabledAncestors(n.parentIndicatorID);i.length>0&&(o=confirm("This question has disabled parent questions:\n"+i.join(", ")+"\nIt is recommended to restore these first.")),o&&$.ajax({type:"POST",url:"".concat(this.APIroot,"formEditor/").concat(e,"/disabled"),data:{CSRFToken:this.CSRFToken,disabled:0},success:function(){t.disabledFields=t.disabledFields.filter((function(e){return e!==n})),i.length>0&&o&&$.ajax({type:"POST",url:"".concat(t.APIroot,"formEditor/").concat(e,"/parentID"),data:{parentID:null,CSRFToken:t.CSRFToken},error:function(e){return console.log("ind parentID post err",e)}}),alert("The field has been restored.")},error:function(e){return console.log(e)}})},sortHeader:function(){var e,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";if(this.disabledFields.length>1&&void 0!==(null===(e=this.headerSortTracking)||void 0===e?void 0:e[t])){if(null===this.headerSortTracking[t])this.disabledFields=this.disabledFields.toSorted((function(e,n){return String(e[t]).localeCompare(String(n[t]),void 0,{numeric:"indicatorID"===t,sensitivity:"base"})})),this.headerSortTracking[t]=0;else{var n=0===this.headerSortTracking[t];this.headerSortTracking[t]=n?1:0,this.disabledFields=this.disabledFields.toSorted((function(e,o){return(n?-1:1)*String(e[t]).localeCompare(String(o[t]),void 0,{numeric:"indicatorID"===t,sensitivity:"base"})}))}for(var o in this.headerSortTracking)o!==t&&(this.headerSortTracking[o]=null)}},getDisabledAncestors:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null,t=[];1===this.disabledFieldsLookup[e]&&t.push(e);for(var n=+this.disabledFieldsParentIDLookup[e];n>0;)1===this.disabledFieldsLookup[n]&&t.push(n),n=this.disabledFieldsParentIDLookup[n];return t.reverse()}},template:'<section id="restore_fields_view">\n            <h2 id="page_breadcrumbs">\n                <a href="../admin" class="leaf-crumb-link" title="to Admin Home">Admin</a>\n                <i class="fas fa-caret-right leaf-crumb-caret"></i>\n                <router-link :to="{ name: \'browser\' }" class="leaf-crumb-link" title="to Form Browser">Form Browser</router-link>\n                <i class="fas fa-caret-right leaf-crumb-caret"></i>Restore Fields\n            </h2>\n            <h3>List of disabled fields available for recovery</h3>\n            <div>Deleted fields and associated data will not display in the Report Builder.</div>\n\n            <div v-if="disabledFields === null" class="page_loading">\n                Loading...\n                <img src="../images/largespinner.gif" alt="" />\n            </div>\n            <template v-else>\n                <table v-if="disabledFields.length > 0">\n                    <thead>\n                        <tr>\n                            <th>\n                                <button type="button" @click="sortHeader(\'indicatorID\')">\n                                    indicatorID\n                                    <span aria-hidden="true">\n                                        {{ headerSortTracking.indicatorID === 0 ? "▲" :\n                                           headerSortTracking.indicatorID === 1 ? "▼" : "" }}\n                                    </span>\n                                </button>\n                            </th>\n                            <th>\n                                <button type="button" @click="sortHeader(\'categoryName\')">\n                                    Form\n                                    <span aria-hidden="true">\n                                        {{ headerSortTracking.categoryName === 0 ? "▲" :\n                                           headerSortTracking.categoryName === 1 ? "▼" : "" }}\n                                    </span>\n                                </button>\n                            </th>\n                            <th>\n                                <button type="button" @click="sortHeader(\'name\')">\n                                    Field Name\n                                    <span aria-hidden="true">\n                                        {{ headerSortTracking.name === 0 ? "▲" :\n                                           headerSortTracking.name === 1 ? "▼" : "" }}\n                                    </span>\n                                </button>\n                            </th>\n                            <th>\n                                <button type="button" @click="sortHeader(\'format\')">\n                                    Input Format\n                                    <span aria-hidden="true">\n                                        {{ headerSortTracking.format === 0 ? "▲" :\n                                           headerSortTracking.format === 1 ? "▼" : "" }}\n                                    </span>\n                                </button>\n                            </th>\n                            <th>Status</th>\n                            <th>Restore</th>\n                        </tr>\n                    </thead>\n                    <tbody id="fields">\n                        <tr v-for="f in disabledFields" :key="f.indicatorID">\n                            <td>{{ f.indicatorID }}</td>\n                            <td>{{ f.categoryName }}</td>\n                            <td>{{ f.name }}</td>\n                            <td>{{ f.format }}</td>\n                            <td>{{ f.disabled }}</td>\n                            <td :id="\'restore_td_\' + f.indicatorID"><button type="button" class="btn-general" style="margin:auto;"\n                                @click="restoreField(parseInt(f.indicatorID))">\n                                Restore this field</button>\n                            </td>\n                        </tr>\n                    </tbody>\n                </table>\n                <p v-else style="margin:1rem 0;">There are no disabled fields to restore.</p>\n            </template>\n\n            \x3c!-- DIALOGS --\x3e\n            <leaf-form-dialog v-if="showFormDialog">\n                <template #dialog-content-slot>\n                    <component :is="dialogFormContent"></component>\n                </template>\n            </leaf-form-dialog>\n        </section>'}},392:(e,t,n)=>{n.d(t,{A:()=>o});const o={data:function(){return{scrollY:window.scrollY,initialTop:15,modalElementID:"leaf_dialog_content",modalBackgroundID:"leaf-vue-dialog-background",elBody:null,elModal:null,elBackground:null,elClose:null,lastFocus:null}},inject:["dialogTitle","closeFormDialog","formSaveFunction","dialogButtonText","lastModalTab"],created:function(){this.lastFocus=document.activeElement||null},mounted:function(){this.elBody=document.querySelector("body"),this.elModal=document.getElementById(this.modalElementID),this.elModal.style.left=window.scrollX+window.innerWidth/2-this.elModal.clientWidth/2+"px",this.elBackground=document.getElementById(this.modalBackgroundID),this.elClose=document.getElementById("leaf-vue-dialog-close"),this.makeDraggable(this.elModal);var e=document.activeElement;null===(null!==e?e.closest(".leaf-vue-dialog-content"):null)&&this.elClose.focus()},beforeUnmount:function(){var e,t=(null===(e=this.lastFocus)||void 0===e?void 0:e.id)||null;if(null!==t){var n=document.getElementById(t);null!==n&&n.focus()}else null!==this.lastFocus&&this.lastFocus.focus()},methods:{firstTab:function(e){if(!0===(null==e?void 0:e.shiftKey)){var t=document.querySelector("#ifthen_deletion_dialog button.btn-general"),n=document.getElementById("next"),o=document.getElementById("button_cancelchange"),i=t||n||o;null!==i&&"function"==typeof i.focus&&(i.focus(),e.preventDefault())}},makeDraggable:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=0,o=0,i=0,a=0,l=function(e){(e=e||window.event).preventDefault(),n=i-e.clientX,o=a-e.clientY,i=e.clientX,a=e.clientY,t.style.top=t.offsetTop-o+"px",t.style.left=t.offsetLeft-n+"px",d()},r=function(){document.onmouseup=null,document.onmousemove=null},d=function(){t.offsetTop<window.scrollY&&(t.style.top=window.scrollY+"px"),t.offsetLeft<window.scrollX&&(t.style.left=window.scrollX+"px"),t.offsetLeft+t.clientWidth+18>window.innerWidth+window.scrollX&&(t.style.left=window.innerWidth+window.scrollX-t.clientWidth-18+"px"),e.elBackground.style.minWidth=e.elBody.clientWidth+"px",e.elBackground.style.minHeight=e.elModal.offsetTop+e.elBody.clientHeight+"px"};document.getElementById(this.modalElementID+"_drag_handle")&&(document.getElementById(this.modalElementID+"_drag_handle").onmousedown=function(e){(e=e||window.event).preventDefault(),i=e.clientX,a=e.clientY,document.onmouseup=r,document.onmousemove=l})}},template:'<Teleport to="body">\n        <div id="leaf-vue-dialog-background" aria-disabled="true" aria-hidden="true"></div>\n        <div :id="modalElementID" class="leaf-vue-dialog"\n            role="dialog" aria-modal="true" :aria-labelledby="modalElementID + \'_drag_handle\'" aria-describedby="record"\n            :style="{top: scrollY + initialTop + \'px\'}">\n            <div v-html="dialogTitle" :id="modalElementID + \'_drag_handle\'" class="leaf-vue-dialog-title"></div>\n            <button type="button" @click="closeFormDialog" @keydown.tab="firstTab" id="leaf-vue-dialog-close" aria-label="Close">&#10005;</button>\n            <div id="record" style="max-height:100vh;overflow-y:auto">\n                <div id="xhr" class="leaf-vue-dialog-content">\n                    <slot name="dialog-content-slot"></slot>\n                </div>\n                <div id="leaf-vue-dialog-cancel-save">\n                    <button type="button" style="width: 90px;"\n                        id="button_save" class="btn-confirm" :title="dialogButtonText.confirm"\n                        @click="formSaveFunction">\n                        {{dialogButtonText.confirm}}\n                    </button>\n                    <button type="button" style="width: 90px;"\n                        id="button_cancelchange" class="btn-general" :title="dialogButtonText.cancel"\n                        @click="closeFormDialog" @keydown.tab="lastModalTab">\n                        {{dialogButtonText.cancel}}\n                    </button>\n                </div>\n            </div>\n        </div>\n    </Teleport>'}},448:(e,t,n)=>{n.d(t,{A:()=>o});const o={name:"new-form-dialog",data:function(){return{requiredDataProperties:["parentID"],categoryName:"",categoryDescription:"",newFormParentID:this.dialogData.parentID}},inject:["APIroot","CSRFToken","decodeAndStripHTML","setDialogSaveFunction","dialogData","checkRequiredData","addNewCategory","closeFormDialog"],created:function(){this.checkRequiredData(this.requiredDataProperties),this.setDialogSaveFunction(this.onSave)},mounted:function(){document.getElementById("name").focus()},emits:["get-form"],computed:{nameCharsRemaining:function(){return Math.max(50-this.categoryName.length,0)},descrCharsRemaining:function(){return Math.max(255-this.categoryDescription.length,0)}},methods:{onSave:function(){var e=this,t=XSSHelpers.stripAllTags(this.categoryName),n=XSSHelpers.stripAllTags(this.categoryDescription);$.ajax({type:"POST",url:"".concat(this.APIroot,"formEditor/new"),data:{name:t,description:n,parentID:this.newFormParentID,CSRFToken:this.CSRFToken},success:function(o){var i=o,a={};a.categoryID=i,a.categoryName=t,a.categoryDescription=n,a.parentID=e.newFormParentID,a.workflowID=0,a.needToKnow=0,a.visible=-1,a.sort=0,a.type="",a.stapledFormIDs=[],a.destructionAge=null,e.addNewCategory(i,a),""===e.newFormParentID?e.$router.push({name:"category",query:{formID:i}}):e.$emit("get-form",i),e.closeFormDialog()},error:function(e){console.log("error posting new form",e)}})}},template:'<div>\n            <div style="display: flex; justify-content: space-between;">\n                <label for="name">Form Name&nbsp;<span style="font-size:80%">(up to 50 characters)</span></label>\n                <div>{{nameCharsRemaining}}</div>\n            </div>\n            <input id="name" type="text" maxlength="50" v-model="categoryName" style="width: 100%;" />\n            <div style="display: flex; justify-content:space-between;margin-top: 1em;">\n                <label for="description">Form Description&nbsp;<span style="font-size:80%">(up to 255 characters)</span></label>\n                <div>{{descrCharsRemaining}}</div>\n            </div>\n            <textarea id="description" maxlength="255" rows="5" v-model="categoryDescription" \n                style="width: 100%; resize:none;">\n            </textarea>\n        </div>'}}}]);