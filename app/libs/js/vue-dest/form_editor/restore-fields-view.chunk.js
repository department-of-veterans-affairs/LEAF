"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkleaf_vue"] = self["webpackChunkleaf_vue"] || []).push([["restore-fields-view"],{

/***/ "./src/common/components/LeafFormDialog.js":
/*!*************************************************!*\
  !*** ./src/common/components/LeafFormDialog.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data: function data() {\n    return {\n      scrollY: window.scrollY,\n      initialTop: 15,\n      modalElementID: 'leaf_dialog_content',\n      modalBackgroundID: 'leaf-vue-dialog-background',\n      elBody: null,\n      elModal: null,\n      elBackground: null,\n      elClose: null,\n      lastFocus: null\n    };\n  },\n  inject: ['dialogTitle', 'closeFormDialog', 'formSaveFunction', 'dialogButtonText', 'lastModalTab'],\n  created: function created() {\n    this.lastFocus = document.activeElement || null;\n  },\n  mounted: function mounted() {\n    this.elBody = document.querySelector('body');\n    this.elModal = document.getElementById(this.modalElementID);\n    this.elModal.style.left = window.scrollX + window.innerWidth / 2 - this.elModal.clientWidth / 2 + 'px';\n    this.elBackground = document.getElementById(this.modalBackgroundID);\n    this.elClose = document.getElementById('leaf-vue-dialog-close');\n    this.makeDraggable(this.elModal);\n    //if there is not already an active el in the modal, focus the close button\n    var activeEl = document.activeElement;\n    var closestLeafDialog = activeEl !== null ? activeEl.closest('.leaf-vue-dialog-content') : null;\n    if (closestLeafDialog === null) {\n      this.elClose.focus();\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    var _this$lastFocus;\n    //refocus last item.  some events can cause a remount so try to select the el from its id first\n    var lastID = ((_this$lastFocus = this.lastFocus) === null || _this$lastFocus === void 0 ? void 0 : _this$lastFocus.id) || null;\n    if (lastID !== null) {\n      var lastEl = document.getElementById(lastID);\n      if (lastEl !== null) {\n        lastEl.focus();\n      }\n    } else if (this.lastFocus !== null) {\n      this.lastFocus.focus();\n    }\n  },\n  methods: {\n    firstTab: function firstTab(event) {\n      if ((event === null || event === void 0 ? void 0 : event.shiftKey) === true) {\n        var modCancel = document.querySelector('#ifthen_deletion_dialog button.btn-general');\n        var next = document.getElementById('next');\n        var cancel = document.getElementById('button_cancelchange');\n        var last = modCancel || next || cancel;\n        if (last !== null && typeof last.focus === 'function') {\n          last.focus();\n          event.preventDefault();\n        }\n      }\n    },\n    /**\r\n     * makes the modal draggable\r\n     * @param {Object} el DOM element\r\n     */\n    makeDraggable: function makeDraggable() {\n      var _this = this;\n      var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var pos1 = 0;\n      var pos2 = 0;\n      var mouseX = 0;\n      var mouseY = 0;\n      var elementDrag = function elementDrag(e) {\n        e = e || window.event;\n        e.preventDefault();\n        pos1 = mouseX - e.clientX;\n        pos2 = mouseY - e.clientY;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        el.style.top = el.offsetTop - pos2 + \"px\";\n        el.style.left = el.offsetLeft - pos1 + \"px\";\n        checkBounds();\n      };\n      var closeDragElement = function closeDragElement() {\n        document.onmouseup = null;\n        document.onmousemove = null;\n      };\n      var dragMouseDown = function dragMouseDown(e) {\n        e = e || window.event;\n        e.preventDefault();\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        document.onmouseup = closeDragElement;\n        document.onmousemove = elementDrag;\n      };\n      var checkBounds = function checkBounds() {\n        var scrollbarWidth = 18;\n        if (el.offsetTop < window.scrollY) {\n          el.style.top = window.scrollY + 'px';\n        }\n        if (el.offsetLeft < window.scrollX) {\n          el.style.left = window.scrollX + 'px';\n        }\n        if (el.offsetLeft + el.clientWidth + scrollbarWidth > window.innerWidth + window.scrollX) {\n          el.style.left = window.innerWidth + window.scrollX - el.clientWidth - scrollbarWidth + 'px';\n        }\n        _this.elBackground.style.minWidth = _this.elBody.clientWidth + 'px';\n        _this.elBackground.style.minHeight = _this.elModal.offsetTop + _this.elBody.clientHeight + 'px';\n      };\n      if (document.getElementById(this.modalElementID + \"_drag_handle\")) {\n        document.getElementById(this.modalElementID + \"_drag_handle\").onmousedown = dragMouseDown;\n      }\n    }\n  },\n  template: \"<Teleport to=\\\"body\\\">\\n        <div id=\\\"leaf-vue-dialog-background\\\" aria-disabled=\\\"true\\\" aria-hidden=\\\"true\\\"></div>\\n        <div :id=\\\"modalElementID\\\" class=\\\"leaf-vue-dialog\\\"\\n            role=\\\"dialog\\\" aria-modal=\\\"true\\\" :aria-labelledby=\\\"modalElementID + '_drag_handle'\\\" aria-describedby=\\\"record\\\"\\n            :style=\\\"{top: scrollY + initialTop + 'px'}\\\">\\n            <div v-html=\\\"dialogTitle\\\" :id=\\\"modalElementID + '_drag_handle'\\\" class=\\\"leaf-vue-dialog-title\\\"></div>\\n            <button type=\\\"button\\\" @click=\\\"closeFormDialog\\\" @keydown.tab=\\\"firstTab\\\" id=\\\"leaf-vue-dialog-close\\\" aria-label=\\\"Close\\\">&#10005;</button>\\n            <div id=\\\"record\\\" style=\\\"max-height:100vh;overflow-y:auto\\\">\\n                <div id=\\\"xhr\\\" class=\\\"leaf-vue-dialog-content\\\">\\n                    <slot name=\\\"dialog-content-slot\\\"></slot>\\n                </div>\\n                <div id=\\\"leaf-vue-dialog-cancel-save\\\">\\n                    <button type=\\\"button\\\" style=\\\"width: 90px;\\\"\\n                        id=\\\"button_save\\\" class=\\\"btn-confirm\\\" :title=\\\"dialogButtonText.confirm\\\"\\n                        @click=\\\"formSaveFunction\\\">\\n                        {{dialogButtonText.confirm}}\\n                    </button>\\n                    <button type=\\\"button\\\" style=\\\"width: 90px;\\\"\\n                        id=\\\"button_cancelchange\\\" class=\\\"btn-general\\\" :title=\\\"dialogButtonText.cancel\\\"\\n                        @click=\\\"closeFormDialog\\\" @keydown.tab=\\\"lastModalTab\\\">\\n                        {{dialogButtonText.cancel}}\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </Teleport>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/common/components/LeafFormDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/RestoreFieldOptionsDialog.js":
/*!********************************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/RestoreFieldOptionsDialog.js ***!
  \********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'restore-field-options-dialog',\n  data: function data() {\n    return {\n      initialFocusElID: 'radio_restore_all',\n      userOptionSelection: \"all\",\n      userMessage: \"\"\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'restoreField', 'updateAppData', 'indicatorID_toRestore', 'indicatorName_toRestore', 'disabledAncestors', 'firstOrphanID', 'searchPending', 'setDialogSaveFunction', 'closeFormDialog'],\n  created: function created() {\n    this.setDialogSaveFunction(this.onSave);\n  },\n  mounted: function mounted() {\n    //set the initial message for the user and set focus\n    this.userMessage = \"<p><b>This question has disabled parent questions:</b></p>\";\n    var allRadio = document.getElementById(this.initialFocusElID);\n    if (allRadio !== null) {\n      allRadio.focus();\n    }\n  },\n  computed: {\n    disabledAncestorsList: function disabledAncestorsList() {\n      return _toConsumableArray(this.disabledAncestors).reverse();\n    },\n    listStyles: function listStyles() {\n      return {\n        listStyleType: \"disc\",\n        marginLeft: \"0.5rem\",\n        paddingTop: \"0.5rem\",\n        lineHeight: \"1.4\",\n        paddingInlineStart: \"1rem\"\n      };\n    }\n  },\n  methods: {\n    /*\r\n    * Performs restore actions according to user choice.\r\n    * If restoring only a single question, the parent ID is also unset so that the question will appear on the form\r\n    * If restoring all associated fields, the question and its disabled ancestors restored at intervals\r\n    */\n    onSave: function onSave() {\n      var _this = this;\n      this.userMessage = \"<b style=\\\"color:#064;\\\">Restoring Fields...</b>\";\n      var indID = this.indicatorID_toRestore;\n      if (this.userOptionSelection === \"one\") {\n        Promise.all([this.unsetParentID(indID), this.restoreField(indID)]).then(function () {\n          _this.updateAppData(indID);\n          _this.closeFormDialog();\n        })[\"catch\"](function (err) {\n          return console.log(err);\n        });\n      } else {\n        //restore method below will pop one each time\n        //in case of interruption, safe order is most distant parent to direct parent, then the ID to restore\n        var arrRestore = [{\n          indicatorID: indID\n        }].concat(_toConsumableArray(this.disabledAncestors));\n        var total = arrRestore.length;\n        var count = 0;\n        var restore = function restore() {\n          if (arrRestore.length > 0) {\n            var id = arrRestore.pop().indicatorID;\n            _this.restoreField(id).then(function () {\n              _this.updateAppData(id, 1250);\n            })[\"catch\"](function (err) {\n              console.log(err);\n            })[\"finally\"](function () {\n              //for the most distant parent restored, reset the parentID if there is an orphan\n              if (count === 0 && _this.firstOrphanID !== null) {\n                _this.unsetParentID(id);\n              }\n              count++;\n              if (count === total) {\n                setTimeout(function () {\n                  _this.closeFormDialog();\n                }, 750);\n              }\n            });\n          } else {\n            clearInterval(intervalID);\n          }\n        };\n        var intervalID = setInterval(restore, 100);\n      }\n    },\n    /**\r\n     * sets the parent ID of an indicator to null.\r\n     * Used if a user decides to restore only a specific question when that question has disabled ancestors.\r\n     * Used on the most distant parentID for multiple restores in an orphan is detected\r\n     * @param {number} indicatorID\r\n     * @returns Promise\r\n     */\n    unsetParentID: function unsetParentID() {\n      var indicatorID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var formData = new FormData();\n      formData.append('CSRFToken', this.CSRFToken);\n      formData.append('parentID', null);\n      return fetch(\"\".concat(this.APIroot, \"formEditor/\").concat(indicatorID, \"/parentID\"), {\n        method: 'POST',\n        body: formData\n      });\n    }\n  },\n  template: \"\\n            <div id=\\\"restore_fields_parent_options\\\" style=\\\"margin-bottom: 1rem; min-height: 50px;\\\">\\n                <div v-if=\\\"searchPending === true\\\" class=\\\"page_loading\\\">\\n                    Loading...\\n                    <img src=\\\"../images/largespinner.gif\\\" alt=\\\"\\\" />\\n                </div>\\n                <template v-else>\\n                    <h3 style=\\\"margin:0 0 1rem 0; color:#000;\\\">{{ indicatorName_toRestore }}</h3>\\n                    <div v-if=\\\"userMessage !== ''\\\" v-html=\\\"userMessage\\\"></div>\\n                    <ul :style=\\\"listStyles\\\">\\n                        <li v-for=\\\"element in disabledAncestorsList\\\" style=\\\"display:list-item;\\\">\\n                            {{ element.name.length > 50 ? element.name.slice(0, 47) + \\\"...\\\" : element.name }}\\n                        </li>\\n                    </ul>\\n                    <fieldset>\\n                        <legend id=\\\"restore_fields_legend\\\">Restore Options</legend>\\n                        <label class=\\\"checkable leaf_check\\\" for=\\\"radio_restore_all\\\">\\n                            <input type=\\\"radio\\\" checked\\n                                v-model=\\\"userOptionSelection\\\"\\n                                id=\\\"radio_restore_all\\\"\\n                                class=\\\"icheck leaf_check\\\"\\n                                value=\\\"all\\\"\\n                                aria-describedby=\\\"restore_fields_parent_options\\\">\\n                            <span class=\\\"leaf_check\\\"></span> Restore associated fields\\n                        </label>\\n                        <label class=\\\"checkable leaf_check\\\" for=\\\"radio_restore_one\\\">\\n                            <input type=\\\"radio\\\"\\n                                v-model=\\\"userOptionSelection\\\"\\n                                id=\\\"radio_restore_one\\\"\\n                                class=\\\"icheck leaf_check\\\"\\n                                value=\\\"one\\\"\\n                                aria-describedby=\\\"restore_fields_parent_options\\\">\\n                            <span class=\\\"leaf_check\\\"></span> Only restore this field (This will break its associations)\\n                        </label>\\n                    </fieldset>\\n                </template>\\n            </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/RestoreFieldOptionsDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/views/RestoreFieldsView.js":
/*!****************************************************!*\
  !*** ./src/form_editor/views/RestoreFieldsView.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/* harmony import */ var _common_components_LeafFormDialog_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/common/components/LeafFormDialog.js */ \"./src/common/components/LeafFormDialog.js\");\n/* harmony import */ var _components_dialog_content_RestoreFieldOptionsDialog_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/dialog_content/RestoreFieldOptionsDialog.js */ \"./src/form_editor/components/dialog_content/RestoreFieldOptionsDialog.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'restore-fields-view',\n  data: function data() {\n    return {\n      loading: true,\n      formGrid: null,\n      disabledFields: [],\n      enabledFields: {},\n      indicatorID_toRestore: null,\n      indicatorName_toRestore: \"\",\n      disabledAncestors: [],\n      firstOrphanID: null,\n      searchPending: true\n    };\n  },\n  components: {\n    LeafFormDialog: _common_components_LeafFormDialog_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    RestoreFieldOptionsDialog: _components_dialog_content_RestoreFieldOptionsDialog_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n  },\n  inject: ['APIroot', 'CSRFToken', 'setDefaultAjaxResponseMessage', 'openRestoreFieldOptionsDialog', 'decodeAndStripHTML', 'showFormDialog', 'dialogFormContent'],\n  provide: function provide() {\n    var _this = this;\n    return {\n      indicatorID_toRestore: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.indicatorID_toRestore;\n      }),\n      indicatorName_toRestore: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.indicatorName_toRestore;\n      }),\n      disabledAncestors: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.disabledAncestors;\n      }),\n      firstOrphanID: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.firstOrphanID;\n      }),\n      searchPending: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.searchPending;\n      }),\n      restoreField: this.restoreField,\n      updateAppData: this.updateAppData\n    };\n  },\n  /**\n   * get all disabled or archived indicators for indID > 0 and update app disabledFields (array)\n   */\n  created: function created() {\n    var _this2 = this;\n    //get information used for table for all non-builtin disabled fields.\n    var disabledPromise = fetch(\"\".concat(this.APIroot, \"form/indicator/list/disabled\")).then(function (res) {\n      return res.json();\n    });\n\n    //get other indicators to identify enabled fields (used to complete indicator: parent ID chain)\n    var unabridgedPromise = fetch(\"\".concat(this.APIroot, \"form/indicator/list/unabridged?x-filterData=indicatorID,parentIndicatorID,isDisabled\")).then(function (res) {\n      return res.json();\n    });\n    Promise.all([disabledPromise, unabridgedPromise]).then(function (data) {\n      if (Array.isArray(data === null || data === void 0 ? void 0 : data[0])) {\n        var resDisabled = data[0];\n        var dFields = [];\n        resDisabled.map(function (obj) {\n          if (+obj.indicatorID > 0) {\n            obj.name = _this2.decodeAndStripHTML(obj.name || \"[ blank ]\");\n            dFields.push(obj);\n          }\n        });\n        _this2.disabledFields = dFields;\n      }\n      if (Array.isArray(data === null || data === void 0 ? void 0 : data[1])) {\n        var resUnabridged = data[1];\n        var enabledFields = resUnabridged.filter(function (obj) {\n          return +obj.indicatorID > 0 && +obj.isDisabled === 0;\n        });\n        enabledFields.forEach(function (f) {\n          return _this2.enabledFields[f.indicatorID] = {\n            indicatorID: f.indicatorID,\n            parentIndicatorID: f.parentIndicatorID\n          };\n        });\n      }\n      _this2.loading = false;\n      _this2.initializeAppGrid();\n    })[\"catch\"](function (err) {\n      return console.log(err);\n    });\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.setDefaultAjaxResponseMessage();\n    });\n  },\n  computed: {\n    /* Lookup table of parentID information keyed by indicatorID */fieldParentIDLookup: function fieldParentIDLookup() {\n      var lookup = {};\n      var pID = null;\n      this.disabledFields.forEach(function (f) {\n        pID = f.parentIndicatorID;\n        if (pID !== null) {\n          lookup[f.indicatorID] = pID;\n        }\n      });\n      for (var indID in this.enabledFields) {\n        pID = this.enabledFields[indID].parentIndicatorID;\n        if (pID !== null) {\n          lookup[indID] = pID;\n        }\n      }\n      return lookup;\n    },\n    /* Lookup table of disabled fields information keyed by indicator ID.  RecordID is added for grid use*/disabledFieldsLookup: function disabledFieldsLookup() {\n      var lookup = {};\n      this.disabledFields.forEach(function (f) {\n        return lookup[f.indicatorID] = _objectSpread(_objectSpread({}, f), {}, {\n          recordID: f.indicatorID\n        });\n      });\n      return lookup;\n    }\n  },\n  methods: {\n    /**\n     * Update indicatorID_toRestore and disabledAncestors component data\n     * Restore if no disabled ancestors, otherwise use options modal\n     * @param {number} indicatorID\n     * @param {string} name\n     * @param {number|null} parentIndicatorID\n     */\n    restoreFieldGate: function restoreFieldGate(indicatorID, name, parentIndicatorID) {\n      var _this3 = this;\n      this.indicatorID_toRestore = indicatorID;\n      this.indicatorName_toRestore = name;\n      this.searchAncestorStates(parentIndicatorID);\n      if (this.searchPending === false && this.disabledAncestors.length === 0 && this.firstOrphanID === null) {\n        this.restoreField(this.indicatorID_toRestore).then(function () {\n          return _this3.updateAppData(indicatorID, 1250);\n        })[\"catch\"](function (err) {\n          return console.log(err);\n        });\n      } else {\n        this.openRestoreFieldOptionsDialog();\n      }\n    },\n    /**\n     * \n     * @param {number} indicatorID\n     * returns promise\n     */\n    restoreField: function restoreField(indicatorID) {\n      var formData = new FormData();\n      formData.append('CSRFToken', this.CSRFToken);\n      formData.append('disabled', 0);\n      return fetch(\"\".concat(this.APIroot, \"formEditor/\").concat(indicatorID, \"/disabled\"), {\n        method: 'POST',\n        body: formData\n      });\n    },\n    /**\n     * Used for edge-case of retrieving indicator information for prior orphaned questions\n     * @param {number} indicatorID\n     * @returns Promise\n     */\n    getIndicator: function getIndicator(indicatorID) {\n      return fetch(\"\".concat(this.APIroot, \"formEditor/indicator/\").concat(indicatorID, \"?x-filterData=indicatorID,parentID\"));\n    },\n    updateTableIfNoResults: function updateTableIfNoResults() {\n      var _this4 = this;\n      //force full file read first - default message would otherwise be added after this method runs.\n      setTimeout(function () {\n        var tBody = document.getElementById(_this4.formGrid.getPrefixID() + \"tbody\");\n        if (_this4.disabledFields.length === 0 && tBody !== null) {\n          tBody.innerHTML = \"<tr><td colspan=\\\"6\\\" style=\\\"text-align: center\\\">No Fields To Restore</td></tr>\";\n        }\n      });\n    },\n    /**\n     *\n     * @param {number} indicatorID for fields to be updated\n     * @param {number} timeout time (ms) 'Restore' message is displayed in table\n     */\n    updateAppData: function updateAppData() {\n      var _this5 = this;\n      var indicatorID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var timeout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      if (indicatorID > 0) {\n        this.disabledFields = this.disabledFields.filter(function (f) {\n          return f.indicatorID !== indicatorID;\n        });\n        this.enabledFields[indicatorID] = {\n          indicatorID: indicatorID,\n          parentIndicatorID: this.fieldParentIDLookup[indicatorID]\n        };\n        this.formGrid.setDataBlob(this.disabledFieldsLookup);\n        var tableBodyID = this.formGrid.getPrefixID() + \"tbody\";\n        var tableRowID = this.formGrid.getPrefixID() + \"tbody_tr\" + indicatorID;\n        var tableBody = document.getElementById(tableBodyID);\n        var tableRow = document.getElementById(tableRowID);\n        if (tableBody !== null && tableRow !== null) {\n          tableRow.innerHTML = \"<td colspan=\\\"6\\\" style=\\\"text-align:center;\\\">\\n                        <b style=\\\"color:#064;\\\">Field restored</b>\\n                    </td>\";\n          setTimeout(function () {\n            if (tableBody.contains(tableRow)) {\n              tableBody.removeChild(tableRow);\n            }\n            _this5.updateTableIfNoResults();\n          }, timeout);\n        }\n      }\n    },\n    /**\n     * Searches up the ancestor chain of the field to be restored. Adds inactive fields to app disabledAncestors array.\n     * Updates app firstOrphanID if an orphan is found - attempts once to get information for it.\n     * If successful, updates app enabledFields and reattempts ancestor search - otherwise ends search.\n     * @param {number} directParentID\n     */\n    searchAncestorStates: function searchAncestorStates() {\n      var _this6 = this;\n      var directParentID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      this.disabledAncestors = [];\n      this.firstOrphanID = null;\n      var baseParent = null;\n      if (directParentID !== null) {\n        baseParent = directParentID;\n        while (directParentID > 0) {\n          var _this$disabledFieldsL;\n          //if ancestor is confirmed inactive, add it and update variable\n          if (((_this$disabledFieldsL = this.disabledFieldsLookup[directParentID]) === null || _this$disabledFieldsL === void 0 ? void 0 : _this$disabledFieldsL.indicatorID) > 0) {\n            this.disabledAncestors.push(this.disabledFieldsLookup[directParentID]);\n            directParentID = +this.fieldParentIDLookup[directParentID];\n          } else {\n            var _this$enabledFields$d;\n            //if it's accounted for, just update the loop variable\n            if (((_this$enabledFields$d = this.enabledFields[directParentID]) === null || _this$enabledFields$d === void 0 ? void 0 : _this$enabledFields$d.indicatorID) > 0) {\n              directParentID = +this.fieldParentIDLookup[directParentID];\n              //otherwise, try to get the data (likely rare - occurs if an enabled q is a child of a deleted one)\n            } else {\n              this.firstOrphanID = directParentID;\n              directParentID = 0;\n            }\n          }\n        }\n        if (this.firstOrphanID !== null) {\n          this.getIndicator(this.firstOrphanID).then(function (res) {\n            return res.json().then(function (data) {\n              var indicator = data === null || data === void 0 ? void 0 : data[_this6.firstOrphanID];\n              if ((indicator === null || indicator === void 0 ? void 0 : indicator.indicatorID) > 0) {\n                var parentIndicatorID = indicator.parentID,\n                  indicatorID = indicator.indicatorID;\n                _this6.enabledFields[indicatorID] = {\n                  indicatorID: indicatorID,\n                  parentIndicatorID: parentIndicatorID\n                };\n                //try again if indicator info could be found\n                _this6.searchAncestorStates(baseParent);\n\n                //set searching to false if: not found, on error, no orphan detection, first parent is page level.\n              } else {\n                _this6.searchPending = false;\n              }\n            })[\"catch\"](function (err) {\n              _this6.searchPending = false;\n              console.log(err);\n            });\n          });\n        } else {\n          this.searchPending = false;\n        }\n      } else {\n        this.searchPending = false;\n      }\n    },\n    initializeAppGrid: function initializeAppGrid() {\n      var _this7 = this;\n      this.formGrid = new LeafFormGrid(\"restore_fields_grid\", {});\n      this.formGrid.setRootURL('../');\n      this.formGrid.hideIndex();\n      this.formGrid.enableToolbar();\n      this.formGrid.setHeaders([{\n        name: 'IndicatorID&nbsp;',\n        indicatorID: 'indicatorID',\n        editable: false,\n        callback: function callback(data, blob) {\n          var elContainer = document.getElementById(data.cellContainerID);\n          if (elContainer !== null) {\n            elContainer.textContent = blob[data.recordID].indicatorID;\n          }\n        }\n      }, {\n        name: 'Form&nbsp;',\n        indicatorID: 'categoryName',\n        editable: false,\n        callback: function callback(data, blob) {\n          var elContainer = document.getElementById(data.cellContainerID);\n          if (elContainer !== null) {\n            elContainer.textContent = blob[data.recordID].categoryName;\n          }\n        }\n      }, {\n        name: 'Field Name&nbsp;',\n        indicatorID: 'name',\n        editable: false,\n        callback: function callback(data, blob) {\n          var elContainer = document.getElementById(data.cellContainerID);\n          if (elContainer !== null) {\n            elContainer.textContent = blob[data.recordID].name;\n          }\n        }\n      }, {\n        name: 'Input Format',\n        indicatorID: 'fomrat',\n        editable: false,\n        callback: function callback(data, blob) {\n          var elContainer = document.getElementById(data.cellContainerID);\n          if (elContainer !== null) {\n            elContainer.textContent = blob[data.recordID].format;\n          }\n        }\n      }, {\n        name: 'Status ',\n        indicatorID: 'disabled',\n        editable: false,\n        sortable: false,\n        callback: function callback(data, blob) {\n          var elContainer = document.getElementById(data.cellContainerID);\n          if (elContainer !== null) {\n            elContainer.textContent = blob[data.recordID].disabled;\n          }\n        }\n      }, {\n        name: 'Restore ',\n        indicatorID: 'restore',\n        editable: false,\n        sortable: false,\n        callback: function callback(data, blob) {\n          var elContainer = document.getElementById(data.cellContainerID);\n          if (elContainer !== null) {\n            var ID = blob[data.recordID].indicatorID;\n            var pID = blob[data.recordID].parentIndicatorID;\n            var name = blob[data.recordID].name;\n            if (name.length > 45) {\n              name = name.slice(0, 42) + \"...\";\n            }\n            elContainer.innerHTML = \"\\n                                <button type=\\\"button\\\" id=\\\"restore_indicator_\".concat(ID, \"\\\"\\n                                    class=\\\"btn-general\\\" style=\\\"margin: auto;\\\">\\n                                    Restore this field\\n                                </button>\");\n            var elBtn = document.getElementById(\"restore_indicator_\".concat(ID));\n            if (elBtn !== null) {\n              elBtn.addEventListener(\"click\", function () {\n                return _this7.restoreFieldGate(ID, name, pID);\n              });\n            }\n          }\n        }\n      }]);\n      var arrHeaders = Array.from(document.querySelectorAll('table > thead > tr > th'));\n      arrHeaders.forEach(function (h) {\n        h.style.padding = \"4px 8px\";\n        h.style.fontSize = \"1rem\";\n        h.style.fontWeight = \"bold\";\n      });\n      this.formGrid.setDataBlob(this.disabledFieldsLookup);\n      this.formGrid.renderBody();\n      this.updateTableIfNoResults();\n      this.formGrid.setPostSortRequestFunc(this.updateTableIfNoResults);\n    }\n  },\n  template: \"<section id=\\\"restore_fields_view\\\">\\n            <h2 id=\\\"page_breadcrumbs\\\">\\n                <a href=\\\"../admin\\\" class=\\\"leaf-crumb-link\\\" title=\\\"to Admin Home\\\">Admin</a>\\n                <i class=\\\"fas fa-caret-right leaf-crumb-caret\\\"></i>\\n                <router-link :to=\\\"{ name: 'browser' }\\\" class=\\\"leaf-crumb-link\\\" title=\\\"to Form Browser\\\">Form Browser</router-link>\\n                <i class=\\\"fas fa-caret-right leaf-crumb-caret\\\"></i>Restore Fields\\n            </h2>\\n            <h3>List of disabled fields available for recovery</h3>\\n            <div>Deleted fields and associated data will not display in the Report Builder.</div>\\n            <div v-if=\\\"loading === true\\\" class=\\\"page_loading\\\">\\n                Loading...\\n                <img src=\\\"../images/largespinner.gif\\\" alt=\\\"\\\" />\\n            </div>\\n            <div id=\\\"restore_fields_grid\\\"></div> <!-- this won't work inside of else -->\\n\\n            <!-- DIALOGS -->\\n            <leaf-form-dialog v-if=\\\"showFormDialog\\\">\\n                <template #dialog-content-slot>\\n                    <component :is=\\\"dialogFormContent\\\"></component>\\n                </template>\\n            </leaf-form-dialog>\\n        </section>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/views/RestoreFieldsView.js?\n}");

/***/ })

}]);