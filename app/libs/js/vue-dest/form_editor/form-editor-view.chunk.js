"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkleaf_vue"] = self["webpackChunkleaf_vue"] || []).push([["form-editor-view"],{

/***/ "./src/common/components/HistoryDialog.js":
/*!************************************************!*\
  !*** ./src/common/components/HistoryDialog.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'history-dialog',\n  data: function data() {\n    return {\n      requiredDataProperties: ['historyType', 'historyID'],\n      divSaveCancelID: 'leaf-vue-dialog-cancel-save',\n      page: 1,\n      historyType: this.dialogData.historyType,\n      historyID: this.dialogData.historyID,\n      ajaxRes: null\n    };\n  },\n  inject: ['dialogData', 'checkRequiredData', 'lastModalTab'],\n  created: function created() {\n    this.checkRequiredData(this.requiredDataProperties);\n  },\n  mounted: function mounted() {\n    document.getElementById(this.divSaveCancelID).style.display = 'none';\n    this.getPage();\n  },\n  computed: {\n    showNext: function showNext() {\n      return this.ajaxRes === null ? false : this.ajaxRes.indexOf('No history to show') === -1;\n    },\n    showPrev: function showPrev() {\n      return this.page > 1;\n    }\n  },\n  methods: {\n    getNext: function getNext() {\n      this.page++;\n      this.getPage();\n    },\n    getPrev: function getPrev() {\n      this.page--;\n      this.getPage();\n    },\n    getPage: function getPage() {\n      var _this = this;\n      try {\n        var url = \"ajaxIndex.php?a=gethistory&type=\".concat(this.historyType, \"&gethistoryslice=1&page=\").concat(this.page, \"&id=\").concat(this.historyID);\n        fetch(url).then(function (res) {\n          res.text().then(function (txt) {\n            return _this.ajaxRes = txt;\n          });\n        });\n      } catch (error) {\n        console.log('error getting history', error);\n      }\n    }\n  },\n  template: \"<div>\\n        <div v-if=\\\"ajaxRes === null\\\" class=\\\"page_loading\\\">\\n            Loading...\\n            <img src=\\\"../images/largespinner.gif\\\" alt=\\\"\\\" />\\n        </div>\\n        <div v-else id=\\\"history-slice\\\" v-html=\\\"ajaxRes\\\" style=\\\"min-height: 100px; min-width: 300px;\\\"></div>\\n        <div id=\\\"history-page-buttons\\\" style=\\\"display: flex; justify-content: space-between;\\\">\\n            <button v-if=\\\"showPrev\\\" id=\\\"prev\\\" type=\\\"button\\\"\\n                class=\\\"btn-general\\\"\\n                style=\\\"width: 125px;\\\"\\n                @click=\\\"getPrev\\\" title=\\\"get previous page\\\">\\n                Previous page\\n            </button>\\n            <button v-if=\\\"showNext\\\" id=\\\"next\\\" type=\\\"button\\\"\\n                class=\\\"btn-general\\\"\\n                style=\\\"width: 125px; margin-left: auto;\\\"\\n                @click=\\\"getNext\\\" @keydown.tab=\\\"lastModalTab\\\" title=\\\"get next page\\\">\\n                Next page\\n            </button>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/common/components/HistoryDialog.js?\n}");

/***/ }),

/***/ "./src/common/components/LeafFormDialog.js":
/*!*************************************************!*\
  !*** ./src/common/components/LeafFormDialog.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data: function data() {\n    return {\n      scrollY: window.scrollY,\n      initialTop: 15,\n      modalElementID: 'leaf_dialog_content',\n      modalBackgroundID: 'leaf-vue-dialog-background',\n      elBody: null,\n      elModal: null,\n      elBackground: null,\n      elClose: null,\n      lastFocus: null\n    };\n  },\n  inject: ['dialogTitle', 'closeFormDialog', 'formSaveFunction', 'dialogButtonText', 'lastModalTab'],\n  created: function created() {\n    this.lastFocus = document.activeElement || null;\n  },\n  mounted: function mounted() {\n    this.elBody = document.querySelector('body');\n    this.elModal = document.getElementById(this.modalElementID);\n    this.elModal.style.left = window.scrollX + window.innerWidth / 2 - this.elModal.clientWidth / 2 + 'px';\n    this.elBackground = document.getElementById(this.modalBackgroundID);\n    this.elClose = document.getElementById('leaf-vue-dialog-close');\n    this.makeDraggable(this.elModal);\n    //if there is not already an active el in the modal, focus the close button\n    var activeEl = document.activeElement;\n    var closestLeafDialog = activeEl !== null ? activeEl.closest('.leaf-vue-dialog-content') : null;\n    if (closestLeafDialog === null) {\n      this.elClose.focus();\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    var _this$lastFocus;\n    //refocus last item.  some events can cause a remount so try to select the el from its id first\n    var lastID = ((_this$lastFocus = this.lastFocus) === null || _this$lastFocus === void 0 ? void 0 : _this$lastFocus.id) || null;\n    if (lastID !== null) {\n      var lastEl = document.getElementById(lastID);\n      if (lastEl !== null) {\n        lastEl.focus();\n      }\n    } else if (this.lastFocus !== null) {\n      this.lastFocus.focus();\n    }\n  },\n  methods: {\n    firstTab: function firstTab(event) {\n      if ((event === null || event === void 0 ? void 0 : event.shiftKey) === true) {\n        var modCancel = document.querySelector('#ifthen_deletion_dialog button.btn-general');\n        var next = document.getElementById('next');\n        var cancel = document.getElementById('button_cancelchange');\n        var last = modCancel || next || cancel;\n        if (last !== null && typeof last.focus === 'function') {\n          last.focus();\n          event.preventDefault();\n        }\n      }\n    },\n    /**\r\n     * makes the modal draggable\r\n     * @param {Object} el DOM element\r\n     */\n    makeDraggable: function makeDraggable() {\n      var _this = this;\n      var el = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var pos1 = 0;\n      var pos2 = 0;\n      var mouseX = 0;\n      var mouseY = 0;\n      var elementDrag = function elementDrag(e) {\n        e = e || window.event;\n        e.preventDefault();\n        pos1 = mouseX - e.clientX;\n        pos2 = mouseY - e.clientY;\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        el.style.top = el.offsetTop - pos2 + \"px\";\n        el.style.left = el.offsetLeft - pos1 + \"px\";\n        checkBounds();\n      };\n      var closeDragElement = function closeDragElement() {\n        document.onmouseup = null;\n        document.onmousemove = null;\n      };\n      var dragMouseDown = function dragMouseDown(e) {\n        e = e || window.event;\n        e.preventDefault();\n        mouseX = e.clientX;\n        mouseY = e.clientY;\n        document.onmouseup = closeDragElement;\n        document.onmousemove = elementDrag;\n      };\n      var checkBounds = function checkBounds() {\n        var scrollbarWidth = 18;\n        if (el.offsetTop < window.scrollY) {\n          el.style.top = window.scrollY + 'px';\n        }\n        if (el.offsetLeft < window.scrollX) {\n          el.style.left = window.scrollX + 'px';\n        }\n        if (el.offsetLeft + el.clientWidth + scrollbarWidth > window.innerWidth + window.scrollX) {\n          el.style.left = window.innerWidth + window.scrollX - el.clientWidth - scrollbarWidth + 'px';\n        }\n        _this.elBackground.style.minWidth = _this.elBody.clientWidth + 'px';\n        _this.elBackground.style.minHeight = _this.elModal.offsetTop + _this.elBody.clientHeight + 'px';\n      };\n      if (document.getElementById(this.modalElementID + \"_drag_handle\")) {\n        document.getElementById(this.modalElementID + \"_drag_handle\").onmousedown = dragMouseDown;\n      }\n    }\n  },\n  template: \"<Teleport to=\\\"body\\\">\\n        <div id=\\\"leaf-vue-dialog-background\\\" aria-disabled=\\\"true\\\" aria-hidden=\\\"true\\\"></div>\\n        <div :id=\\\"modalElementID\\\" class=\\\"leaf-vue-dialog\\\"\\n            role=\\\"dialog\\\" aria-modal=\\\"true\\\" :aria-labelledby=\\\"modalElementID + '_drag_handle'\\\" aria-describedby=\\\"record\\\"\\n            :style=\\\"{top: scrollY + initialTop + 'px'}\\\">\\n            <div v-html=\\\"dialogTitle\\\" :id=\\\"modalElementID + '_drag_handle'\\\" class=\\\"leaf-vue-dialog-title\\\"></div>\\n            <button type=\\\"button\\\" @click=\\\"closeFormDialog\\\" @keydown.tab=\\\"firstTab\\\" id=\\\"leaf-vue-dialog-close\\\" aria-label=\\\"Close\\\">&#10005;</button>\\n            <div id=\\\"record\\\" style=\\\"max-height:100vh;overflow-y:auto\\\">\\n                <div id=\\\"xhr\\\" class=\\\"leaf-vue-dialog-content\\\">\\n                    <slot name=\\\"dialog-content-slot\\\"></slot>\\n                </div>\\n                <div id=\\\"leaf-vue-dialog-cancel-save\\\">\\n                    <button type=\\\"button\\\" style=\\\"width: 90px;\\\"\\n                        id=\\\"button_save\\\" class=\\\"btn-confirm\\\" :title=\\\"dialogButtonText.confirm\\\"\\n                        @click=\\\"formSaveFunction\\\">\\n                        {{dialogButtonText.confirm}}\\n                    </button>\\n                    <button type=\\\"button\\\" style=\\\"width: 90px;\\\"\\n                        id=\\\"button_cancelchange\\\" class=\\\"btn-general\\\" :title=\\\"dialogButtonText.cancel\\\"\\n                        @click=\\\"closeFormDialog\\\" @keydown.tab=\\\"lastModalTab\\\">\\n                        {{dialogButtonText.cancel}}\\n                    </button>\\n                </div>\\n            </div>\\n        </div>\\n    </Teleport>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/common/components/LeafFormDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/GridCell.js":
/*!************************************************!*\
  !*** ./src/form_editor/components/GridCell.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'grid-cell',\n  data: function data() {\n    var _this$cell, _this$cell2, _this$cell3, _this$cell4, _this$cell5, _this$cell6;\n    return {\n      name: ((_this$cell = this.cell) === null || _this$cell === void 0 ? void 0 : _this$cell.name) || 'No title',\n      id: ((_this$cell2 = this.cell) === null || _this$cell2 === void 0 ? void 0 : _this$cell2.id) || this.makeColumnID(),\n      gridType: ((_this$cell3 = this.cell) === null || _this$cell3 === void 0 ? void 0 : _this$cell3.type) || 'text',\n      textareaDropOptions: (_this$cell4 = this.cell) !== null && _this$cell4 !== void 0 && _this$cell4.options ? this.cell.options.join('\\n') : [],\n      file: ((_this$cell5 = this.cell) === null || _this$cell5 === void 0 ? void 0 : _this$cell5.file) || \"\",\n      hasHeader: (_this$cell6 = this.cell) !== null && _this$cell6 !== void 0 && _this$cell6.hasHeader ? 1 : 0\n    };\n  },\n  props: {\n    cell: Object,\n    column: Number\n  },\n  inject: ['libsPath', 'gridJSON', 'updateGridJSON', 'fileManagerTextFiles'],\n  mounted: function mounted() {\n    /**\r\n     * adds the first column to a new grid format indicator\r\n     */\n    if (this.gridJSON.length === 0) {\n      this.updateGridJSON();\n    }\n  },\n  computed: {\n    gridJSONlength: function gridJSONlength() {\n      return this.gridJSON.length;\n    }\n  },\n  methods: {\n    /**\r\n     * Purpose: Generates Unique ID to track columns to update user input with grid format\r\n     * @returns {string}\r\n     */\n    makeColumnID: function makeColumnID() {\n      return \"col_\" + ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n    },\n    /**\r\n     * Purpose: Delete a column from Grid\r\n     * @param {Object} event DOM event\r\n     */\n    deleteColumn: function deleteColumn() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var column = event.currentTarget.closest('div.cell');\n      var cellsParent = document.getElementById('gridcell_col_parent');\n      var cells = Array.from(cellsParent.querySelectorAll('div.cell'));\n      var colNumber = cells.indexOf(column) + 1;\n      var numcells = cells.length;\n      var focus;\n      switch (numcells) {\n        case 2:\n          column.remove();\n          numcells--;\n          focus = cells[0];\n          break;\n        default:\n          if (column.querySelector('[title=\"Move column right\"]') === null) {\n            focus = column.previousElementSibling.querySelector('[title=\"Delete column\"]');\n          } else {\n            focus = column.nextElementSibling.querySelector('[title=\"Delete column\"]');\n          }\n          column.remove();\n          numcells--;\n          break;\n      }\n      document.getElementById('tableStatus').setAttribute('aria-label', \"column \".concat(colNumber, \" removed, \").concat(numcells, \" total.\"));\n      focus.focus();\n      this.updateGridJSON();\n    },\n    /**\r\n     * Purpose: Move Column Right\r\n     * @param {Object} event DOM event\r\n     */\n    moveRight: function moveRight() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var column = event.currentTarget.closest('div.cell');\n      var nextColumnRight = column.nextElementSibling;\n      var nextColumnRightImg = column.nextElementSibling.querySelector('[title=\"Move column right\"]');\n      nextColumnRight.after(column);\n      setTimeout(function () {\n        var _column$querySelector;\n        //clear stack\n        (_column$querySelector = column.querySelector(\"[title=\\\"Move column \".concat(nextColumnRightImg === null ? 'left' : 'right', \"\\\"]\"))) === null || _column$querySelector === void 0 || _column$querySelector.focus();\n      }, 0);\n      document.getElementById('tableStatus').setAttribute('aria-label', \"Moved right to column \".concat(this.column + 1, \" of \").concat(this.gridJSONlength));\n      this.updateGridJSON();\n    },\n    /**\r\n     * Purpose: Move Column Left\r\n     * @param {Object} event DOM event\r\n     */\n    moveLeft: function moveLeft() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var column = event.currentTarget.closest('div.cell');\n      var nextColumnLeft = column.previousElementSibling;\n      var nextColumnLeftImg = column.previousElementSibling.querySelector('[title=\"Move column left\"]');\n      nextColumnLeft.before(column);\n      setTimeout(function () {\n        var _column$querySelector2;\n        //clear stack\n        (_column$querySelector2 = column.querySelector(\"[title=\\\"Move column \".concat(nextColumnLeftImg === null ? 'right' : 'left', \"\\\"]\"))) === null || _column$querySelector2 === void 0 || _column$querySelector2.focus();\n      }, 0);\n      document.getElementById('tableStatus').setAttribute('aria-label', \"Moved left to column \".concat(this.column - 1, \" of \").concat(this.gridJSONlength));\n      this.updateGridJSON();\n    }\n  },\n  watch: {\n    /**\r\n     * updates aria when a grid column is added when editing grid format indicators\r\n     * @param {number} newVal \r\n     * @param {number} oldVal \r\n     */\n    gridJSONlength: function gridJSONlength(newVal, oldVal) {\n      if (newVal > oldVal) {\n        document.getElementById('tableStatus').setAttribute('aria-label', \"Added a new column, \".concat(this.gridJSONlength, \" total.\"));\n      }\n    }\n  },\n  template: \"<div :id=\\\"id\\\" class=\\\"cell\\\">\\n        <img v-if=\\\"column !== 1\\\" role=\\\"button\\\" tabindex=\\\"0\\\"\\n            @click=\\\"moveLeft\\\" @keypress.space.enter.prevent=\\\"moveLeft\\\"\\n            :src=\\\"libsPath + 'dynicons/svg/go-previous.svg'\\\" style=\\\"width: 16px; cursor: pointer\\\"\\n            title=\\\"Move column left\\\" alt=\\\"Move column left\\\"  />\\n        <img v-if=\\\"column !== gridJSON.length\\\" role=\\\"button\\\" tabindex=\\\"0\\\" \\n            @click=\\\"moveRight\\\"  @keypress.space.enter.prevent=\\\"moveRight\\\" \\n            :src=\\\"libsPath + 'dynicons/svg/go-next.svg'\\\" style=\\\"width: 16px; cursor: pointer\\\"\\n            title=\\\"Move column right\\\" alt=\\\"Move column right\\\" /><br />\\n        <span class=\\\"columnNumber\\\">\\n            <span>Column #{{column}}:</span>\\n            <img v-if=\\\"gridJSON.length !== 1\\\" role=\\\"button\\\" tabindex=\\\"0\\\"\\n            @click=\\\"deleteColumn\\\" @keypress.space.enter.prevent=\\\"deleteColumn\\\"\\n            :src=\\\"libsPath + 'dynicons/svg/process-stop.svg'\\\" style=\\\"width: 16px; cursor: pointer\\\"\\n            title=\\\"Delete column\\\" alt=\\\"Delete column\\\" />\\n        </span>\\n        <label :for=\\\"'gridcell_title_' + id\\\">Title:</label>\\n        <input type=\\\"text\\\" v-model=\\\"name\\\" :id=\\\"'gridcell_title_' + id\\\" />\\n        <label :for=\\\"'gridcell_type_' + id\\\">Type:</label>\\n        <select v-model=\\\"gridType\\\" :id=\\\"'gridcell_type_' + id\\\">\\n            <option value=\\\"text\\\">Single line input</option>\\n            <option value=\\\"date\\\">Date</option>\\n            <option value=\\\"dropdown\\\">Drop Down</option>\\n            <option value=\\\"dropdown_file\\\">Dropdown From File</option>\\n            <option value=\\\"textarea\\\">Multi-line text</option>\\n        </select>\\n        <div v-show=\\\"gridType === 'dropdown'\\\">\\n            <label for=\\\"'gridcell_options_' + id\\\">One option per line</label>\\n            <textarea :id=\\\"'gridcell_options_' + id\\\" \\n                v-model=\\\"textareaDropOptions\\\"\\n                aria-label=\\\"Dropdown options, one option per line\\\"\\n                style=\\\"width: 100%; height: 60px; resize:vertical\\\">\\n            </textarea>\\n        </div>\\n        <div v-show=\\\"gridType === 'dropdown_file'\\\">\\n            <label :for=\\\"'dropdown_file_select_' + id\\\">File (csv or txt format)</label>\\n            <select :id=\\\"'dropdown_file_select_' + id\\\" v-model=\\\"file\\\">\\n                <option value=\\\"\\\">Select a File</option>\\n                <option v-for=\\\"f in fileManagerTextFiles\\\" :key=\\\"'file_' + f\\\" :value=\\\"f\\\">{{f}}</option>\\n            </select>\\n            <label :for=\\\"'dropdown_file_header_select_' + id\\\">Does file contain headers</label>\\n            <select :id=\\\"'dropdown_file_header_select_' + id\\\" v-model=\\\"hasHeader\\\">\\n                <option :value=\\\"0\\\">No</option>\\n                <option :value=\\\"1\\\">Yes</option>\\n            </select>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/GridCell.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/IndicatorPrivileges.js":
/*!***********************************************************!*\
  !*** ./src/form_editor/components/IndicatorPrivileges.js ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'indicator-privileges',\n  data: function data() {\n    return {\n      allGroups: [],\n      groupsWithPrivileges: [],\n      group: 0,\n      statusMessageError: '',\n      ariaGroupStatus: ''\n    };\n  },\n  props: {\n    indicatorID: {\n      type: Number,\n      required: true\n    }\n  },\n  inject: ['APIroot', 'CSRFToken', 'showLastUpdate', 'focusedFormRecord', 'getFormByCategoryID'],\n  mounted: function mounted() {\n    var _this = this;\n    /**\r\n     * get groups for privileges selection and/or editing\r\n     */\n    var loadCalls = [$.ajax({\n      type: 'GET',\n      url: \"\".concat(this.APIroot, \"system/groups\"),\n      success: function success(res) {\n        _this.allGroups = res;\n      },\n      error: function error(err) {\n        return console.log(err);\n      }\n    }), $.ajax({\n      type: 'GET',\n      url: \"\".concat(this.APIroot, \"formEditor/indicator/\").concat(this.indicatorID, \"/privileges\"),\n      success: function success(res) {\n        _this.groupsWithPrivileges = res;\n      },\n      error: function error(err) {\n        console.log(err);\n        _this.statusMessageError = 'There was an error retrieving the Indicator Privileges. Please try again.';\n      }\n    })];\n    Promise.all(loadCalls).then(function (res) {\n      //console.log(res);\n    })[\"catch\"](function (err) {\n      return console.log('an error has occurred', err);\n    });\n  },\n  computed: {\n    availableGroups: function availableGroups() {\n      var groupIDs = [];\n      this.groupsWithPrivileges.map(function (g) {\n        return groupIDs.push(parseInt(g.id));\n      });\n      return this.allGroups.filter(function (g) {\n        return !groupIDs.includes(parseInt(g.groupID));\n      });\n    },\n    formID: function formID() {\n      var _this$focusedFormReco;\n      return ((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.categoryID) || '';\n    }\n  },\n  methods: {\n    /**\r\n     * \r\n     * @param {number} groupID \r\n     * @param {string} groupName \r\n     */\n    removeIndicatorPrivilege: function removeIndicatorPrivilege() {\n      var _this2 = this;\n      var groupID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var groupName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (groupID !== 0) {\n        $.ajax({\n          method: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/indicator/\").concat(this.indicatorID, \"/privileges/remove\"),\n          data: {\n            groupID: groupID,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success(res) {\n            //console.log(res); //NOTE: followup on this return value ('false').  should server return count(res)?\n            _this2.groupsWithPrivileges = _this2.groupsWithPrivileges.filter(function (g) {\n              return g.id !== groupID;\n            });\n            _this2.ariaGroupStatus = \"removed group id \".concat(groupID, \", \").concat(groupName);\n            _this2.getFormByCategoryID(_this2.formID);\n            _this2.showLastUpdate('form_properties_last_update');\n          },\n          error: function error(err) {\n            return console.log(err);\n          }\n        });\n      }\n    },\n    /**\r\n     *  uses currently selected group to add privileges. Updates component data properties 'group' and 'groupsWithPrivileges' if successful\r\n     */\n    addIndicatorPrivilege: function addIndicatorPrivilege() {\n      var _this3 = this;\n      if (this.group !== 0) {\n        $.ajax({\n          method: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/indicator/\").concat(this.indicatorID, \"/privileges\"),\n          data: {\n            groupIDs: [this.group.groupID],\n            CSRFToken: this.CSRFToken\n          },\n          success: function success() {\n            _this3.groupsWithPrivileges.push({\n              id: _this3.group.groupID,\n              name: _this3.group.name\n            });\n            _this3.ariaGroupStatus = \"added group id \".concat(_this3.group.groupID, \", \").concat(_this3.group.name);\n            _this3.group = 0;\n            _this3.getFormByCategoryID(_this3.formID);\n            _this3.showLastUpdate('form_properties_last_update');\n          },\n          error: function error(err) {\n            return console.log('an error occurred while setting group access restrictions', err);\n          }\n        });\n      }\n    }\n  },\n  template: \"<fieldset id=\\\"indicatorPrivileges\\\"  style=\\\"font-size: 90%; border-radius: 3px;\\\">\\n                <legend style=\\\"font-family: PublicSans-Bold\\\">Special access restrictions</legend>\\n                <div>\\n                    This prevents anyone from reading stored data unless they're part of the following groups.<br/> \\n                    If a group is assigned below, everyone else will see \\\"[protected data]\\\".\\n                </div>\\n                <template v-if=\\\"statusMessageError === ''\\\">\\n                    <div id=\\\"status_group_privs\\\" role=\\\"status\\\" :aria-label=\\\"ariaGroupStatus\\\" style=\\\"position:absolute;opacity:0;\\\" aria-live=\\\"assertive\\\"></div>\\n                    <div v-if=\\\"groupsWithPrivileges.length === 0\\\" style=\\\"margin:0.5rem 0\\\">No special access restrictions are enabled. Normal access rules apply.</div>\\n                    <div v-else style=\\\"margin:0.5rem 0\\\">\\n                        <div style=\\\"color: #a00;\\\">Special access restrictions are enabled.</div>\\n                        <ul>\\n                            <li v-for=\\\"g in groupsWithPrivileges\\\" :key=\\\"g.name + g.id\\\">\\n                                {{g.name}}\\n                                <button type=\\\"button\\\" @click=\\\"removeIndicatorPrivilege(parseInt(g.id), g.name)\\\"\\n                                    style=\\\"margin-left: 3px; background-color: transparent; color:#a00; padding: 0.1em 0.2em; border: 0; border-radius:3px;\\\" \\n                                    :title=\\\"'remove ' + g.name\\\" :aria-label=\\\"'remove ' + g.name\\\">\\n                                    <b>[ Remove ]</b>\\n                                </button>\\n                            </li>\\n                        </ul>\\n                    </div>\\n                </template>\\n                <div v-else>{{ statusMessageError }}</div>\\n                <label for=\\\"selectIndicatorPrivileges\\\" style=\\\"\\\">What group should have access to this field?</label>\\n                <div style=\\\"display: flex; align-items: center;\\\">\\n                    <select id=\\\"selectIndicatorPrivileges\\\" v-model=\\\"group\\\" style=\\\"width:260px;\\\">\\n                        <option :value=\\\"0\\\">Select a Group</option>\\n                        <option v-for=\\\"g in availableGroups\\\" :value=\\\"g\\\" :key=\\\"'avail_' + g.groupID\\\">{{g.name}} (id{{g.groupID}})</option>\\n                    </select>\\n                    <button type=\\\"button\\\" class=\\\"btn-general\\\" @click=\\\"addIndicatorPrivilege\\\"\\n                    :aria-label=\\\"'Add group ' + (group?.name || ', no group selected')\\\" style=\\\"margin-left: 3px; align-self:stretch;\\\">\\n                        Add group\\n                    </button>\\n                </div>\\n            </fieldset>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/IndicatorPrivileges.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/AdvancedOptionsDialog.js":
/*!****************************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/AdvancedOptionsDialog.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'advanced-options-dialog',\n  data: function data() {\n    var _this$dialogData, _this$dialogData2;\n    return {\n      requiredDataProperties: ['indicatorID', 'html', 'htmlPrint'],\n      initialFocusElID: '#advanced legend',\n      left: '{{',\n      right: '}}',\n      codeEditorHtml: {},\n      codeEditorHtmlPrint: {},\n      html: ((_this$dialogData = this.dialogData) === null || _this$dialogData === void 0 ? void 0 : _this$dialogData.html) || '',\n      htmlPrint: ((_this$dialogData2 = this.dialogData) === null || _this$dialogData2 === void 0 ? void 0 : _this$dialogData2.htmlPrint) || ''\n    };\n  },\n  inject: ['APIroot', 'libsPath', 'CSRFToken', 'setDialogSaveFunction', 'dialogData', 'checkRequiredData', 'closeFormDialog', 'focusedFormRecord', 'getFormByCategoryID', 'hasDevConsoleAccess'],\n  created: function created() {\n    this.setDialogSaveFunction(this.onSave);\n    this.checkRequiredData(this.requiredDataProperties);\n  },\n  mounted: function mounted() {\n    var _document$querySelect;\n    (_document$querySelect = document.querySelector(this.initialFocusElID)) === null || _document$querySelect === void 0 || _document$querySelect.focus();\n    if (this.hasDevConsoleAccess) {\n      this.setupAdvancedOptions();\n    }\n  },\n  computed: {\n    indicatorID: function indicatorID() {\n      var _this$dialogData3;\n      return (_this$dialogData3 = this.dialogData) === null || _this$dialogData3 === void 0 ? void 0 : _this$dialogData3.indicatorID;\n    },\n    formID: function formID() {\n      return this.focusedFormRecord.categoryID;\n    }\n  },\n  methods: {\n    /**\r\n     * html and htmlPrint fields use CodeMirror\r\n     */\n    setupAdvancedOptions: function setupAdvancedOptions() {\n      var _this = this;\n      this.codeEditorHtml = CodeMirror.fromTextArea(document.getElementById(\"html\"), {\n        mode: \"htmlmixed\",\n        lineNumbers: true,\n        extraKeys: {\n          \"F11\": function F11(cm) {\n            cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n          },\n          \"Esc\": function Esc(cm) {\n            if (cm.getOption(\"fullScreen\")) {\n              cm.setOption(\"fullScreen\", false);\n            } else {\n              var disableTab = {\n                \"Tab\": false,\n                \"Shift-Tab\": false\n              };\n              cm.addKeyMap(disableTab);\n              setTimeout(function () {\n                cm.removeKeyMap(disableTab);\n              }, 2500);\n            }\n          },\n          \"Ctrl-S\": function CtrlS(cm) {\n            _this.saveCodeHTML();\n          }\n        }\n      });\n      this.addCodeMirrorAria('html', 'codemirror_html_label');\n      this.codeEditorHtmlPrint = CodeMirror.fromTextArea(document.getElementById(\"htmlPrint\"), {\n        mode: \"htmlmixed\",\n        lineNumbers: true,\n        extraKeys: {\n          \"F11\": function F11(cm) {\n            cm.setOption(\"fullScreen\", !cm.getOption(\"fullScreen\"));\n          },\n          \"Esc\": function Esc(cm) {\n            if (cm.getOption(\"fullScreen\")) {\n              cm.setOption(\"fullScreen\", false);\n            } else {\n              var disableTab = {\n                \"Tab\": false,\n                \"Shift-Tab\": false\n              };\n              cm.addKeyMap(disableTab);\n              setTimeout(function () {\n                cm.removeKeyMap(disableTab);\n              }, 2500);\n            }\n          },\n          \"Ctrl-S\": function CtrlS(cm) {\n            _this.saveCodeHTMLPrint();\n          }\n        }\n      });\n      this.addCodeMirrorAria('htmlPrint', 'codemirror_htmlPrint_label');\n      $('.CodeMirror').css('border', '1px solid black');\n    },\n    /* adds aria attributes to editor for screenreaders */addCodeMirrorAria: function addCodeMirrorAria() {\n      var mountID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var labelID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var elTextarea = document.querySelector(\"#\".concat(mountID, \" + .CodeMirror textarea\"));\n      if (elTextarea !== null) {\n        elTextarea.setAttribute('id', labelID);\n        elTextarea.setAttribute('role', 'textbox');\n        elTextarea.setAttribute('aria-multiline', true);\n        elTextarea.setAttribute('aria-label', 'Coding area.  Press escape twice followed by tab to navigate out.');\n      }\n    },\n    /* save with the modal's html and htmlPrint 'save code' buttons  */saveCodeHTML: function saveCodeHTML() {\n      var _this2 = this;\n      var htmlValue = this.codeEditorHtml.getValue();\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/html\"),\n        data: {\n          html: htmlValue,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this2.html = htmlValue;\n          var time = new Date().toLocaleTimeString();\n          document.getElementById('codeSaveStatus_html').innerHTML = ', Last saved: ' + time;\n          _this2.getFormByCategoryID(_this2.formID);\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      });\n    },\n    saveCodeHTMLPrint: function saveCodeHTMLPrint() {\n      var _this3 = this;\n      var htmlPrintValue = this.codeEditorHtmlPrint.getValue();\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/htmlPrint\"),\n        data: {\n          htmlPrint: htmlPrintValue,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this3.htmlPrint = htmlPrintValue;\n          var time = new Date().toLocaleTimeString();\n          document.getElementById('codeSaveStatus_htmlPrint').innerHTML = ', Last saved: ' + time;\n          _this3.getFormByCategoryID(_this3.formID);\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      });\n    },\n    /* called with the 'save' button of base modal */onSave: function onSave() {\n      var _this4 = this;\n      var advancedOptionsUpdates = [];\n      var htmlChanged = this.html !== this.codeEditorHtml.getValue();\n      var htmlPrintChanged = this.htmlPrint !== this.codeEditorHtmlPrint.getValue();\n      if (htmlChanged) {\n        advancedOptionsUpdates.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/html\"),\n          data: {\n            html: this.codeEditorHtml.getValue(),\n            CSRFToken: this.CSRFToken\n          },\n          success: function success() {},\n          error: function error(err) {\n            return console.log('ind html post err', err);\n          }\n        }));\n      }\n      if (htmlPrintChanged) {\n        advancedOptionsUpdates.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/htmlPrint\"),\n          data: {\n            htmlPrint: this.codeEditorHtmlPrint.getValue(),\n            CSRFToken: this.CSRFToken\n          },\n          success: function success() {},\n          error: function error(err) {\n            return console.log('ind htmlPrint post err', err);\n          }\n        }));\n      }\n      Promise.all(advancedOptionsUpdates).then(function (res) {\n        _this4.closeFormDialog();\n        if (res.length > 0) {\n          _this4.getFormByCategoryID(_this4.formID);\n        }\n      })[\"catch\"](function (err) {\n        return console.log('an error has occurred', err);\n      });\n    }\n  },\n  template: \"<div v-if=\\\"hasDevConsoleAccess\\\" id=\\\"advanced_options_dialog_content\\\">\\n            <fieldset id=\\\"advanced\\\"><legend tabindex=\\\"0\\\">Template Variables and Controls</legend>\\n                <table class=\\\"table\\\">\\n                    <tr>\\n                        <td><b style=\\\"white-space: nowrap;\\\">{{ left }} iID {{ right }}</b></td>\\n                        <td>The indicatorID # of the current data field.</td>\\n                        <td><b>Ctrl-S</b></td>\\n                        <td>Save the focused section</td>\\n                    </tr>\\n                    <tr>\\n                        <td><b style=\\\"white-space: nowrap;\\\">{{ left }} recordID {{ right }}</b></td>\\n                        <td>The record ID # of the current request.</td>\\n                        <td><b>F11</b></td>\\n                        <td>Toggle Full Screen mode for the focused section</td>\\n                    </tr>\\n                    <tr>\\n                        <td><b style=\\\"white-space: nowrap;\\\">{{ left }} data {{ right }}</b></td>\\n                        <td>The contents of the current data field as stored in the database.</td>\\n                        <td><b>Esc</b></td>\\n                        <td>Escape Full Screen mode</td>\\n                    </tr>\\n                </table>\\n                <div style=\\\"font-size:14px;\\\">\\n                    Within the code editor, tab enters a tab character. If using the keyboard to navigate, press escape followed by tab to exit the editor.\\n                </div><br />\\n                <div class=\\\"save_code\\\">\\n                    <label for=\\\"codemirror_html_label\\\">html (for pages where the user can edit data):</label>\\n                    <button type=\\\"button\\\" id=\\\"btn_codeSave_html\\\" class=\\\"btn-general\\\" @click=\\\"saveCodeHTML\\\" aria-label=\\\"save html code\\\">\\n                        <img id=\\\"saveIndicator\\\" :src=\\\"libsPath + 'dynicons/svg/media-floppy.svg'\\\" alt=\\\"\\\" />\\n                        &nbsp;Save Code<span id=\\\"codeSaveStatus_html\\\"></span>\\n                    </button>\\n                </div>\\n                <textarea id=\\\"html\\\">{{html}}</textarea><br />\\n                <div class=\\\"save_code\\\">\\n                    <label for=\\\"codemirror_htmlPrint_label\\\">htmlPrint (for pages where the user can only read data):</label>\\n                    <button  type=\\\"button\\\" id=\\\"btn_codeSave_htmlPrint\\\" class=\\\"btn-general\\\" @click=\\\"saveCodeHTMLPrint\\\" aria-label=\\\"save html-print code\\\">\\n                        <img id=\\\"saveIndicator\\\" :src=\\\"libsPath + 'dynicons/svg/media-floppy.svg'\\\" alt=\\\"\\\" />\\n                        &nbsp;Save Code<span id=\\\"codeSaveStatus_htmlPrint\\\"></span>\\n                    </button>\\n                </div>\\n                <textarea id=\\\"htmlPrint\\\">{{htmlPrint}}</textarea>\\n            </fieldset>\\n        </div>\\n        <div v-else id=\\\"advanced_options_dialog_content\\\">\\n            <b>Notice:</b><br/>\\n            <p>Please go to <a href=\\\"../report.php?a=LEAF_start_leaf_dev_console_request\\\" target=\\\"_blank\\\">LEAF Programmer</a>\\n            to ensure continued access to this area.</p>\\n        </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/AdvancedOptionsDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/ConditionsEditorDialog.js":
/*!*****************************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/ConditionsEditorDialog.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'conditions-editor-dialog',\n  data: function data() {\n    return {\n      requiredDataProperties: ['indicatorID'],\n      indicators: [],\n      appIsLoadingIndicators: true,\n      parentIndID: 0,\n      selectedOperator: '',\n      selectedParentValue: '',\n      selectedOutcome: '',\n      selectedChildValue: '',\n      showRemoveModal: false,\n      showConditionEditor: false,\n      ariaStatus: '',\n      selectedConditionJSON: '',\n      enabledParentFormats: {\n        \"dropdown\": 1,\n        \"multiselect\": 1,\n        \"radio\": 1,\n        \"checkboxes\": 1,\n        \"number\": 1,\n        \"currency\": 1\n      },\n      multiOptionFormats: ['multiselect', 'checkboxes'],\n      orgchartSelectData: {},\n      crosswalkFile: '',\n      crosswalkHasHeader: false,\n      level2IndID: null,\n      canPrefillChild: {\n        \"text\": 1,\n        \"textarea\": 1,\n        \"dropdown\": 1,\n        \"multiselect\": 1,\n        \"radio\": 1,\n        \"checkboxes\": 1,\n        \"orgchart_employee\": 1,\n        \"orgchart_group\": 1,\n        \"orgchart_position\": 1\n      },\n      numericOperators: ['gt', 'gte', 'lt', 'lte']\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'setDialogSaveFunction', 'dialogData', 'checkRequiredData', 'orgchartFormats', 'focusedFormRecord', 'focusedFormTree', 'getFormByCategoryID', 'closeFormDialog', 'truncateText', 'decodeAndStripHTML', 'fileManagerTextFiles', 'initializeOrgSelector', 'lastModalTab'],\n  created: function created() {\n    this.checkRequiredData(this.requiredDataProperties);\n    this.setDialogSaveFunction(this.onSave);\n    this.getFormIndicators();\n  },\n  mounted: function mounted() {\n    var elSaveDiv = document.querySelector('#leaf-vue-dialog-cancel-save #button_save');\n    if (elSaveDiv !== null) {\n      elSaveDiv.style.display = 'none';\n    }\n  },\n  methods: {\n    /**\r\n     * create flat array for indicators from current form using injected form tree.\r\n     * Ensures number types for indIDs, trimmed lower format, trimmed options in array\r\n     */\n    getFormIndicators: function getFormIndicators() {\n      var formIndicators = [];\n      var _addIndicator = function addIndicator(index, parentID, node) {\n        var options = Array.isArray(node === null || node === void 0 ? void 0 : node.options) ? node.options.map(function (o) {\n          return o.trim();\n        }) : [];\n        options = options.filter(function (o) {\n          return o !== \"\";\n        });\n        formIndicators.push({\n          formPage: index,\n          parentID: +parentID,\n          //null will become 0\n          indicatorID: +node.indicatorID,\n          name: node.name || \"\",\n          format: node.format.toLowerCase().trim(),\n          options: options,\n          conditions: node.conditions,\n          hasSubquestions: node.child !== null\n        });\n        if (node.child !== null) {\n          for (var c in node.child) {\n            _addIndicator(index, node.indicatorID, node.child[c]);\n          }\n        }\n      };\n      this.focusedFormTree.forEach(function (page, index) {\n        _addIndicator(index, null, page);\n      });\n      this.indicators = formIndicators;\n      this.appIsLoadingIndicators = false;\n    },\n    /**\r\n    * @param {number} indicatorID\r\n    */\n    updateSelectedParentIndicator: function updateSelectedParentIndicator() {\n      var indicatorID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.parentIndID = indicatorID;\n      if (!this.selectedParentValueOptions.includes(this.selectedParentValue)) {\n        this.selectedParentValue = \"\";\n      }\n    },\n    /**\r\n     * @param {string} outcome (condition outcome options: Hide, Show, Pre-Fill)\r\n     */\n    updateSelectedOutcome: function updateSelectedOutcome() {\n      var outcome = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      this.selectedOutcome = outcome.toLowerCase();\n      this.selectedChildValue = \"\";\n      this.crosswalkFile = \"\";\n      this.crosswalkHasHeader = false;\n      this.level2IndID = null;\n      if (this.selectedOutcome === 'pre-fill') {\n        this.addOrgSelector();\n      }\n    },\n    /**\r\n     * @param {Object} target (DOM element)\r\n     * @param {string} type parent or child\r\n     */\n    updateSelectedOptionValue: function updateSelectedOptionValue() {\n      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'parent';\n      var value = '';\n      if ((target === null || target === void 0 ? void 0 : target.multiple) === true) {\n        var arrSelections = Array.from(target.selectedOptions);\n        arrSelections.forEach(function (sel) {\n          value += sel.label.trim() + '\\n';\n        });\n        value = value.trim();\n      } else {\n        value = target.value.trim();\n      }\n      if (type.toLowerCase() === 'parent') {\n        this.selectedParentValue = XSSHelpers.stripAllTags(value);\n        if (this.parentFormat === 'number' || this.parentFormat === 'currency') {\n          if (/^(\\d*)(\\.\\d+)?$/.test(value)) {\n            var floatValue = parseFloat(value);\n            this.selectedParentValue = this.parentFormat === 'currency' ? (Math.round(100 * floatValue) / 100).toFixed(2) : String(floatValue);\n          } else {\n            this.selectedParentValue = '';\n          }\n        }\n      } else if (type.toLowerCase() === 'child') {\n        this.selectedChildValue = XSSHelpers.stripAllTags(value);\n      }\n    },\n    newCondition: function newCondition() {\n      var showEditor = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      this.selectedConditionJSON = '';\n      this.showConditionEditor = showEditor;\n      this.selectedOperator = '';\n      this.parentIndID = 0;\n      this.selectedParentValue = '';\n      this.selectedOutcome = '';\n      this.selectedChildValue = '';\n      if (showEditor) {\n        this.ariaStatus = 'Entering new condition';\n      }\n    },\n    /** post conditions json.\r\n     * @param {bool} addSelected whether json should include the currently selected condition (deleting saves all but current)\r\n    */\n    postConditions: function postConditions() {\n      var _this = this;\n      var addSelected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      if (this.conditionComplete || addSelected === false) {\n        this.ariaStatus = '';\n        //copy of all conditions on child, and filter using stored JSON val\n        var currConditions = _toConsumableArray(this.savedConditions);\n        var newConditions = currConditions.filter(function (c) {\n          return JSON.stringify(c) !== _this.selectedConditionJSON;\n        });\n        //clean up some possible data type issues after php8 and br tags before saving.\n        newConditions.forEach(function (c) {\n          c.childIndID = parseInt(c.childIndID);\n          c.parentIndID = parseInt(c.parentIndID);\n          c.selectedChildValue = XSSHelpers.stripAllTags(c.selectedChildValue);\n          c.selectedParentValue = XSSHelpers.stripAllTags(c.selectedParentValue);\n        });\n\n        //if adding, confirm new conditions is unique\n        var newConditionJSON = JSON.stringify(this.conditions);\n        var newConditionIsUnique = newConditions.every(function (c) {\n          return JSON.stringify(c) !== newConditionJSON;\n        });\n        if (addSelected === true && newConditionIsUnique) {\n          newConditions.push(this.conditions);\n        }\n        newConditions = newConditions.length > 0 ? JSON.stringify(newConditions) : '';\n        $.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.childIndID, \"/conditions\"),\n          data: {\n            conditions: newConditions,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success(res) {\n            if (res !== 'Invalid Token.') {\n              _this.getFormByCategoryID(_this.formID);\n              var refIndicator = _this.indicators.find(function (ind) {\n                return ind.indicatorID === _this.childIndID;\n              });\n              refIndicator.conditions = newConditions;\n              _this.showRemoveModal = false;\n              _this.newCondition(false);\n              var elClose = document.getElementById('leaf-vue-dialog-close');\n              if (elClose !== null) {\n                elClose.focus();\n              }\n              setTimeout(function () {\n                _this.ariaStatus = 'Updated question conditions';\n              });\n            } else {\n              console.log('error adding condition', res);\n            }\n          },\n          error: function error(err) {\n            return console.log(err);\n          }\n        });\n      }\n    },\n    /**\r\n     * @param {Object} (destructured object {confirmDelete:boolean, condition:Object})\r\n     */\n    removeCondition: function removeCondition() {\n      var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref$confirmDelete = _ref.confirmDelete,\n        confirmDelete = _ref$confirmDelete === void 0 ? false : _ref$confirmDelete,\n        _ref$condition = _ref.condition,\n        condition = _ref$condition === void 0 ? {} : _ref$condition;\n      if (confirmDelete === true) {\n        //delete btn confirm modal\n        this.postConditions(false);\n      } else {\n        //X button select from list and open the confirm delete modal\n        this.selectConditionFromList(condition);\n        this.showRemoveModal = true;\n      }\n    },\n    /**\r\n     * store the selected condition in a string and update associated app values\r\n     * @param {Object} conditionObj \r\n     */\n    selectConditionFromList: function selectConditionFromList() {\n      var conditionObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      this.selectedConditionJSON = JSON.stringify(conditionObj);\n      this.parentIndID = parseInt((conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.parentIndID) || 0);\n      this.selectedOperator = (conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.selectedOp) || '';\n      this.selectedOutcome = ((conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.selectedOutcome) || '').toLowerCase();\n      this.selectedParentValue = (conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.selectedParentValue) || '';\n      this.selectedChildValue = (conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.selectedChildValue) || '';\n      this.crosswalkFile = (conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.crosswalkFile) || '';\n      this.crosswalkHasHeader = (conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.crosswalkHasHeader) || false;\n      this.level2IndID = (conditionObj === null || conditionObj === void 0 ? void 0 : conditionObj.level2IndID) || null;\n      this.showConditionEditor = true;\n      this.ariaStatus = 'Editing conditions';\n      this.addOrgSelector();\n    },\n    /**\r\n     * @param {number} id \r\n     * @returns {string}\r\n     */\n    getIndicatorName: function getIndicatorName() {\n      var _this$indicators$find;\n      var id = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var indicatorName = ((_this$indicators$find = this.indicators.find(function (i) {\n        return parseInt(i.indicatorID) === id;\n      })) === null || _this$indicators$find === void 0 ? void 0 : _this$indicators$find.name) || \"\";\n      indicatorName = this.decodeAndStripHTML(indicatorName);\n      return this.truncateText(indicatorName);\n    },\n    /**\r\n     * @param {Object} condition \r\n     * @returns {string}\r\n     */\n    getOperatorText: function getOperatorText() {\n      var condition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parFormat = condition.parentFormat.toLowerCase();\n      var text = condition.selectedOp;\n      var op = condition.selectedOp;\n      switch (op) {\n        case '==':\n          text = this.multiOptionFormats.includes(parFormat) ? 'includes' : 'is';\n          break;\n        case '!=':\n          text = this.multiOptionFormats.includes(parFormat) ? 'does not include' : 'is not';\n          break;\n        case 'gt':\n        case 'gte':\n        case 'lt':\n        case 'lte':\n          var glText = op.includes('g') ? 'greater than' : 'less than';\n          var orEq = op.includes('e') ? ' or equal to' : '';\n          text = \"is \".concat(glText).concat(orEq);\n          break;\n        default:\n          break;\n      }\n      return text;\n    },\n    /**\r\n     * @param {object} condition\r\n     * @returns {boolean} is parent for a non-crosswalk outcome not in the list of selectable parents\r\n     */\n    isOrphan: function isOrphan() {\n      var condition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var indID = parseInt((condition === null || condition === void 0 ? void 0 : condition.parentIndID) || 0);\n      var outcome = condition.selectedOutcome.toLowerCase();\n      return outcome !== 'crosswalk' && !this.selectableParents.some(function (p) {\n        return parseInt(p.indicatorID) === indID;\n      });\n    },\n    /**\r\n     * @param {String} conditionType\r\n     * @returns {String}\r\n     */\n    listHeaderText: function listHeaderText() {\n      var conditionType = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var type = conditionType.toLowerCase();\n      var text = '';\n      switch (type) {\n        case 'show':\n          text = 'This field is shown IF:';\n          break;\n        case 'hide':\n          text = 'This field is hidden IF:';\n          break;\n        case 'prefill':\n          text = 'This field will be pre-filled IF:';\n          break;\n        case 'crosswalk':\n          text = 'This field has loaded dropdown(s)';\n          break;\n        default:\n          break;\n      }\n      return text;\n    },\n    /**\r\n     * @param {Object} condition\r\n     * @returns {boolean} whether the child or parent format does not match that of the condition\r\n     */\n    childFormatChangedSinceSave: function childFormatChangedSinceSave() {\n      var condition = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var savedChildFormat = ((condition === null || condition === void 0 ? void 0 : condition.childFormat) || '').toLowerCase().trim();\n      var savedParentFormat = ((condition === null || condition === void 0 ? void 0 : condition.parentFormat) || '').toLowerCase().trim();\n      var savedParIndID = parseInt((condition === null || condition === void 0 ? void 0 : condition.parentIndID) || 0);\n      var parentInd = this.selectableParents.find(function (p) {\n        return p.indicatorID === savedParIndID;\n      });\n      var parentIndFormat = (parentInd === null || parentInd === void 0 ? void 0 : parentInd.format) || '';\n      return savedChildFormat !== this.childFormat || savedParentFormat !== parentIndFormat;\n    },\n    /**\r\n     * called to create choicejs combobox instances for multi option formats\r\n     */\n    updateChoicesJS: function updateChoicesJS() {\n      var _this2 = this;\n      setTimeout(function () {\n        var _elSelectParent$choic;\n        var elExistingChoicesChild = document.querySelector('#child_choices_wrapper > div.choices');\n        var elSelectParent = document.getElementById('parent_compValue_entry_multi');\n        var elSelectChild = document.getElementById('child_prefill_entry_multi');\n        var outcome = _this2.conditions.selectedOutcome;\n        if (_this2.multiOptionFormats.includes(_this2.parentFormat) && elSelectParent !== null && !((elSelectParent === null || elSelectParent === void 0 || (_elSelectParent$choic = elSelectParent.choicesjs) === null || _elSelectParent$choic === void 0 ? void 0 : _elSelectParent$choic.initialised) === true)) {\n          var arrValues = _this2.conditions.selectedParentValue.split('\\n') || [];\n          arrValues = arrValues.map(function (v) {\n            return _this2.decodeAndStripHTML(v).trim();\n          });\n          var options = _this2.selectedParentValueOptions;\n          options = options.map(function (o) {\n            return {\n              value: o.trim(),\n              label: o.trim(),\n              selected: arrValues.includes(o.trim())\n            };\n          });\n          var choices = new Choices(elSelectParent, {\n            placeholderValue: 'Type here to search',\n            allowHTML: false,\n            removeItemButton: true,\n            editItems: true,\n            choices: options.filter(function (o) {\n              return o.value !== \"\";\n            })\n          });\n          elSelectParent.choicesjs = choices;\n          var elChoicesInput = document.querySelector('.child_prefill_entry_multi input.choices__input');\n          if (elChoicesInput !== null) {\n            elChoicesInput.setAttribute('aria-label', 'child prefill value choices');\n            elChoicesInput.setAttribute('role', 'searchbox');\n          }\n        }\n        if (outcome === 'pre-fill' && _this2.multiOptionFormats.includes(_this2.childFormat) && elSelectChild !== null && elExistingChoicesChild === null) {\n          var _arrValues = _this2.conditions.selectedChildValue.split('\\n') || [];\n          _arrValues = _arrValues.map(function (v) {\n            return _this2.decodeAndStripHTML(v).trim();\n          });\n          var _options = _this2.selectedChildValueOptions;\n          _options = _options.map(function (o) {\n            return {\n              value: o.trim(),\n              label: o.trim(),\n              selected: _arrValues.includes(o.trim())\n            };\n          });\n          var _choices = new Choices(elSelectChild, {\n            placeholderValue: 'Type here to search',\n            allowHTML: false,\n            removeItemButton: true,\n            editItems: true,\n            choices: _options.filter(function (o) {\n              return o.value !== \"\";\n            })\n          });\n          elSelectChild.choicesjs = _choices;\n          var _elChoicesInput = document.querySelector('.parent_compValue_entry_multi input.choices__input');\n          if (_elChoicesInput !== null) {\n            _elChoicesInput.setAttribute('aria-label', 'parent value choices');\n            _elChoicesInput.setAttribute('role', 'searchbox');\n          }\n        }\n      });\n    },\n    addOrgSelector: function addOrgSelector() {\n      var _this3 = this;\n      if (this.selectedOutcome === 'pre-fill' && this.orgchartFormats.includes(this.childFormat)) {\n        var selType = this.childFormat.slice(this.childFormat.indexOf('_') + 1);\n        setTimeout(function () {\n          _this3.initializeOrgSelector(selType, _this3.childIndID, 'ifthen_child_', _this3.selectedChildValue, _this3.setOrgSelChildValue);\n        });\n      }\n    },\n    setOrgSelChildValue: function setOrgSelChildValue() {\n      var orgSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (orgSelector.selection !== undefined) {\n        this.orgchartSelectData = orgSelector.selectionData[orgSelector.selection];\n        this.selectedChildValue = orgSelector.selection.toString();\n      }\n    },\n    onSave: function onSave() {\n      this.postConditions(true);\n    }\n  },\n  computed: {\n    formID: function formID() {\n      return this.focusedFormRecord.categoryID;\n    },\n    showSetup: function showSetup() {\n      return this.showConditionEditor && this.selectedOutcome && (this.selectedOutcome === 'crosswalk' || this.selectableParents.length > 0);\n    },\n    conditionOverviewText: function conditionOverviewText() {\n      var out = '';\n      if (this.selectedOutcome.toLowerCase() !== 'crosswalk') {\n        out = \"If \".concat(this.getIndicatorName(this.parentIndID), \" \").concat(this.getOperatorText(this.conditions), \" \").concat(this.decodeAndStripHTML(this.selectedParentValue), \"\\n                    then \").concat(this.selectedOutcome, \" this question.\");\n      } else {\n        out = \"Question options loaded from \".concat(this.conditions.crosswalkFile);\n      }\n      return out;\n    },\n    noOptions: function noOptions() {\n      return !['', 'crosswalk'].includes(this.selectedOutcome) && this.selectableParents.length < 1;\n    },\n    childIndID: function childIndID() {\n      return this.dialogData.indicatorID;\n    },\n    childIndicator: function childIndicator() {\n      var _this4 = this;\n      return this.indicators.find(function (i) {\n        return i.indicatorID === _this4.childIndID;\n      });\n    },\n    childHasSubquestions: function childHasSubquestions() {\n      return this.childIndicator.hasSubquestions;\n    },\n    /**\r\n     * @returns {object} current parent selection\r\n     */\n    selectedParentIndicator: function selectedParentIndicator() {\n      var _this5 = this;\n      var indicator = this.selectableParents.find(function (i) {\n        return i.indicatorID === parseInt(_this5.parentIndID);\n      });\n      return indicator === undefined ? {} : _objectSpread({}, indicator);\n    },\n    /**\r\n     * @returns {string} format of the parent question if there is one\r\n     */\n    parentFormat: function parentFormat() {\n      var _this$selectedParentI;\n      return ((_this$selectedParentI = this.selectedParentIndicator) === null || _this$selectedParentI === void 0 ? void 0 : _this$selectedParentI.format) || '';\n    },\n    /**\r\n     * @returns {string} format of the child question\r\n     */\n    childFormat: function childFormat() {\n      var _this$childIndicator;\n      return ((_this$childIndicator = this.childIndicator) === null || _this$childIndicator === void 0 ? void 0 : _this$childIndicator.format) || '';\n    },\n    /**\r\n     * @returns list of indicators that are on the same page, enabled as parents, and different than child \r\n     */\n    selectableParents: function selectableParents() {\n      var _this6 = this;\n      return this.indicators.filter(function (i) {\n        return i.formPage === _this6.childIndicator.formPage && i.indicatorID !== _this6.childIndID && _this6.enabledParentFormats[i.format] === 1;\n      });\n    },\n    /**\r\n     * @returns list of operators and human readable text base on parent format\r\n     */\n    selectedParentOperators: function selectedParentOperators() {\n      var operators = [];\n      switch (this.parentFormat) {\n        case 'multiselect':\n        case 'checkboxes':\n        case 'dropdown':\n        case 'radio':\n          operators = this.multiOptionFormats.includes(this.parentFormat) ? [{\n            val: \"==\",\n            text: \"includes\"\n          }, {\n            val: \"!=\",\n            text: \"does not include\"\n          }] : [{\n            val: \"==\",\n            text: \"is\"\n          }, {\n            val: \"!=\",\n            text: \"is not\"\n          }];\n          if (this.selectedParentValueOptions.some(function (opt) {\n            return Number.isFinite(+opt);\n          })) {\n            operators = operators.concat([{\n              val: \"gt\",\n              text: \"is greater than\"\n            }, {\n              val: \"gte\",\n              text: \"is greater or equal to\"\n            }, {\n              val: \"lt\",\n              text: \"is less than\"\n            }, {\n              val: \"lte\",\n              text: \"is less or equal to\"\n            }]);\n          }\n          break;\n        case 'number':\n        case 'currency':\n          operators = [{\n            val: \"gt\",\n            text: \"is greater than\"\n          }, {\n            val: \"gte\",\n            text: \"is greater or equal to\"\n          }, {\n            val: \"lt\",\n            text: \"is less than\"\n          }, {\n            val: \"lte\",\n            text: \"is less or equal to\"\n          }];\n          break;\n        default:\n          break;\n      }\n      return operators;\n    },\n    crosswalkLevelTwo: function crosswalkLevelTwo() {\n      var _this7 = this;\n      var formPage = this.childIndicator.formPage;\n      return this.indicators.filter(function (i) {\n        return i.formPage === formPage && i.indicatorID !== _this7.childIndID && ['dropdown', 'multiselect'].includes(i.format);\n      });\n    },\n    /**\r\n     * @returns list of options for comparison based on parent indicator selection\r\n     */\n    selectedParentValueOptions: function selectedParentValueOptions() {\n      var _this$selectedParentI2;\n      return ((_this$selectedParentI2 = this.selectedParentIndicator) === null || _this$selectedParentI2 === void 0 ? void 0 : _this$selectedParentI2.options) || [];\n    },\n    /**\r\n     * @returns list of options for prefill outcomes.  Does not combine with file loaded options.\r\n     */\n    selectedChildValueOptions: function selectedChildValueOptions() {\n      var _this$childIndicator2;\n      return ((_this$childIndicator2 = this.childIndicator) === null || _this$childIndicator2 === void 0 ? void 0 : _this$childIndicator2.options) || [];\n    },\n    canAddCrosswalk: function canAddCrosswalk() {\n      return this.childFormat === 'dropdown' || this.childFormat === 'multiselect';\n    },\n    childPrefillDisplay: function childPrefillDisplay() {\n      var _this$orgchartSelectD, _this$orgchartSelectD2, _this$orgchartSelectD3, _this$orgchartSelectD4;\n      var returnVal = '';\n      switch (this.childFormat) {\n        case 'orgchart_employee':\n          returnVal = \" '\".concat(((_this$orgchartSelectD = this.orgchartSelectData) === null || _this$orgchartSelectD === void 0 ? void 0 : _this$orgchartSelectD.firstName) || '', \" \").concat(((_this$orgchartSelectD2 = this.orgchartSelectData) === null || _this$orgchartSelectD2 === void 0 ? void 0 : _this$orgchartSelectD2.lastName) || '', \"'\");\n          break;\n        case 'orgchart_group':\n          returnVal = \" '\".concat(((_this$orgchartSelectD3 = this.orgchartSelectData) === null || _this$orgchartSelectD3 === void 0 ? void 0 : _this$orgchartSelectD3.groupTitle) || '', \"'\");\n          break;\n        case 'orgchart_position':\n          returnVal = \" '\".concat(((_this$orgchartSelectD4 = this.orgchartSelectData) === null || _this$orgchartSelectD4 === void 0 ? void 0 : _this$orgchartSelectD4.positionTitle) || '', \"'\");\n          break;\n        case 'multiselect':\n        case 'checkboxes':\n          var pluralTxt = this.selectedChildValue.split('\\n').length > 1 ? 's' : '';\n          returnVal = \"\".concat(pluralTxt, \" '\").concat(this.decodeAndStripHTML(this.selectedChildValue), \"'\");\n          break;\n        default:\n          returnVal = \" '\".concat(this.decodeAndStripHTML(this.selectedChildValue), \"'\");\n          break;\n      }\n      return returnVal;\n    },\n    childChoicesKey: function childChoicesKey() {\n      //key for choicesJS box for child prefill.  update on list selection, outcome change\n      return this.selectedConditionJSON + this.selectedOutcome;\n    },\n    parentChoicesKey: function parentChoicesKey() {\n      //key for choicesJS box for parent value selection.  update on list selection, parID change, op change\n      return this.selectedConditionJSON + String(this.parentIndID) + this.selectedOperator;\n    },\n    /**\r\n     * @returns {Object} current conditions object, properties to lower and tags removed as needed\r\n     */\n    conditions: function conditions() {\n      var _this$childIndicator3, _this$selectedParentI3;\n      return {\n        childIndID: parseInt(((_this$childIndicator3 = this.childIndicator) === null || _this$childIndicator3 === void 0 ? void 0 : _this$childIndicator3.indicatorID) || 0),\n        parentIndID: parseInt(((_this$selectedParentI3 = this.selectedParentIndicator) === null || _this$selectedParentI3 === void 0 ? void 0 : _this$selectedParentI3.indicatorID) || 0),\n        selectedOp: this.selectedOperator,\n        selectedParentValue: XSSHelpers.stripAllTags(this.selectedParentValue),\n        selectedChildValue: XSSHelpers.stripAllTags(this.selectedChildValue),\n        selectedOutcome: this.selectedOutcome.toLowerCase(),\n        crosswalkFile: this.crosswalkFile,\n        crosswalkHasHeader: this.crosswalkHasHeader,\n        level2IndID: this.level2IndID,\n        childFormat: this.childFormat,\n        parentFormat: this.parentFormat\n      };\n    },\n    /**\r\n     * @returns {boolean} if all required fields are entered for the current condition type\r\n     */\n    conditionComplete: function conditionComplete() {\n      var _this$conditions = this.conditions,\n        parentIndID = _this$conditions.parentIndID,\n        selectedOp = _this$conditions.selectedOp,\n        selectedParentValue = _this$conditions.selectedParentValue,\n        selectedChildValue = _this$conditions.selectedChildValue,\n        selectedOutcome = _this$conditions.selectedOutcome,\n        crosswalkFile = _this$conditions.crosswalkFile;\n      var returnValue = false;\n      if (!this.showRemoveModal) {\n        //don't bother w this logic if showing delete view\n        switch (selectedOutcome) {\n          case 'pre-fill':\n            returnValue = parentIndID !== 0 && selectedOp !== \"\" && selectedParentValue !== \"\" && selectedChildValue !== \"\";\n            break;\n          case 'hide':\n          case 'show':\n            returnValue = parentIndID !== 0 && selectedOp !== \"\" && selectedParentValue !== \"\";\n            break;\n          case 'crosswalk':\n            returnValue = crosswalkFile !== \"\";\n            break;\n          default:\n            break;\n        }\n      }\n      //btn is part of the LEAF modal\n      var elSave = document.getElementById('button_save');\n      if (elSave !== null) elSave.style.display = returnValue === true ? 'block' : 'none';\n      return returnValue;\n    },\n    /**\r\n     * @returns {Array} of conditions where conditions is a string rep of array.  Accounts for prior import issue\r\n     */\n    savedConditions: function savedConditions() {\n      return typeof this.childIndicator.conditions === 'string' && this.childIndicator.conditions[0] === '[' ? JSON.parse(this.childIndicator.conditions) : [];\n    },\n    /**\r\n     * @returns {Object} of conditions by type\r\n     */\n    conditionTypes: function conditionTypes() {\n      return {\n        show: this.savedConditions.filter(function (i) {\n          return i.selectedOutcome.toLowerCase() === \"show\";\n        }),\n        hide: this.savedConditions.filter(function (i) {\n          return i.selectedOutcome.toLowerCase() === \"hide\";\n        }),\n        prefill: this.savedConditions.filter(function (i) {\n          return i.selectedOutcome.toLowerCase() === \"pre-fill\";\n        }),\n        crosswalk: this.savedConditions.filter(function (i) {\n          return i.selectedOutcome.toLowerCase() === \"crosswalk\";\n        })\n      };\n    },\n    /* true if user has saved both display states, or if they choose a display state that conflicts with current state */hasDisplayConflict: function hasDisplayConflict() {\n      return this.conditionTypes.show.length > 0 && this.conditionTypes.hide.length > 0 || this.conditionTypes.show.length > 0 && this.selectedOutcome === 'hide' || this.conditionTypes.hide.length > 0 && this.selectedOutcome === 'show';\n    }\n  },\n  watch: {\n    showRemoveModal: function showRemoveModal(newVal) {\n      //if the remove condition part of the modal is being shown, hide the normal save / cancel area\n      var elSaveDiv = document.getElementById('leaf-vue-dialog-cancel-save');\n      if (elSaveDiv !== null) {\n        elSaveDiv.style.display = newVal === true ? 'none' : 'flex';\n        if (newVal === true) {\n          elSaveDiv.setAttribute('aria-hidden', true);\n        } else {\n          elSaveDiv.removeAttribute('aria-hidden');\n        }\n        this.ariaStatus = newVal === true ? 'Confirm Deletion' : '';\n      }\n    },\n    childChoicesKey: function childChoicesKey(newVal, oldVal) {\n      if (this.selectedOutcome.toLowerCase() == 'pre-fill' && this.multiOptionFormats.includes(this.childFormat)) {\n        this.updateChoicesJS();\n      }\n    },\n    parentChoicesKey: function parentChoicesKey(newVal, oldVal) {\n      if (this.multiOptionFormats.includes(this.parentFormat)) {\n        this.updateChoicesJS();\n      }\n    },\n    selectedOperator: function selectedOperator(newVal, oldVal) {\n      if (oldVal !== \"\" && this.numericOperators.includes(newVal) && !this.numericOperators.includes(oldVal)) {\n        this.selectedParentValue = \"\";\n      }\n    }\n  },\n  template: \"<div id=\\\"condition_editor_dialog_content\\\">\\n            <!-- LOADING SPINNER -->\\n            <div v-if=\\\"appIsLoadingIndicators\\\" class=\\\"page_loading\\\">\\n                Loading... <img src=\\\"../images/largespinner.gif\\\" alt=\\\"\\\" />\\n            </div>\\n            <div v-else id=\\\"condition_editor_inputs\\\">\\n                <!-- NOTE: DELETION DIALOG -->\\n                <div id=\\\"status_condition_entry\\\" role=\\\"status\\\" style=\\\"position: absolute; opacity:0\\\" aria-live=\\\"assertive\\\" :aria-label=\\\"ariaStatus\\\"></div>\\n                <div v-if=\\\"showRemoveModal\\\" id=\\\"ifthen_deletion_dialog\\\">\\n                    <div>Choose <b>Delete</b> to remove this condition, or <b>cancel</b> to return to the editor</div>\\n                    <div style=\\\"padding: 1rem 0;\\\"><b>{{ conditionOverviewText }}</b></div>\\n                    <div class=\\\"options\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn_remove_condition\\\"\\n                            @click=\\\"removeCondition({confirmDelete: true, condition: {}})\\\">\\n                            Delete\\n                        </button>\\n                        <button type=\\\"button\\\" class=\\\"btn-general\\\" @click=\\\"showRemoveModal=false\\\" @keydown.tab=\\\"lastModalTab\\\">\\n                            Cancel\\n                        </button>\\n                    </div>\\n                </div>\\n                <template v-else>\\n                    <!-- NOTE: LISTS BY CONDITION TYPE -->\\n                    <div v-if=\\\"savedConditions.length > 0\\\" id=\\\"savedConditionsLists\\\">\\n                        <div v-if=\\\"hasDisplayConflict\\\" class=\\\"entry_warning bg-yellow-5\\\" style=\\\"margin-bottom:1.5rem;\\\">\\n                            <span role=\\\"img\\\" alt=\\\"warning\\\">\\u26A0\\uFE0F</span> Having both 'hidden' and 'shown' can cause fields to display incorrectly.\\n                        </div>\\n                        <div v-if=\\\"childHasSubquestions\\\" class=\\\"entry_info bg-blue-5v\\\" style=\\\"margin-bottom:1.5rem;\\\">\\n                            <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\u2139\\uFE0F</span>Subquestions will also be hidden when this question is hidden.\\n                        </div>\\n                        <template v-for=\\\"typeVal, typeKey in conditionTypes\\\" :key=\\\"typeVal\\\">\\n                            <template v-if=\\\"typeVal.length > 0\\\">\\n                                <p><b>{{ listHeaderText(typeKey) }}</b></p>\\n                                <ul>\\n                                    <li v-for=\\\"c in typeVal\\\" :key=\\\"c\\\" class=\\\"savedConditionsCard\\\">\\n                                        <button type=\\\"button\\\" @click=\\\"selectConditionFromList(c)\\\" class=\\\"btnSavedConditions\\\" \\n                                            :class=\\\"{selectedConditionEdit: JSON.stringify(c) === selectedConditionJSON, isOrphan: isOrphan(c)}\\\">\\n                                            <template v-if=\\\"!isOrphan(c)\\\">\\n                                                <div v-if=\\\"c.selectedOutcome.toLowerCase() !== 'crosswalk'\\\">\\n                                                    '{{getIndicatorName(parseInt(c.parentIndID))}}' \\n                                                    {{getOperatorText(c)}} <strong>{{ decodeAndStripHTML(c.selectedParentValue) }}</strong>.\\n                                                </div>\\n                                                <div v-else>Options for this question will be loaded from <b>{{ c.crosswalkFile }}</b></div>\\n                                                <div v-if=\\\"childFormatChangedSinceSave(c)\\\" class=\\\"changesDetected\\\">\\n                                                    Format changes detected.  Please review and save to update this condition.\\n                                                </div>\\n                                            </template>\\n                                            <div v-else>This condition is inactive because indicator {{ c.parentIndID }} has been archived, deleted or is on another page.</div>\\n                                        </button>\\n                                        <button type=\\\"button\\\" class=\\\"btn_remove_condition\\\" aria-label=\\\"remove this condition\\\"\\n                                            @click=\\\"removeCondition({confirmDelete: false, condition: c})\\\">X\\n                                        </button>\\n                                    </li>\\n                                </ul>\\n                            </template>\\n                        </template>\\n                    </div>\\n                    <button type=\\\"button\\\" @click=\\\"newCondition\\\" class=\\\"btn-confirm new\\\" aria-label=\\\"New Condition\\\">+ New Condition</button>\\n                    <!-- NOTE: OUTCOME SELECTION and PREFILL AREAS -->\\n                    <div v-if=\\\"showConditionEditor\\\" id=\\\"outcome-editor\\\">\\n                        <!-- SELECT TYPE OF LOGIC -->\\n                        <label class=\\\"ifthen_label\\\" for=\\\"outcome_select\\\">Select an outcome</label>\\n                        <select title=\\\"select outcome\\\" id=\\\"outcome_select\\\" @change=\\\"updateSelectedOutcome($event.target.value)\\\">\\n                            <option v-if=\\\"conditions.selectedOutcome === ''\\\" value=\\\"\\\" selected>Select an outcome</option>\\n                            <option value=\\\"show\\\" :selected=\\\"conditions.selectedOutcome === 'show'\\\">Show this question ...</option>\\n                            <option value=\\\"hide\\\" :selected=\\\"conditions.selectedOutcome === 'hide'\\\">Hide this question ...</option>\\n                            <option v-if=\\\"canPrefillChild[childFormat] === 1\\\" \\n                                value=\\\"pre-fill\\\" :selected=\\\"conditions.selectedOutcome === 'pre-fill'\\\">Pre-fill this Question\\n                            </option>\\n                            <option v-if=\\\"canAddCrosswalk\\\"\\n                                value=\\\"crosswalk\\\" :selected=\\\"conditions.selectedOutcome === 'crosswalk'\\\">Load Dropdown or Crosswalk\\n                            </option>\\n                        </select>\\n                        <!-- PREFILL -->\\n                        <template v-if=\\\"!noOptions && conditions.selectedOutcome === 'pre-fill'\\\">\\n                            <label class=\\\"ifthen_label\\\" id=\\\"prefill_value_entry\\\">Enter a pre-fill value</label>\\n                            <select v-if=\\\"childFormat==='dropdown' || childFormat==='radio'\\\"\\n                                id=\\\"child_prefill_entry\\\" aria-labelledby=\\\"prefill_value_entry\\\"\\n                                @change=\\\"updateSelectedOptionValue($event.target, 'child')\\\">\\n                                <option v-if=\\\"conditions.selectedChildValue === ''\\\" value=\\\"\\\" selected>Select a value</option>\\n                                <option v-for=\\\"val in selectedChildValueOptions\\\" \\n                                    :value=\\\"val\\\"\\n                                    :key=\\\"'child_prefill_' + val\\\"\\n                                    :selected=\\\"decodeAndStripHTML(conditions.selectedChildValue) === val\\\">\\n                                    {{ val }} \\n                                </option>\\n                            </select>\\n                            <div v-else-if=\\\"multiOptionFormats.includes(childFormat)\\\"\\n                                id=\\\"child_choices_wrapper\\\" :key=\\\"'prefill_' + childChoicesKey\\\">\\n                                <select v-if=\\\"childFormat === 'multiselect' || childFormat === 'checkboxes'\\\"\\n                                    placeholder=\\\"select some options\\\"\\n                                    multiple=\\\"true\\\"\\n                                    id=\\\"child_prefill_entry_multi\\\" aria-labelledby=\\\"prefill_value_entry\\\"\\n                                    style=\\\"display: none;\\\"\\n                                    @change=\\\"updateSelectedOptionValue($event.target, 'child')\\\">\\n                                </select>\\n                            </div>\\n                            <input v-else-if=\\\"childFormat==='text' || childFormat==='textarea'\\\" \\n                                id=\\\"child_prefill_entry\\\" aria-labelledby=\\\"prefill_value_entry\\\"\\n                                @change=\\\"updateSelectedOptionValue($event.target, 'child')\\\"\\n                                :value=\\\"decodeAndStripHTML(conditions.selectedChildValue)\\\" />\\n                            <div v-if=\\\"orgchartFormats.includes(childFormat)\\\" :id=\\\"'ifthen_child_orgSel_' + conditions.childIndID\\\"\\n                                style=\\\"min-height:30px\\\" aria-labelledby=\\\"prefill_value_entry\\\">\\n                            </div>\\n                        </template>\\n                    </div>\\n                    <div v-if=\\\"showSetup\\\" id=\\\"if-then-setup\\\">\\n                        <!-- CONDITIONAL DISPLAY (HIDE or SHOW) -->\\n                        <template v-if=\\\"conditions.selectedOutcome !== 'crosswalk'\\\">\\n                            <div tabindex=\\\"0\\\" style=\\\"margin: 0;font-size:1.25rem\\\"><b>IF</b></div>\\n                            <!-- NOTE: PARENT CONTROLLER SELECTION -->\\n                            <select title=\\\"select controller question\\\" aria-label=\\\"select controller question\\\" id=\\\"controller_select\\\" @change=\\\"updateSelectedParentIndicator(parseInt($event.target.value))\\\">\\n                                <option v-if=\\\"!conditions.parentIndID\\\" :value=\\\"0\\\" selected>Select an Indicator</option>\\n                                <option v-for=\\\"i in selectableParents\\\" :key=\\\"'parent_' + i.indicatorID\\\"\\n                                :title=\\\"i.name\\\"\\n                                :value=\\\"i.indicatorID\\\"\\n                                :selected=\\\"parseInt(conditions.parentIndID)===parseInt(i.indicatorID)\\\" >\\n                                {{getIndicatorName(parseInt(i.indicatorID)) }} (indicator {{i.indicatorID}})\\n                                </option>\\n                            </select>\\n                            <!-- NOTE: OPERATOR SELECTION -->\\n                            <select v-model=\\\"selectedOperator\\\" id=\\\"operator_select\\\" title=\\\"select condition\\\" aria-label=\\\"select condition\\\">\\n                                <option v-if=\\\"selectedOperator === ''\\\" value=\\\"\\\" selected>Select a condition</option>\\n                                <option v-for=\\\"o in selectedParentOperators\\\" :key=\\\"o.val\\\" :value=\\\"o.val\\\" >\\n                                {{ o.text }}\\n                                </option>\\n                            </select>\\n                            <!-- NOTE: COMPARED VALUE SELECTIONS -->\\n                            <input v-if=\\\"numericOperators.includes(selectedOperator)\\\" id=\\\"numeric_comparison\\\" title=\\\"enter a numeric value\\\" aria-label=\\\"enter a numeric value\\\"\\n                                type=\\\"number\\\" :value=\\\"conditions.selectedParentValue\\\" class=\\\"comparison\\\" @change=\\\"updateSelectedOptionValue($event.target, 'parent')\\\"\\n                                placeholder=\\\"enter a number\\\" />\\n                            <select v-else-if=\\\"parentFormat === 'dropdown' || parentFormat==='radio'\\\"\\n                                id=\\\"parent_compValue_entry_single\\\" title=\\\"select a value\\\" aria-label=\\\"select a value\\\"\\n                                @change=\\\"updateSelectedOptionValue($event.target, 'parent')\\\">\\n                                <option v-if=\\\"conditions.selectedParentValue === ''\\\" value=\\\"\\\" selected>Select a value</option>\\n                                <option v-for=\\\"val in selectedParentValueOptions\\\"\\n                                    :key=\\\"'parent_val_' + val\\\" :value=\\\"val\\\"\\n                                    :selected=\\\"decodeAndStripHTML(conditions.selectedParentValue) === val\\\"> {{ val }}\\n                                </option>\\n                            </select>\\n                            <div v-else-if=\\\"parentFormat==='multiselect' || parentFormat==='checkboxes'\\\"\\n                                id=\\\"parent_choices_wrapper\\\" class=\\\"comparison\\\" :key=\\\"'comp_' + parentChoicesKey\\\">\\n                                <select id=\\\"parent_compValue_entry_multi\\\" title=\\\"select values\\\" aria-label=\\\"select values\\\"\\n                                    placeholder=\\\"select some options\\\" multiple=\\\"true\\\"\\n                                    style=\\\"display: none;\\\"\\n                                    @change=\\\"updateSelectedOptionValue($event.target, 'parent')\\\">\\n                                </select>\\n                            </div>\\n                        </template>\\n                        <!-- NOTE: LOADED DROPDOWNS AND CROSSWALKS -->\\n                        <div v-else class=\\\"crosswalks\\\">\\n                            <label for=\\\"select-crosswalk-file\\\">File&nbsp;\\n                                <select v-model=\\\"crosswalkFile\\\" id=\\\"select-crosswalk-file\\\" style=\\\"width: 200px;\\\">\\n                                    <option value=\\\"\\\">Select a file</option>\\n                                    <option v-for=\\\"f in fileManagerTextFiles\\\" :key=\\\"f\\\" :value=\\\"f\\\">{{f}}</option>\\n                                </select>\\n                            </label>\\n                            <label for=\\\"select-crosswalk-header\\\">Does file contain headers?&nbsp;\\n                                <select v-model=\\\"crosswalkHasHeader\\\" style=\\\"width:60px;\\\" id=\\\"select-crosswalk-header\\\">\\n                                    <option :value=\\\"false\\\">No</option>\\n                                    <option :value=\\\"true\\\">Yes</option>\\n                                </select>\\n                            </label>\\n                            <label for=\\\"select-level-two\\\">Controlled Dropdown&nbsp;\\n                                <select v-model.number=\\\"level2IndID\\\" id=\\\"select-level-two\\\" style=\\\"width: 200px;\\\">\\n                                    <option :value=\\\"null\\\">none (single dropdown)</option>\\n                                    <option v-for=\\\"indicator in crosswalkLevelTwo\\\"\\n                                        :key=\\\"'level2_' + indicator.indicatorID\\\"\\n                                        :value=\\\"parseInt(indicator.indicatorID)\\\">\\n                                        {{indicator.indicatorID}}: {{getIndicatorName(parseInt(indicator.indicatorID))}}\\n                                    </option>\\n                                </select>\\n                            </label>\\n                        </div>\\n                    </div>\\n                    <template v-if=\\\"conditionComplete\\\">\\n                        <div id=\\\"condition_preview\\\" v-if=\\\"conditions.selectedOutcome !== 'crosswalk'\\\" style=\\\"padding:0.5rem;border:2px solid #005EA2;border-radius:3px;\\\">\\n                            <b>IF</b> '{{getIndicatorName(parentIndID)}}' {{ selectedOperator }}\\n\\n                            <span style=\\\"margin:0;display:inline-block;font-size=1.25rem\\\"><b>THEN</b></span> '{{getIndicatorName(childIndID)}}'\\n                            <span v-if=\\\"conditions.selectedOutcome === 'pre-fill'\\\">will \\n                                <span style=\\\"color: #008010; font-weight: bold;\\\"> have the value{{childPrefillDisplay}}</span>\\n                            </span>\\n                            <span v-else>will \\n                                <span style=\\\"color: #008010; font-weight: bold;\\\">\\n                                be {{conditions.selectedOutcome === \\\"show\\\" ? 'shown' : 'hidden'}}\\n                                </span>\\n                            </span>\\n                        </div>\\n                        <div v-else id=\\\"condition_preview\\\">\\n                            <p>Selection options will be loaded from <b>{{ conditions.crosswalkFile }}</b></p>\\n                        </div>\\n                    </template>\\n                    <div v-if=\\\"noOptions\\\">No options are currently available for this selection</div>\\n                </template>\\n            </div>\\n        </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/ConditionsEditorDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/ConfirmDeleteDialog.js":
/*!**************************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/ConfirmDeleteDialog.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'confirm-delete-dialog',\n  inject: ['APIroot', 'CSRFToken', 'setDialogSaveFunction', 'decodeAndStripHTML', 'focusedFormRecord', 'getFormByCategoryID', 'removeCategory', 'closeFormDialog'],\n  created: function created() {\n    this.setDialogSaveFunction(this.onSave);\n  },\n  computed: {\n    /**\r\n     * uses LEAF XSSHelpers.js\r\n     * @returns {string} category name / description with potential tags stripped\r\n     */\n    formName: function formName() {\n      return XSSHelpers.stripAllTags(this.decodeAndStripHTML(this.focusedFormRecord.categoryName));\n    },\n    formDescription: function formDescription() {\n      return XSSHelpers.stripAllTags(this.decodeAndStripHTML(this.focusedFormRecord.categoryDescription));\n    },\n    currentStapleIDs: function currentStapleIDs() {\n      var _this$focusedFormReco;\n      return ((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.stapledFormIDs) || [];\n    }\n  },\n  methods: {\n    onSave: function onSave() {\n      var _this = this;\n      if (this.currentStapleIDs.length === 0) {\n        var delID = this.focusedFormRecord.categoryID;\n        var parID = this.focusedFormRecord.parentID;\n        $.ajax({\n          type: 'DELETE',\n          url: \"\".concat(this.APIroot, \"formStack/_\").concat(delID, \"?\") + $.param({\n            CSRFToken: this.CSRFToken\n          }),\n          success: function success(res) {\n            //+res will cover 1, '1', and true\n            if (+res === 1) {\n              _this.removeCategory(delID);\n              if (parID === '') {\n                //if a main form is deleted go to browser\n                _this.$router.push({\n                  name: 'browser'\n                });\n              } else {\n                //otherwise focus parent\n                _this.getFormByCategoryID(parID, true);\n              }\n              _this.closeFormDialog();\n            } else {\n              alert(res);\n            }\n          },\n          error: function error(err) {\n            return console.log('an error has occurred', err);\n          }\n        });\n      } else {\n        //prevents some issues, as deleting a form with staples attached makes the stapled forms ineligible for workflow assignment \n        alert('Please remove all stapled forms before deleting.');\n      }\n    }\n  },\n  template: \"<div>\\n        <div>Are you sure you want to delete this form?</div>\\n        <div style=\\\"margin: 1em 0;\\\"><b>{{formName}}</b></div>\\n        <div style=\\\"min-width:300px; max-width: 500px; min-height: 50px; margin-bottom: 1rem;\\\">{{formDescription}}</div>\\n        <div v-if=\\\"currentStapleIDs.length > 0\\\">\\u26A0\\uFE0F This form still has stapled forms attached</div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/ConfirmDeleteDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/EditCollaboratorsDialog.js":
/*!******************************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/EditCollaboratorsDialog.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'edit-collaborators-dialog',\n  data: function data() {\n    return {\n      formID: this.focusedFormRecord.categoryID,\n      group: '',\n      allGroups: [],\n      collaborators: [],\n      ariaStatus: ''\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'setDialogSaveFunction', 'categories', 'focusedFormRecord', 'closeFormDialog'],\n  created: function created() {\n    this.setDialogSaveFunction(this.onSave);\n  },\n  mounted: function mounted() {\n    var _this = this;\n    var loadCalls = [$.ajax({\n      type: 'GET',\n      url: \"\".concat(this.APIroot, \"system/groups\"),\n      success: function success(res) {\n        _this.allGroups = res;\n      },\n      error: function error(err) {\n        return console.log(err);\n      },\n      cache: false\n    }), $.ajax({\n      type: 'GET',\n      url: \"\".concat(this.APIroot, \"formEditor/_\").concat(this.formID, \"/privileges\"),\n      success: function success(res) {\n        _this.collaborators = res;\n      },\n      error: function error(err) {\n        return console.log(err);\n      },\n      cache: false\n    })];\n    Promise.all(loadCalls).then(function () {\n      var elSelect = document.getElementById('selectFormCollaborators');\n      if (elSelect !== null) elSelect.focus();\n    })[\"catch\"](function (err) {\n      return console.log('an error has occurred', err);\n    });\n  },\n  computed: {\n    availableGroups: function availableGroups() {\n      var collabGroupIDs = [];\n      this.collaborators.map(function (c) {\n        return collabGroupIDs.push(parseInt(c.groupID));\n      });\n      return this.allGroups.filter(function (g) {\n        return !collabGroupIDs.includes(parseInt(g.groupID));\n      });\n    }\n  },\n  methods: {\n    /**\r\n    * Remove form permissions for the group and update the collaborators array on success\r\n    * @param {number} groupID\r\n    * @param {string} groupName\r\n    */\n    removePermission: function removePermission() {\n      var _this2 = this;\n      var groupID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var groupName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/_\").concat(this.formID, \"/privileges\"),\n        data: {\n          CSRFToken: this.CSRFToken,\n          groupID: groupID,\n          read: 0,\n          write: 0\n        },\n        success: function success(res) {\n          _this2.collaborators = _this2.collaborators.filter(function (c) {\n            return parseInt(c.groupID) !== groupID;\n          });\n          _this2.ariaStatus = \"Removed \".concat(groupName, \" from collaborators\");\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      });\n    },\n    /**\r\n     * uses LEAF XSSHelpers\r\n     * @returns form name with tags stripped\r\n     */\n    formNameStripped: function formNameStripped() {\n      var formName = this.categories[this.formID].categoryName;\n      return XSSHelpers.stripAllTags(formName) || 'Untitled';\n    },\n    /**\r\n    * Purpose: Add Permissions to Form for currently selected groupID\r\n    */\n    onSave: function onSave() {\n      var _this3 = this;\n      if (this.group !== '') {\n        $.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/_\").concat(this.formID, \"/privileges\"),\n          data: {\n            CSRFToken: this.CSRFToken,\n            groupID: parseInt(this.group.groupID),\n            read: 1,\n            write: 1\n          },\n          success: function success(res) {\n            //returns null uwu\n            var group = _this3.collaborators.find(function (c) {\n              return parseInt(c.groupID) === parseInt(_this3.group.groupID);\n            });\n            if (group === undefined) {\n              _this3.ariaStatus = \"Added \".concat(_this3.group.name, \" to collaborators\");\n              _this3.collaborators.push({\n                groupID: _this3.group.groupID,\n                name: _this3.group.name\n              });\n              _this3.group = '';\n            }\n          },\n          error: function error(err) {\n            return console.log(err);\n          },\n          cache: false\n        });\n      }\n    }\n  },\n  template: \"<div>\\n        <h3>What is this?</h3>\\n        <p>With paper forms, people who have posession of the record have the ability to update it. This rule is used in LEAF, and people gain posession when a record reaches their step in the workflow. All modifications are timestamped with their respective authors.</p>\\n        <br />\\n        <p>To provide flexibility, specific groups can be granted permission to update information at any time in the workflow. This can be useful if you have internal-use fields, and want certain groups of people to update information at any time.</p>\\n        <br />\\n        <h3>The following groups can update {{formNameStripped()}} records at any time:</h3>\\n        <div id=\\\"formPrivs\\\" style=\\\"margin-top: 1rem;\\\">\\n            <div role=\\\"status\\\" style=\\\"position:absolute;opacity:0\\\" aria-live=\\\"assertive\\\" :aria-label=\\\"ariaStatus\\\"></div>\\n            <template v-if=\\\"collaborators.length > 0\\\">\\n                <ul style=\\\"display: list-item; list-style-type:disc; margin-left: 1rem; min-height: 30px;\\\">\\n                    <li v-for=\\\"c in collaborators\\\" :key=\\\"c.name + c.groupID\\\">\\n                        {{c.name}}\\n                        <button type=\\\"button\\\"\\n                            style=\\\"margin-left: 0.25em; background-color: transparent; color:#a00; padding: 0.1em 0.2em; border: 0; border-radius:3px;\\\" \\n                            @click=\\\"removePermission(parseInt(c.groupID), c.name)\\\" :aria-label=\\\"'remove ' + c.name\\\">\\n                            <b>[ Remove ]</b>\\n                        </button>\\n                    </li>\\n                </ul>\\n            </template>\\n            <template v-else>\\n                <ul style=\\\"list-style-type:none; padding: 0; min-height: 30px;\\\">\\n                    <li>\\n                        None\\n                    </li>\\n                </ul>\\n            </template>\\n        </div><hr/>\\n        <div style=\\\"min-height: 50px; margin: 1em 0;\\\">\\n            <template v-if=\\\"availableGroups.length > 0\\\">\\n                <label for=\\\"selectFormCollaborators\\\" style=\\\"display:block; margin-bottom:2px;\\\">Add groups:</label>\\n                <select v-model=\\\"group\\\" id=\\\"selectFormCollaborators\\\" style=\\\"width:100%;\\\">\\n                    <option value=\\\"\\\">Select a Group</option>\\n                    <option v-for=\\\"g in availableGroups\\\" :value=\\\"g\\\" :key=\\\"'collab_group_' + g.groupID\\\">{{g.name}}</option>\\n                </select>\\n            </template>\\n            <div v-else-if=\\\"collaborators.length == 0\\\">There are no available groups to add</div>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/EditCollaboratorsDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/IndicatorEditingDialog.js":
/*!*****************************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/IndicatorEditingDialog.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/* harmony import */ var _GridCell__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../GridCell */ \"./src/form_editor/components/GridCell.js\");\n/* harmony import */ var _IndicatorPrivileges__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../IndicatorPrivileges */ \"./src/form_editor/components/IndicatorPrivileges.js\");\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'indicator-editing-dialog',\n  data: function data() {\n    var _this$dialogData, _this$dialogData2, _this$dialogData3, _this$dialogData4, _this$dialogData5, _this$dialogData6, _this$dialogData7, _this$dialogData8, _this$dialogData9, _this$dialogData0, _this$dialogData1, _this$dialogData10, _this$dialogData11, _this$dialogData12, _this$dialogData13, _this$dialogData14;\n    return {\n      requiredDataProperties: ['indicator', 'indicatorID', 'parentID'],\n      initialFocusElID: 'name',\n      trumbowygTitleClassMap: {\n        \"Formatting\": \"trumbowyg-dropdown-formatting\",\n        \"Link\": \"trumbowyg-dropdown-link\",\n        \"Text color\": \"trumbowyg-dropdown-foreColor\"\n      },\n      showAdditionalOptions: false,\n      showDetailedFormatInfo: false,\n      formats: {\n        text: \"Single line text\",\n        textarea: \"Multi-line text\",\n        grid: \"Grid (Table with rows and columns)\",\n        number: \"Numeric\",\n        currency: \"Currency\",\n        date: \"Date\",\n        radio: \"Radio (single select, multiple options)\",\n        checkbox: \"Checkbox (A single checkbox)\",\n        checkboxes: \"Checkboxes (Multiple Checkboxes)\",\n        multiselect: \"Multi-Select Dropdown\",\n        dropdown: \"Dropdown Menu (single select, multiple options)\",\n        fileupload: \"File Attachment\",\n        image: \"Image Attachment\",\n        orgchart_group: \"Orgchart Group\",\n        orgchart_position: \"Orgchart Position\",\n        orgchart_employee: \"Orgchart Employee\",\n        raw_data: \"Raw Data (for programmers)\"\n      },\n      formatInfo: {\n        text: \"A single input for short text entries.\",\n        textarea: \"A large area for multiple lines of text and limited text formatting options.\",\n        grid: \"A table format with rows and columns.  Additional rows can be added, removed, or moved during data entry.\",\n        number: \"A single input used to store numeric data.  Useful for information that will be used for calculations.\",\n        currency: \"A single input used to store currency values in dollars to two decimal places.\",\n        date: \"Embeds a datepicker.\",\n        radio: \"Radio buttons allow a single selection from multiple options.  All of the question's options will display.\",\n        checkbox: \"A single checkbox is typically used for confirmation. The checkbox label text can be further customized.\",\n        checkboxes: \"Checkboxes will allow the selection of multiple options.  All of the question's options will display.\",\n        multiselect: \"Multi-Select format will allow the selection of several options from a selection box with a dropdown.  Only selected items will display.\",\n        dropdown: \"A dropdown menu will allow one selection from multiple options.  Only the selected option will display.\",\n        fileupload: \"File Attachment\",\n        image: \"Similar to file upload, but only image format files will be shown during selection\",\n        orgchart_group: \"Orgchart Group format is used to select a specific LEAF User Access Group\",\n        orgchart_position: \"Orgchart Position format is used to select a specific LEAF user by their position in the orgchart\",\n        orgchart_employee: \"Orgchart Employee format is used to select a specific LEAF user from the orgchart\",\n        raw_data: \"Raw Data is associated with Advanced Options, which can be used by programmers to run custom code during form data entry or review\"\n      },\n      listForParentIDs: [],\n      isLoadingParentIDs: true,\n      multianswerFormats: ['checkboxes', 'radio', 'multiselect', 'dropdown'],\n      ariaTextEditorStatus: '',\n      name: this.removeScriptTags(this.decodeHTMLEntities(((_this$dialogData = this.dialogData) === null || _this$dialogData === void 0 || (_this$dialogData = _this$dialogData.indicator) === null || _this$dialogData === void 0 ? void 0 : _this$dialogData.name) || '')),\n      options: ((_this$dialogData2 = this.dialogData) === null || _this$dialogData2 === void 0 || (_this$dialogData2 = _this$dialogData2.indicator) === null || _this$dialogData2 === void 0 ? void 0 : _this$dialogData2.options) || [],\n      //array of choices for radio, dropdown, etc.  1 ele w JSON for grids\n      format: ((_this$dialogData3 = this.dialogData) === null || _this$dialogData3 === void 0 || (_this$dialogData3 = _this$dialogData3.indicator) === null || _this$dialogData3 === void 0 ? void 0 : _this$dialogData3.format) || '',\n      //base format (eg 'radio')\n      description: ((_this$dialogData4 = this.dialogData) === null || _this$dialogData4 === void 0 || (_this$dialogData4 = _this$dialogData4.indicator) === null || _this$dialogData4 === void 0 ? void 0 : _this$dialogData4.description) || '',\n      defaultValue: this.decodeAndStripHTML(((_this$dialogData5 = this.dialogData) === null || _this$dialogData5 === void 0 || (_this$dialogData5 = _this$dialogData5.indicator) === null || _this$dialogData5 === void 0 ? void 0 : _this$dialogData5[\"default\"]) || ''),\n      required: parseInt((_this$dialogData6 = this.dialogData) === null || _this$dialogData6 === void 0 || (_this$dialogData6 = _this$dialogData6.indicator) === null || _this$dialogData6 === void 0 ? void 0 : _this$dialogData6.required) === 1 || false,\n      is_sensitive: parseInt((_this$dialogData7 = this.dialogData) === null || _this$dialogData7 === void 0 || (_this$dialogData7 = _this$dialogData7.indicator) === null || _this$dialogData7 === void 0 ? void 0 : _this$dialogData7.is_sensitive) === 1 || false,\n      parentID: ((_this$dialogData8 = this.dialogData) === null || _this$dialogData8 === void 0 ? void 0 : _this$dialogData8.parentID) || null,\n      //used here for new questions.  compared against undefined since it can be 0\n      sort: ((_this$dialogData9 = this.dialogData) === null || _this$dialogData9 === void 0 || (_this$dialogData9 = _this$dialogData9.indicator) === null || _this$dialogData9 === void 0 ? void 0 : _this$dialogData9.sort) !== undefined ? parseInt((_this$dialogData0 = this.dialogData) === null || _this$dialogData0 === void 0 ? void 0 : _this$dialogData0.indicator.sort) : null,\n      //checkboxes input\n      singleOptionValue: ((_this$dialogData1 = this.dialogData) === null || _this$dialogData1 === void 0 || (_this$dialogData1 = _this$dialogData1.indicator) === null || _this$dialogData1 === void 0 ? void 0 : _this$dialogData1.format) === 'checkbox' ? (_this$dialogData10 = this.dialogData) === null || _this$dialogData10 === void 0 ? void 0 : _this$dialogData10.indicator.options : '',\n      //list of options\n      multiOptionValue: ['checkboxes', 'radio', 'multiselect', 'dropdown'].includes((_this$dialogData11 = this.dialogData) === null || _this$dialogData11 === void 0 || (_this$dialogData11 = _this$dialogData11.indicator) === null || _this$dialogData11 === void 0 ? void 0 : _this$dialogData11.format) ? (((_this$dialogData12 = this.dialogData) === null || _this$dialogData12 === void 0 ? void 0 : _this$dialogData12.indicator.options) || []).join('\\n') : '',\n      //used for grid formats\n      gridJSON: ((_this$dialogData13 = this.dialogData) === null || _this$dialogData13 === void 0 || (_this$dialogData13 = _this$dialogData13.indicator) === null || _this$dialogData13 === void 0 ? void 0 : _this$dialogData13.format) === 'grid' ? JSON.parse((_this$dialogData14 = this.dialogData) === null || _this$dialogData14 === void 0 || (_this$dialogData14 = _this$dialogData14.indicator) === null || _this$dialogData14 === void 0 ? void 0 : _this$dialogData14.options[0]) : [],\n      archived: false,\n      deleted: false\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'dialogData', 'checkRequiredData', 'setDialogSaveFunction', 'advancedMode', 'hasDevConsoleAccess', 'initializeOrgSelector', 'closeFormDialog', 'showLastUpdate', 'focusedFormRecord', 'focusedFormTree', 'getFormByCategoryID', 'truncateText', 'decodeAndStripHTML', 'orgchartFormats'],\n  created: function created() {\n    this.setDialogSaveFunction(this.onSave);\n    this.checkRequiredData(this.requiredDataProperties);\n  },\n  provide: function provide() {\n    var _this = this;\n    return {\n      gridJSON: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.gridJSON;\n      }),\n      updateGridJSON: this.updateGridJSON\n    };\n  },\n  components: {\n    GridCell: _GridCell__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    IndicatorPrivileges: _IndicatorPrivileges__WEBPACK_IMPORTED_MODULE_2__[\"default\"]\n  },\n  mounted: function mounted() {\n    var _this2 = this;\n    if (this.isEditingModal === true) {\n      this.getFormParentIDs().then(function (res) {\n        _this2.listForParentIDs = res;\n        _this2.isLoadingParentIDs = false;\n      })[\"catch\"](function (err) {\n        return console.log('an error has occurred', err);\n      });\n    }\n    if (this.sort === null) {\n      this.sort = this.newQuestionSortValue;\n    }\n    if (this.containsRichText(this.name)) {\n      document.getElementById('advNameEditor').click();\n      document.querySelector('.trumbowyg-editor').focus();\n    } else {\n      document.getElementById(this.initialFocusElID).focus();\n    }\n    if (this.orgchartFormats.includes(this.format)) {\n      var selType = this.format.slice(this.format.indexOf('_') + 1);\n      this.initializeOrgSelector(selType, this.indicatorID, 'modal_', this.defaultValue, this.setOrgSelDefaultValue);\n      var elInput = document.querySelector(\"#modal_orgSel_\".concat(this.indicatorID, \" input\"));\n      if (elInput !== null) {\n        //needed to remove orgselector default value\n        elInput.addEventListener('change', function (event) {\n          if (event.target.value.trim() === '') {\n            _this2.defaultValue = '';\n          }\n        });\n      }\n    }\n  },\n  computed: {\n    isEditingModal: function isEditingModal() {\n      return +this.indicatorID > 0;\n    },\n    indicatorID: function indicatorID() {\n      var _this$dialogData15;\n      return ((_this$dialogData15 = this.dialogData) === null || _this$dialogData15 === void 0 ? void 0 : _this$dialogData15.indicatorID) || null;\n    },\n    formID: function formID() {\n      var _this$focusedFormReco;\n      return ((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.categoryID) || '';\n    },\n    nameLabelText: function nameLabelText() {\n      return this.parentID === null ? 'Section Heading' : 'Field Name';\n    },\n    showFormatSelect: function showFormatSelect() {\n      //not a header, or in advanced mode, or the format of the header is already a format other than none\n      return this.parentID !== null || this.advancedMode === true || this.format !== '' || hasDevConsoleAccess;\n    },\n    showDefaultTextarea: function showDefaultTextarea() {\n      return !['', 'raw_data', 'fileupload', 'image', 'grid', 'checkboxes', 'multiselect'].includes(this.format);\n    },\n    shortLabelTriggered: function shortLabelTriggered() {\n      return this.name.trim().split(' ').length > 2 || this.containsRichText(this.name) || hasDevConsoleAccess;\n    },\n    formatBtnText: function formatBtnText() {\n      return this.showDetailedFormatInfo ? \"Hide Details\" : \"What's this?\";\n    },\n    isMultiOptionQuestion: function isMultiOptionQuestion() {\n      return this.multianswerFormats.includes(this.format);\n    },\n    fullFormatForPost: function fullFormatForPost() {\n      var fullFormat = this.format;\n      switch (this.format.toLowerCase()) {\n        case 'grid':\n          this.updateGridJSON();\n          fullFormat = fullFormat + \"\\n\" + JSON.stringify(this.gridJSON);\n          break;\n        case 'radio':\n        case 'checkboxes':\n        case 'multiselect':\n        case 'dropdown':\n          fullFormat = fullFormat + \"\\n\" + this.formatIndicatorMultiAnswer();\n          break;\n        case 'checkbox':\n          fullFormat = fullFormat + \"\\n\" + this.singleOptionValue;\n          break;\n        default:\n          break;\n      }\n      return fullFormat;\n    },\n    shortlabelCharsRemaining: function shortlabelCharsRemaining() {\n      return 50 - this.description.length;\n    },\n    /**\r\n     * used to set the default sort value of a new question to last index in current depth\r\n     * @returns {number} \r\n     */\n    newQuestionSortValue: function newQuestionSortValue() {\n      var offset = 128;\n      var nonSectionSelector = \"#drop_area_parent_\".concat(this.parentID, \" > li\");\n      var sortVal = this.parentID === null ? this.focusedFormTree.length - offset :\n      //new form sections/pages\n      Array.from(document.querySelectorAll(nonSectionSelector)).length - offset; //new questions in existing sections\n      return sortVal;\n    }\n  },\n  methods: {\n    containsRichText: function containsRichText(txt) {\n      return XSSHelpers.containsTags(txt, ['<b>', '<i>', '<u>', '<ol>', '<li>', '<br>', '<p>', '<td>', '<h1>', '<h2>', '<h3>', '<h4>', '<a>', '<blockquote>']);\n    },\n    decodeHTMLEntities: function decodeHTMLEntities(txt) {\n      var tmp = document.createElement(\"textarea\");\n      tmp.innerHTML = txt;\n      return tmp.value;\n    },\n    removeScriptTags: function removeScriptTags(txt) {\n      var tmp = document.createElement('div');\n      tmp.innerHTML = txt;\n      var scripts = tmp.getElementsByTagName('script');\n      for (var i = 0; i < scripts.length; i++) {\n        var script = scripts[i];\n        script.remove();\n      }\n      return tmp.innerHTML;\n    },\n    setOrgSelDefaultValue: function setOrgSelDefaultValue() {\n      var orgSelector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (orgSelector.selection !== undefined) {\n        this.defaultValue = orgSelector.selection.toString();\n      }\n    },\n    toggleSelection: function toggleSelection(event) {\n      var dataPropertyName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'showDetailedFormatInfo';\n      if (typeof this[dataPropertyName] === 'boolean') {\n        this[dataPropertyName] = !this[dataPropertyName];\n      }\n    },\n    getFormParentIDs: function getFormParentIDs() {\n      var _this3 = this;\n      return new Promise(function (resolve, reject) {\n        $.ajax({\n          type: 'GET',\n          url: \"\".concat(_this3.APIroot, \"/form/_\").concat(_this3.formID, \"/flat\"),\n          success: function success(res) {\n            for (var i in res) {\n              res[i]['1'].name = XSSHelpers.stripAllTags(res[i]['1'].name);\n            }\n            resolve(res);\n          },\n          error: function error(err) {\n            return reject(err);\n          }\n        });\n      });\n    },\n    preventSelectionIfFormatNone: function preventSelectionIfFormatNone() {\n      if (this.format === '' && (this.required === true || this.is_sensitive === true)) {\n        this.required = false;\n        this.is_sensitive = false;\n        alert(\"You can't mark a field as sensitive or required if the Input Format is \\\"None\\\".\");\n      }\n    },\n    onSave: function onSave() {\n      var _this4 = this;\n      //check for advanced text formatting for name field\n      var elTrumbow = document.querySelector('.trumbowyg-editor');\n      if (elTrumbow !== undefined && elTrumbow !== null) {\n        this.name = elTrumbow.innerHTML;\n      }\n      var indicatorEditingUpdates = [];\n      if (this.isEditingModal) {\n        var _this$dialogData16, _this$dialogData17, _this$dialogData18, _this$dialogData19, _this$dialogData20, _this$dialogData21, _this$dialogData22, _this$dialogData23, _this$dialogData24;\n        /* CALLS FOR EDITTING AN EXISTING QUESTION */\n        var nameChanged = this.name !== ((_this$dialogData16 = this.dialogData) === null || _this$dialogData16 === void 0 ? void 0 : _this$dialogData16.indicator.name);\n        var descriptionChanged = this.description !== ((_this$dialogData17 = this.dialogData) === null || _this$dialogData17 === void 0 ? void 0 : _this$dialogData17.indicator.description);\n        var options = (_this$dialogData18 = this.dialogData) !== null && _this$dialogData18 !== void 0 && (_this$dialogData18 = _this$dialogData18.indicator) !== null && _this$dialogData18 !== void 0 && _this$dialogData18.options ? '\\n' + ((_this$dialogData19 = this.dialogData) === null || _this$dialogData19 === void 0 || (_this$dialogData19 = _this$dialogData19.indicator) === null || _this$dialogData19 === void 0 || (_this$dialogData19 = _this$dialogData19.options) === null || _this$dialogData19 === void 0 ? void 0 : _this$dialogData19.join('\\n')) : '';\n        var fullFormatChanged = this.fullFormatForPost !== ((_this$dialogData20 = this.dialogData) === null || _this$dialogData20 === void 0 ? void 0 : _this$dialogData20.indicator.format) + options;\n        var defaultChanged = this.decodeAndStripHTML(this.defaultValue) !== this.decodeAndStripHTML((_this$dialogData21 = this.dialogData) === null || _this$dialogData21 === void 0 ? void 0 : _this$dialogData21.indicator[\"default\"]);\n        var requiredChanged = +this.required !== parseInt((_this$dialogData22 = this.dialogData) === null || _this$dialogData22 === void 0 ? void 0 : _this$dialogData22.indicator.required);\n        var sensitiveChanged = +this.is_sensitive !== parseInt((_this$dialogData23 = this.dialogData) === null || _this$dialogData23 === void 0 ? void 0 : _this$dialogData23.indicator.is_sensitive);\n        var parentIDChanged = this.parentID !== ((_this$dialogData24 = this.dialogData) === null || _this$dialogData24 === void 0 ? void 0 : _this$dialogData24.indicator.parentID);\n        var shouldArchive = this.archived === true;\n        var shouldDelete = this.deleted === true;\n        //keeping for now for potential debugging\n        //console.log('CHANGES?: name,descr,fullFormat,default,required,sensitive,parentID,archive,delete');\n        //console.log(nameChanged,descriptionChanged,fullFormatChanged,defaultChanged,requiredChanged,sensitiveChanged,parentIDChanged,shouldArchive,shouldDelete);\n\n        if (nameChanged) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/name\"),\n            data: {\n              name: this.name,\n              CSRFToken: this.CSRFToken\n            },\n            error: function error(err) {\n              return console.log('ind name post err', err);\n            }\n          }));\n        }\n        if (descriptionChanged) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/description\"),\n            data: {\n              description: this.description,\n              CSRFToken: this.CSRFToken\n            },\n            error: function error(err) {\n              return console.log('ind desciption post err', err);\n            }\n          }));\n        }\n        if (fullFormatChanged) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/format\"),\n            data: {\n              format: this.fullFormatForPost,\n              CSRFToken: this.CSRFToken\n            },\n            success: function success(res) {\n              if (res === 'size limit exceeded') {\n                alert(\"The input format was not saved because it was too long.\\nIf you require extended length, please submit a YourIT ticket.\");\n              }\n            },\n            error: function error(err) {\n              return console.log('ind format post err', err);\n            }\n          }));\n        }\n        if (defaultChanged) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/default\"),\n            data: {\n              \"default\": this.defaultValue,\n              CSRFToken: this.CSRFToken\n            },\n            error: function error(err) {\n              return console.log('ind default value post err', err);\n            }\n          }));\n        }\n        if (requiredChanged) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/required\"),\n            data: {\n              required: this.required ? 1 : 0,\n              CSRFToken: this.CSRFToken\n            },\n            error: function error(err) {\n              return console.log('ind required post err', err);\n            }\n          }));\n        }\n        if (sensitiveChanged) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/sensitive\"),\n            data: {\n              is_sensitive: this.is_sensitive ? 1 : 0,\n              CSRFToken: this.CSRFToken\n            },\n            error: function error(err) {\n              return console.log('ind is_sensitive post err', err);\n            }\n          }));\n        }\n        if (sensitiveChanged && this.is_sensitive === true && +this.focusedFormRecord.needToKnow !== 1) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/formNeedToKnow\"),\n            data: {\n              needToKnow: 1,\n              categoryID: this.formID,\n              CSRFToken: this.CSRFToken\n            },\n            success: function success() {\n              var panelEl = document.querySelector('select#needToKnow');\n              if (panelEl !== null) {\n                panelEl.value = 1;\n                panelEl.dispatchEvent(new Event(\"change\"));\n              }\n            },\n            error: function error(err) {\n              return console.log('set form need to know post err', err);\n            }\n          }));\n        }\n        if (shouldArchive) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/disabled\"),\n            data: {\n              disabled: 1,\n              CSRFToken: this.CSRFToken\n            },\n            success: function success() {},\n            error: function error(err) {\n              return console.log('ind disabled (archive) post err', err);\n            }\n          }));\n        }\n        if (shouldDelete) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/disabled\"),\n            data: {\n              disabled: 2,\n              CSRFToken: this.CSRFToken\n            },\n            success: function success() {},\n            error: function error(err) {\n              return console.log('ind disabled (deletion) post err', err);\n            }\n          }));\n        }\n        if (parentIDChanged && this.parentID !== this.indicatorID) {\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/\").concat(this.indicatorID, \"/parentID\"),\n            data: {\n              parentID: this.parentID,\n              CSRFToken: this.CSRFToken\n            },\n            error: function error(err) {\n              return console.log('ind parentID post err', err);\n            }\n          }));\n        }\n      } else {\n        /* CALLS FOR CREATING A NEW QUESTION */\n        if (this.is_sensitive && +this.focusedFormRecord.needToKnow !== 1) {\n          //if the form is not already marked need to know, update this too\n          indicatorEditingUpdates.push($.ajax({\n            type: 'POST',\n            url: \"\".concat(this.APIroot, \"formEditor/formNeedToKnow\"),\n            data: {\n              needToKnow: 1,\n              categoryID: this.formID,\n              CSRFToken: this.CSRFToken\n            },\n            success: function success() {\n              var panelEl = document.querySelector('select#needToKnow');\n              if (panelEl !== null) {\n                panelEl.value = 1;\n                panelEl.dispatchEvent(new Event(\"change\"));\n              }\n            },\n            error: function error(err) {\n              return console.log('set form need to know post err', err);\n            }\n          }));\n        }\n        indicatorEditingUpdates.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/newIndicator\"),\n          data: {\n            name: this.name,\n            format: this.fullFormatForPost,\n            description: this.description,\n            \"default\": this.defaultValue,\n            parentID: this.parentID,\n            categoryID: this.formID,\n            required: this.required ? 1 : 0,\n            is_sensitive: this.is_sensitive ? 1 : 0,\n            sort: this.newQuestionSortValue,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success(res) {},\n          error: function error(err) {\n            return console.log('error posting new question', err);\n          }\n        }));\n      }\n      Promise.all(indicatorEditingUpdates).then(function (res) {\n        if (res.length > 0) {\n          _this4.getFormByCategoryID(_this4.formID);\n          _this4.showLastUpdate('form_properties_last_update');\n        }\n        _this4.closeFormDialog();\n      })[\"catch\"](function (err) {\n        return console.log('an error has occurred', err);\n      });\n    },\n    radioBehavior: function radioBehavior() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var targetId = event === null || event === void 0 ? void 0 : event.target.id;\n      if (targetId.toLowerCase() === 'archived' && this.deleted) {\n        document.getElementById('deleted').checked = false;\n        this.deleted = false;\n      }\n      if (targetId.toLowerCase() === 'deleted' && this.archived) {\n        document.getElementById('archived').checked = false;\n        this.archived = false;\n      }\n    },\n    appAddCell: function appAddCell() {\n      this.gridJSON.push({});\n    },\n    /**\r\n     * @param {string} dropDownOptions from the value of grid cell dropdown type textarea\r\n     * @returns {array} of unique options with commas rm and possible 'no' values updated to 'No'\r\n     */\n    formatGridDropdown: function formatGridDropdown() {\n      var dropDownOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var returnValue = [];\n      if (dropDownOptions !== null && dropDownOptions.length !== 0) {\n        var uniqueOptions = dropDownOptions.replaceAll(/,/g, \"\").split(\"\\n\");\n        uniqueOptions = uniqueOptions.map(function (option) {\n          return option.trim();\n        });\n        uniqueOptions = uniqueOptions.map(function (option) {\n          return option === 'no' ? 'No' : option;\n        });\n        returnValue = Array.from(new Set(uniqueOptions));\n      }\n      return returnValue;\n    },\n    updateGridJSON: function updateGridJSON() {\n      var _this5 = this;\n      var gridJSON = [];\n      var gridParent = document.getElementById('gridcell_col_parent');\n      var gridCells = Array.from(gridParent.querySelectorAll('div.cell'));\n      gridCells.forEach(function (cell) {\n        var _document$getElementB, _document$getElementB2;\n        var id = cell.id;\n        var type = (((_document$getElementB = document.getElementById('gridcell_type_' + id)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.value) || '').toLowerCase();\n        var properties = new Object();\n        properties.id = id;\n        properties.name = ((_document$getElementB2 = document.getElementById('gridcell_title_' + id)) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.value) || 'No Title';\n        properties.type = type;\n        if (type === 'dropdown') {\n          var elTextarea = document.getElementById('gridcell_options_' + id);\n          properties.options = _this5.formatGridDropdown(elTextarea.value || '');\n        }\n        if (type === 'dropdown_file') {\n          var _document$getElementB3, _document$getElementB4;\n          properties.file = ((_document$getElementB3 = document.getElementById('dropdown_file_select_' + id)) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.value) || '';\n          properties.hasHeader = Boolean(+((_document$getElementB4 = document.getElementById('dropdown_file_header_select_' + id)) === null || _document$getElementB4 === void 0 ? void 0 : _document$getElementB4.value));\n        }\n        gridJSON.push(properties);\n      });\n      this.gridJSON = gridJSON;\n    },\n    formatIndicatorMultiAnswer: function formatIndicatorMultiAnswer() {\n      var optionsToArray = this.multiOptionValue.split('\\n');\n      optionsToArray = optionsToArray.map(function (option) {\n        return option.trim();\n      });\n      optionsToArray = optionsToArray.map(function (option) {\n        return option === 'no' ? 'No' : option;\n      }); //this checks specifically for lower case no\n      var uniqueArray = Array.from(new Set(optionsToArray));\n      return uniqueArray.join('\\n');\n    },\n    //jQuery plugins for WYSWYG. from mod_form as is\n    advNameEditorClick: function advNameEditorClick() {\n      var _this6 = this;\n      $('#advNameEditor').css('display', 'none');\n      $('#rawNameEditor').css('display', 'block');\n      $('#name').trumbowyg({\n        resetCss: true,\n        btns: ['formatting', 'bold', 'italic', 'underline', '|', 'unorderedList', 'orderedList', '|', 'link', '|', 'foreColor', '|', 'justifyLeft', 'justifyCenter', 'justifyRight']\n      });\n      $('.trumbowyg-box').css({\n        'min-height': '130px',\n        'max-width': '700px',\n        'margin': '0.5rem 0'\n      });\n      $('.trumbowyg-editor, .trumbowyg-texteditor').css({\n        'min-height': '100px',\n        'max-width': '695px',\n        'min-width': '506px',\n        'height': '100px',\n        'padding': '1rem',\n        'resize': 'both'\n      });\n      var trumbowygBtns = Array.from(document.querySelectorAll('.trumbowyg-box button'));\n\n      /** handle keyboard events.  trumbow uses mousedown so dispatch that event for enter or spacebar */\n      var handleTrumbowEvents = function handleTrumbowEvents(event) {\n        var btn = event.currentTarget;\n        var isDropdown = btn.classList.contains('trumbowyg-open-dropdown');\n        var isActive = btn.classList.contains('trumbowyg-active');\n        if ((event === null || event === void 0 ? void 0 : event.which) === 13 || (event === null || event === void 0 ? void 0 : event.which) === 32) {\n          btn.dispatchEvent(new Event('mousedown'));\n          event.preventDefault();\n          if (isDropdown) {\n            btn.setAttribute('aria-expanded', !isActive);\n          }\n        }\n        if ((event === null || event === void 0 ? void 0 : event.which) === 9) {\n          //fix menu tabbing and tabbing order\n          var controllerBtn = document.querySelector(\"button[aria-controls=\\\"\".concat(btn.parentNode.id, \"\\\"]\"));\n          var btnWrapperSelector = isDropdown ? \"id_\".concat(_this6.trumbowygTitleClassMap[btn.title]) : \"\".concat(btn.parentNode.id);\n          if (btnWrapperSelector !== \"\") {\n            var firstSubmenuBtn = document.querySelector(\"#\".concat(btnWrapperSelector, \" button\"));\n            var lastSubmenuBtn = document.querySelector(\"#\".concat(btnWrapperSelector, \" button:last-child\"));\n            //if tabbing forward, mv to the first button in the submenu.  prev default to stop another tab\n            if (event.shiftKey === false && isDropdown && isActive && firstSubmenuBtn !== null) {\n              firstSubmenuBtn.focus();\n              event.preventDefault();\n            }\n            //end of submenu tab to next controller button and close the first one\n            if (event.shiftKey === false && btn === lastSubmenuBtn) {\n              var _controllerBtn$parent;\n              var nextController = (controllerBtn === null || controllerBtn === void 0 || (_controllerBtn$parent = controllerBtn.parentNode) === null || _controllerBtn$parent === void 0 ? void 0 : _controllerBtn$parent.nextSibling) || null;\n              if (nextController !== null) {\n                var nextBtn = nextController.querySelector('button');\n                if (nextBtn !== null) {\n                  nextBtn.focus();\n                  event.preventDefault();\n                  controllerBtn.dispatchEvent(new Event('mousedown'));\n                  controllerBtn.setAttribute('aria-expanded', false);\n                }\n              }\n            }\n            //if tabbing backwards out of a submenu, mv to the controller.\n            if (event.shiftKey === true && btn === firstSubmenuBtn && controllerBtn !== null) {\n              controllerBtn.focus();\n              event.preventDefault();\n            }\n          }\n        }\n        if (event.type === 'click' && isDropdown) {\n          //only updating it to whatever trumbow set it to\n          btn.setAttribute('aria-expanded', isActive);\n        }\n      };\n      //make buttons more accessible.  add navigable index and aria-controls.\n      trumbowygBtns.forEach(function (btn) {\n        btn.setAttribute('tabindex', '0');\n        ['keydown', 'click'].forEach(function (ev) {\n          return btn.addEventListener(ev, handleTrumbowEvents);\n        });\n        if (btn.classList.contains('trumbowyg-open-dropdown')) {\n          var _this6$trumbowygTitle;\n          btn.setAttribute('aria-expanded', false);\n          var controlClass = ((_this6$trumbowygTitle = _this6.trumbowygTitleClassMap) === null || _this6$trumbowygTitle === void 0 ? void 0 : _this6$trumbowygTitle[btn.title]) || null;\n          if (controlClass !== null) {\n            btn.setAttribute('aria-controls', 'id_' + controlClass);\n            var elSubmenu = document.querySelector('.' + controlClass);\n            if (elSubmenu !== null) {\n              elSubmenu.setAttribute('id', 'id_' + controlClass);\n            }\n          }\n        }\n      });\n      this.ariaTextEditorStatus = 'Using Advanced formatting.';\n      document.getElementById('rawNameEditor').focus();\n    },\n    rawNameEditorClick: function rawNameEditorClick() {\n      $('#advNameEditor').css('display', 'block');\n      $('#rawNameEditor').css('display', 'none');\n      $('#name').trumbowyg('destroy');\n      this.ariaTextEditorStatus = 'Showing formatted code.';\n      document.getElementById('advNameEditor').focus();\n    }\n  },\n  watch: {\n    format: function format(newVal, oldVal) {\n      var _this7 = this;\n      this.defaultValue = '';\n      if (this.orgchartFormats.includes(newVal)) {\n        var selType = newVal.slice(newVal.indexOf('_') + 1);\n        this.initializeOrgSelector(selType, this.indicatorID, 'modal_', '', this.setOrgSelDefaultValue);\n        var elInput = document.querySelector(\"#modal_orgSel_\".concat(this.indicatorID, \" input\"));\n        if (elInput !== null) {\n          //needed to remove default value\n          elInput.addEventListener('change', function (event) {\n            if (event.target.value.trim() === '') {\n              _this7.defaultValue = '';\n            }\n          });\n        }\n      }\n    }\n  },\n  template: \"<div id=\\\"indicator-editing-dialog-content\\\">\\n        <div>\\n            <div role=\\\"status\\\" aria-live=\\\"assertive\\\" :aria-label=\\\"ariaTextEditorStatus\\\" style=\\\"display:absolute;opacity:0;\\\"></div>\\n            <label for=\\\"name\\\">{{ nameLabelText }}</label>\\n            <textarea id=\\\"name\\\" v-model=\\\"name\\\" rows=\\\"4\\\">{{name}}</textarea>\\n            <button type=\\\"button\\\" class=\\\"btn-general\\\" id=\\\"rawNameEditor\\\"\\n                title=\\\"use basic text editor\\\"\\n                @click=\\\"rawNameEditorClick\\\" style=\\\"display: none; width:135px\\\">\\n                Show formatted code\\n            </button>\\n            <button type=\\\"button\\\" class=\\\"btn-general\\\" id=\\\"advNameEditor\\\"\\n                title=\\\"use advanced text editor\\\" style=\\\"width:135px\\\"\\n                @click=\\\"advNameEditorClick\\\">\\n                Advanced Formatting\\n            </button>\\n        </div>\\n        <div v-show=\\\"description !== '' || shortLabelTriggered\\\">\\n            <label for=\\\"description\\\" style=\\\"justify-content:space-between;\\\">Short label for spreadsheet headings\\n                <span :aria-label=\\\"'max length 50 characters, ' + shortlabelCharsRemaining + ' remaining'\\\">({{shortlabelCharsRemaining}})</span>\\n            </label>\\n            <input type=\\\"text\\\" id=\\\"description\\\" v-model=\\\"description\\\" maxlength=\\\"50\\\" />\\n        </div>\\n        <div>\\n            <div v-if=\\\"showFormatSelect\\\">\\n                <label for=\\\"indicatorType\\\">Input Format</label>\\n                <div style=\\\"display:flex;\\\">\\n                    <select id=\\\"indicatorType\\\" title=\\\"Select a Format\\\" v-model=\\\"format\\\" @change=\\\"preventSelectionIfFormatNone\\\">\\n                        <option value=\\\"\\\">None</option>\\n                        <option v-for=\\\"kv in Object.entries(formats)\\\" \\n                        :value=\\\"kv[0]\\\" :selected=\\\"kv[0] === format\\\" :key=\\\"kv[0]\\\">{{ kv[1] }}</option>\\n                    </select>\\n                    <button type=\\\"button\\\" id=\\\"editing-format-assist\\\" class=\\\"btn-general\\\" aria-controls=\\\"formatDetails\\\" :aria-expanded=\\\"showDetailedFormatInfo\\\"\\n                        @click=\\\"toggleSelection($event, 'showDetailedFormatInfo')\\\" aria-label=\\\"show information about the selected format\\\"\\n                        title=\\\"assistance with format choices\\\" style=\\\"align-self:stretch; margin-left: 3px;\\\">\\n                        {{ formatBtnText }}\\n                    </button>\\n                </div>\\n                <div v-show=\\\"showDetailedFormatInfo\\\" id=\\\"formatDetails\\\" style=\\\"max-width:500px; font-size: 0.9rem; margin-bottom: 1rem;\\\">\\n                    <p><b>Format Information</b></p>\\n                    {{ format !== '' ? formatInfo[format] : 'No format.  Indicators without a format are often used to provide additional information for the user.  They are often used for form section headers.' }}\\n                </div>\\n            </div>\\n            <div v-show=\\\"format === 'checkbox'\\\" id=\\\"container_indicatorSingleAnswer\\\" style=\\\"margin-top:0.5rem;\\\">\\n                <label for=\\\"indicatorSingleAnswer\\\">Text for checkbox</label>\\n                <input type=\\\"text\\\" id=\\\"indicatorSingleAnswer\\\" v-model=\\\"singleOptionValue\\\"/>\\n            </div>\\n            <div v-show=\\\"isMultiOptionQuestion\\\" id=\\\"container_indicatorMultiAnswer\\\" style=\\\"margin-top:0.5rem;\\\">\\n                <label for=\\\"indicatorMultiAnswer\\\">Options (One option per line)</label>\\n                <textarea id=\\\"indicatorMultiAnswer\\\" v-model=\\\"multiOptionValue\\\" style=\\\"height: 130px;\\\">\\n                </textarea>\\n            </div>\\n            <div v-if=\\\"format === 'grid'\\\" id=\\\"container_indicatorGrid\\\">\\n                <span id=\\\"tableStatus\\\" style=\\\"position: absolute; color: transparent\\\" \\n                    aria-atomic=\\\"true\\\" aria-live=\\\"polite\\\"  role=\\\"status\\\"></span>\\n                <br/>\\n                <div style=\\\"display:flex; align-items: center;\\\">\\n                    <button type=\\\"button\\\" class=\\\"btn-general\\\" id=\\\"addColumnBtn\\\" title=\\\"Add column\\\" \\n                        @click=\\\"appAddCell\\\">\\n                        + Add column\\n                    </button>&nbsp;Columns ({{gridJSON.length}}):\\n                </div>\\n                <div style=\\\"overflow-x: auto;\\\" id=\\\"gridcell_col_parent\\\">\\n                    <grid-cell v-if=\\\"gridJSON.length === 0\\\" :column=\\\"1\\\" :cell=\\\"new Object()\\\" key=\\\"initial_cell\\\"></grid-cell>\\n                    <grid-cell v-for=\\\"(c,i) in gridJSON\\\" :column=\\\"i+1\\\" :cell=\\\"c\\\" :key=\\\"c.id\\\"></grid-cell>\\n                </div>\\n            </div>\\n            <div v-show=\\\"showDefaultTextarea\\\" style=\\\"margin-top:0.75rem;\\\">\\n                <label for=\\\"defaultValue\\\">Default Answer</label>\\n                <div v-show=\\\"orgchartFormats.includes(format)\\\"\\n                    :id=\\\"'modal_orgSel_' + indicatorID\\\"\\n                    style=\\\"min-height:30px\\\" aria-labelledby=\\\"defaultValue\\\">\\n                </div>\\n                <textarea v-show=\\\"!orgchartFormats.includes(format)\\\" id=\\\"defaultValue\\\" v-model=\\\"defaultValue\\\"></textarea>\\n            </div>\\n        </div>\\n        <div v-show=\\\"!(!isEditingModal && format === '')\\\" id=\\\"indicator-editing-attributes\\\">\\n            <b>Attributes</b>\\n            <div class=\\\"attribute-row\\\">\\n                <template v-if=\\\"format !== ''\\\">\\n                    <label class=\\\"checkable leaf_check\\\" for=\\\"required\\\" style=\\\"margin-right: 1.5rem;\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"required\\\" v-model=\\\"required\\\" name=\\\"required\\\" class=\\\"icheck leaf_check\\\"  \\n                            @change=\\\"preventSelectionIfFormatNone\\\" />\\n                        <span class=\\\"leaf_check\\\"></span>Required\\n                    </label>\\n                    <label class=\\\"checkable leaf_check\\\" for=\\\"sensitive\\\" style=\\\"margin-right: 4rem;\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"sensitive\\\" v-model=\\\"is_sensitive\\\" name=\\\"sensitive\\\" class=\\\"icheck leaf_check\\\"  \\n                            @change=\\\"preventSelectionIfFormatNone\\\" />\\n                        <span class=\\\"leaf_check\\\"></span>Sensitive Data (PHI/PII)\\n                    </label>\\n                </template>\\n                <template v-if=\\\"isEditingModal\\\">\\n                    <label class=\\\"checkable leaf_check\\\" for=\\\"archived\\\" style=\\\"margin-right: 1.5rem;\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"archived\\\" name=\\\"disable_or_delete\\\" class=\\\"icheck leaf_check\\\"  \\n                            v-model=\\\"archived\\\" @change=\\\"radioBehavior\\\" />\\n                        <span class=\\\"leaf_check\\\"></span>Archive\\n                    </label>\\n                    <label class=\\\"checkable leaf_check\\\" for=\\\"deleted\\\">\\n                        <input type=\\\"checkbox\\\" id=\\\"deleted\\\" name=\\\"disable_or_delete\\\" class=\\\"icheck leaf_check\\\"  \\n                            v-model=\\\"deleted\\\" @change=\\\"radioBehavior\\\" />\\n                        <span class=\\\"leaf_check\\\"></span>Delete\\n                    </label>\\n                </template>\\n            </div>\\n            <button v-if=\\\"isEditingModal\\\" type=\\\"button\\\" aria-controls=\\\"indicator_advanced_attributes\\\" :aria-expanded=\\\"showAdditionalOptions\\\"\\n                class=\\\"btn-general\\\" \\n                aria-label=\\\"edit additional options\\\"\\n                @click=\\\"toggleSelection($event, 'showAdditionalOptions')\\\">\\n                {{showAdditionalOptions ? 'Hide' : 'Show'}} Advanced Attributes\\n            </button>\\n            <div id=\\\"indicator_advanced_attributes\\\" v-if=\\\"showAdditionalOptions\\\">\\n                <div class=\\\"attribute-row\\\" style=\\\"margin-top: 1rem; justify-content: space-between;\\\">\\n                    <template v-if=\\\"isLoadingParentIDs === false\\\">\\n                        <label for=\\\"container_parentID\\\" style=\\\"margin-right: 1rem;\\\">Parent Question ID\\n                            <select v-model.number=\\\"parentID\\\" id=\\\"container_parentID\\\" style=\\\"width:250px; margin-left:3px;\\\">\\n                                <option :value=\\\"null\\\" :selected=\\\"parentID === null\\\">None</option> \\n                                <template v-for=\\\"kv in Object.entries(listForParentIDs)\\\">\\n                                    <option v-if=\\\"indicatorID !== parseInt(kv[0])\\\" \\n                                        :value=\\\"kv[0]\\\" \\n                                        :key=\\\"'parent_'+kv[0]\\\">\\n                                        {{kv[0]}}: {{truncateText(kv[1]['1'].name), 50}}\\n                                    </option>\\n                                </template>\\n                            </select>\\n                        </label>\\n                    </template>\\n                </div>\\n                <indicator-privileges :indicatorID=\\\"indicatorID\\\"></indicator-privileges>\\n            </div>\\n            <span v-show=\\\"archived\\\" id=\\\"archived-warning\\\">\\n                This field will be archived. &nbsp;It can be<br/>re-enabled by using Restore Fields.\\n            </span>\\n            <span v-show=\\\"deleted\\\" id=\\\"deletion-warning\\\">\\n                Deleted items can only be re-enabled<br />within 30 days by using Restore Fields.\\n            </span>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/IndicatorEditingDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/NewFormDialog.js":
/*!********************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/NewFormDialog.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'new-form-dialog',\n  data: function data() {\n    return {\n      requiredDataProperties: ['parentID'],\n      categoryName: '',\n      categoryDescription: '',\n      newFormParentID: this.dialogData.parentID\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'decodeAndStripHTML', 'setDialogSaveFunction', 'dialogData', 'checkRequiredData', 'addNewCategory', 'closeFormDialog'],\n  created: function created() {\n    this.checkRequiredData(this.requiredDataProperties);\n    this.setDialogSaveFunction(this.onSave);\n  },\n  mounted: function mounted() {\n    document.getElementById('name').focus();\n  },\n  emits: ['get-form'],\n  computed: {\n    nameCharsRemaining: function nameCharsRemaining() {\n      return Math.max(50 - this.categoryName.length, 0);\n    },\n    descrCharsRemaining: function descrCharsRemaining() {\n      return Math.max(255 - this.categoryDescription.length, 0);\n    }\n  },\n  methods: {\n    onSave: function onSave() {\n      var _this = this;\n      var name = XSSHelpers.stripAllTags(this.categoryName);\n      var description = XSSHelpers.stripAllTags(this.categoryDescription);\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/new\"),\n        data: {\n          name: name,\n          description: description,\n          parentID: this.newFormParentID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success(res) {\n          var newCatID = res;\n          var temp = {};\n          //specified values\n          temp.categoryID = newCatID;\n          temp.categoryName = name;\n          temp.categoryDescription = description;\n          temp.parentID = _this.newFormParentID;\n          //default values\n          temp.workflowID = 0;\n          temp.needToKnow = 0;\n          temp.visible = -1;\n          temp.sort = 0;\n          temp.type = '';\n          temp.stapledFormIDs = [];\n          temp.destructionAge = null;\n          _this.addNewCategory(newCatID, temp);\n          if (_this.newFormParentID === '') {\n            //new main form\n            _this.$router.push({\n              name: 'category',\n              query: {\n                formID: newCatID\n              }\n            });\n          } else {\n            //new internal\n            _this.$emit('get-form', newCatID);\n          }\n          _this.closeFormDialog();\n        },\n        error: function error(err) {\n          console.log('error posting new form', err);\n        }\n      });\n    }\n  },\n  template: \"<div>\\n            <div style=\\\"display: flex; justify-content: space-between;\\\">\\n                <label for=\\\"name\\\">Form Name&nbsp;<span style=\\\"font-size:80%\\\">(up to 50 characters)</span></label>\\n                <div>{{nameCharsRemaining}}</div>\\n            </div>\\n            <input id=\\\"name\\\" type=\\\"text\\\" maxlength=\\\"50\\\" v-model=\\\"categoryName\\\" style=\\\"width: 100%;\\\" />\\n            <div style=\\\"display: flex; justify-content:space-between;margin-top: 1em;\\\">\\n                <label for=\\\"description\\\">Form Description&nbsp;<span style=\\\"font-size:80%\\\">(up to 255 characters)</span></label>\\n                <div>{{descrCharsRemaining}}</div>\\n            </div>\\n            <textarea id=\\\"description\\\" maxlength=\\\"255\\\" rows=\\\"5\\\" v-model=\\\"categoryDescription\\\" \\n                style=\\\"width: 100%; resize:none;\\\">\\n            </textarea>\\n        </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/NewFormDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/dialog_content/StapleFormDialog.js":
/*!***********************************************************************!*\
  !*** ./src/form_editor/components/dialog_content/StapleFormDialog.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'staple-form-dialog',\n  data: function data() {\n    var _this$dialogData;\n    return {\n      requiredDataProperties: ['mainFormID'],\n      mainFormID: ((_this$dialogData = this.dialogData) === null || _this$dialogData === void 0 ? void 0 : _this$dialogData.mainFormID) || '',\n      catIDtoStaple: '',\n      ariaStatus: ''\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'setDialogSaveFunction', 'truncateText', 'decodeAndStripHTML', 'categories', 'dialogData', 'checkRequiredData', 'closeFormDialog', 'updateStapledFormsInfo'],\n  created: function created() {\n    this.setDialogSaveFunction(this.onSave);\n    this.checkRequiredData(this.requiredDataProperties);\n  },\n  mounted: function mounted() {\n    if (this.isSubform) {\n      this.closeFormDialog();\n    }\n    if (this.mergeableForms.length > 0) {\n      var focusEl = document.getElementById('select-form-to-staple');\n      if (focusEl !== null) focusEl.focus();\n    } else {\n      var btnAdd = document.getElementById('button_save');\n      if (btnAdd !== null) {\n        btnAdd.style.display = 'none';\n      }\n    }\n  },\n  computed: {\n    isSubform: function isSubform() {\n      var _this$categories$this;\n      return ((_this$categories$this = this.categories[this.mainFormID]) === null || _this$categories$this === void 0 ? void 0 : _this$categories$this.parentID) !== '';\n    },\n    currentStapleIDs: function currentStapleIDs() {\n      var _this$categories$this2;\n      return ((_this$categories$this2 = this.categories[this.mainFormID]) === null || _this$categories$this2 === void 0 ? void 0 : _this$categories$this2.stapledFormIDs) || [];\n    },\n    mergeableForms: function mergeableForms() {\n      var _this = this;\n      var mergeable = [];\n      var _loop = function _loop() {\n        var WF_ID = parseInt(_this.categories[c].workflowID);\n        var catID = _this.categories[c].categoryID;\n        var parID = _this.categories[c].parentID;\n        var isNotAlreadyMerged = _this.currentStapleIDs.every(function (id) {\n          return id !== catID;\n        });\n        if (WF_ID === 0 && parID === '' && catID !== _this.mainFormID && isNotAlreadyMerged) {\n          mergeable.push(_objectSpread({}, _this.categories[c]));\n        }\n      };\n      for (var c in this.categories) {\n        _loop();\n      }\n      return mergeable;\n    }\n  },\n  methods: {\n    unmergeForm: function unmergeForm() {\n      var _this2 = this;\n      var stapledCatID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      $.ajax({\n        type: 'DELETE',\n        url: \"\".concat(this.APIroot, \"formEditor/_\").concat(this.mainFormID, \"/stapled/_\").concat(stapledCatID, \"?\") + $.param({\n          CSRFToken: this.CSRFToken\n        }),\n        success: function success() {\n          var _this2$categories$sta;\n          _this2.ariaStatus = \"Removed stapled form \".concat(((_this2$categories$sta = _this2.categories[stapledCatID]) === null || _this2$categories$sta === void 0 ? void 0 : _this2$categories$sta.categoryName) || '');\n          _this2.updateStapledFormsInfo(_this2.mainFormID, stapledCatID, true);\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      });\n    },\n    onSave: function onSave() {\n      var _this3 = this;\n      if (this.catIDtoStaple !== '') {\n        $.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/_\").concat(this.mainFormID, \"/stapled\"),\n          data: {\n            CSRFToken: this.CSRFToken,\n            stapledCategoryID: this.catIDtoStaple\n          },\n          success: function success(res) {\n            if (+res !== 1) {\n              alert(res);\n            } else {\n              var _this3$categories$_th;\n              _this3.ariaStatus = \"Added stapled form \".concat(((_this3$categories$_th = _this3.categories[_this3.catIDtoStaple]) === null || _this3$categories$_th === void 0 ? void 0 : _this3$categories$_th.categoryName) || '');\n              _this3.updateStapledFormsInfo(_this3.mainFormID, _this3.catIDtoStaple);\n              _this3.catIDtoStaple = '';\n            }\n          },\n          error: function error(err) {\n            return console.log(err);\n          },\n          cache: false\n        });\n      }\n    }\n  },\n  watch: {\n    mergeableForms: function mergeableForms(newVal, oldVal) {\n      var newLen = newVal.length;\n      var oldLen = oldVal.length;\n      if (newLen === 0 || oldLen === 0 && newLen > 0) {\n        var btnAdd = document.getElementById('button_save');\n        if (btnAdd !== null) {\n          btnAdd.style.display = newLen === 0 ? 'none' : 'flex';\n        }\n      }\n    }\n  },\n  template: \"<div>\\n        <div id=\\\"status_form_staple\\\" role=\\\"status\\\" aria-live=\\\"assertive\\\" :aria-label=\\\"ariaStatus\\\" style=\\\"opacity:0;position:absolute;\\\"></div>\\n        <p>Stapled forms will show up on the same page as the primary form.</p>\\n        <p>The order of the forms will be determined by the forms' assigned sort values.</p>\\n        <div id=\\\"mergedForms\\\" style=\\\"margin-top: 1rem;\\\">\\n            <ul style=\\\"list-style-type:none; padding: 0; min-height: 50px;\\\">\\n                <li v-for=\\\"id in currentStapleIDs\\\" :key=\\\"'staple_list_' + id\\\">\\n                    {{truncateText(decodeAndStripHTML(categories[id]?.categoryName || 'Untitled')) }}\\n                    <button type=\\\"button\\\"\\n                        style=\\\"margin-left: 0.25em; background-color: transparent; color:#a00; padding: 0.1em 0.2em; border: 0; border-radius:3px;\\\" \\n                        @click=\\\"unmergeForm(id)\\\"\\n                        :title=\\\"'remove ' + categories[id]?.categoryName || 'Untitled'\\\"\\n                        :aria-label=\\\"'remove ' + categories[id]?.categoryName || 'Untitled'\\\">\\n                        <b>[ Remove ]</b>\\n                    </button>\\n                </li>\\n            </ul>\\n        </div><hr/>\\n        <div style=\\\"min-height: 50px; margin: 1em 0;\\\">\\n            <template v-if=\\\"mergeableForms.length > 0\\\">\\n                <label for=\\\"select-form-to-staple\\\" style=\\\"padding-right: 0.3em;\\\">Select a form to merge</label>\\n                <select v-model=\\\"catIDtoStaple\\\" title=\\\"select a form to merge\\\" id=\\\"select-form-to-staple\\\" style=\\\"width:100%;\\\">\\n                    <option value=\\\"\\\">Select a Form</option>\\n                    <option v-for=\\\"f in mergeableForms\\\" \\n                        :value=\\\"f.categoryID\\\" \\n                        :key=\\\"'merge_'+f.categoryID\\\">{{truncateText(decodeAndStripHTML(f.categoryName)) || 'Untitled'}}</option>\\n                </select>\\n            </template>\\n            <div v-else>There are no available forms to merge</div>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/dialog_content/StapleFormDialog.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/EditPropertiesPanel.js":
/*!****************************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/EditPropertiesPanel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'edit-properties-panel',\n  data: function data() {\n    var _this$focusedFormReco, _this$focusedFormReco2, _this$focusedFormReco3, _this$focusedFormReco4, _this$focusedFormReco5, _this$focusedFormReco6, _this$focusedFormReco7, _this$focusedFormReco8, _this$focusedFormReco9, _this$focusedFormReco0;\n    return {\n      categoryName: this.decodeAndStripHTML(((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.categoryName) || 'Untitled'),\n      categoryDescription: this.decodeAndStripHTML(((_this$focusedFormReco2 = this.focusedFormRecord) === null || _this$focusedFormReco2 === void 0 ? void 0 : _this$focusedFormReco2.categoryDescription) || ''),\n      workflowID: parseInt((_this$focusedFormReco3 = this.focusedFormRecord) === null || _this$focusedFormReco3 === void 0 ? void 0 : _this$focusedFormReco3.workflowID) || 0,\n      needToKnow: parseInt((_this$focusedFormReco4 = this.focusedFormRecord) === null || _this$focusedFormReco4 === void 0 ? void 0 : _this$focusedFormReco4.needToKnow) || 0,\n      visible: parseInt((_this$focusedFormReco5 = this.focusedFormRecord) === null || _this$focusedFormReco5 === void 0 ? void 0 : _this$focusedFormReco5.visible) || 0,\n      type: ((_this$focusedFormReco6 = this.focusedFormRecord) === null || _this$focusedFormReco6 === void 0 ? void 0 : _this$focusedFormReco6.type) || '',\n      formID: ((_this$focusedFormReco7 = this.focusedFormRecord) === null || _this$focusedFormReco7 === void 0 ? void 0 : _this$focusedFormReco7.categoryID) || '',\n      formParentID: ((_this$focusedFormReco8 = this.focusedFormRecord) === null || _this$focusedFormReco8 === void 0 ? void 0 : _this$focusedFormReco8.parentID) || '',\n      destructionAgeYears: ((_this$focusedFormReco9 = this.focusedFormRecord) === null || _this$focusedFormReco9 === void 0 ? void 0 : _this$focusedFormReco9.destructionAge) > 0 ? ((_this$focusedFormReco0 = this.focusedFormRecord) === null || _this$focusedFormReco0 === void 0 ? void 0 : _this$focusedFormReco0.destructionAge) / 365 : null,\n      workflowsLoading: true,\n      workflowRecords: []\n    };\n  },\n  created: function created() {\n    this.getWorkflowRecords();\n  },\n  mounted: function mounted() {\n    if (this.focusedFormIsSensitive && +this.needToKnow === 0) {\n      this.updateNeedToKnow(true);\n    }\n  },\n  inject: ['APIroot', 'CSRFToken', 'appIsLoadingForm', 'allStapledFormCatIDs', 'focusedFormRecord', 'focusedFormIsSensitive', 'updateCategoriesProperty', 'openEditCollaboratorsDialog', 'openFormHistoryDialog', 'showLastUpdate', 'truncateText', 'decodeAndStripHTML'],\n  computed: {\n    loading: function loading() {\n      return this.appIsLoadingForm || this.workflowsLoading;\n    },\n    workflowDescription: function workflowDescription() {\n      var _this = this;\n      var returnValue = '';\n      if (this.workflowID !== 0) {\n        var currWorkflow = this.workflowRecords.find(function (rec) {\n          return parseInt(rec.workflowID) === _this.workflowID;\n        });\n        returnValue = (currWorkflow === null || currWorkflow === void 0 ? void 0 : currWorkflow.description) || '';\n      }\n      return returnValue;\n    },\n    isSubForm: function isSubForm() {\n      return this.focusedFormRecord.parentID !== '';\n    },\n    isStaple: function isStaple() {\n      var _this$allStapledFormC;\n      return ((_this$allStapledFormC = this.allStapledFormCatIDs) === null || _this$allStapledFormC === void 0 ? void 0 : _this$allStapledFormC[this.formID]) > 0;\n    },\n    isNeedToKnow: function isNeedToKnow() {\n      return parseInt(this.focusedFormRecord.needToKnow) === 1;\n    },\n    formNameCharsRemaining: function formNameCharsRemaining() {\n      return 50 - this.categoryName.length;\n    },\n    formDescrCharsRemaining: function formDescrCharsRemaining() {\n      return 255 - this.categoryDescription.length;\n    }\n  },\n  methods: {\n    /**\r\n     * @returns {array} of objects with all fields from the workflows table\r\n     */\n    getWorkflowRecords: function getWorkflowRecords() {\n      var _this2 = this;\n      $.ajax({\n        type: 'GET',\n        url: \"\".concat(this.APIroot, \"workflow\"),\n        success: function success(res) {\n          _this2.workflowRecords = res || [];\n          _this2.workflowsLoading = false;\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      });\n    },\n    updateName: function updateName() {\n      var _this3 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formName\"),\n        data: {\n          name: XSSHelpers.stripAllTags(this.categoryName),\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          //except for WF and desctuctionAge, these give back an empty array\n          _this3.updateCategoriesProperty(_this3.formID, 'categoryName', _this3.categoryName);\n          _this3.showLastUpdate('form_properties_last_update');\n        },\n        error: function error(err) {\n          return console.log('name post err', err);\n        }\n      });\n    },\n    updateDescription: function updateDescription() {\n      var _this4 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formDescription\"),\n        data: {\n          description: XSSHelpers.stripAllTags(this.categoryDescription),\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this4.updateCategoriesProperty(_this4.formID, 'categoryDescription', _this4.categoryDescription);\n          _this4.showLastUpdate('form_properties_last_update');\n        },\n        error: function error(err) {\n          return console.log('form description post err', err);\n        }\n      });\n    },\n    updateWorkflow: function updateWorkflow() {\n      var _this5 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formWorkflow\"),\n        data: {\n          workflowID: this.workflowID,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success(res) {\n          if (+res === 0) {\n            //1 on success\n            alert('The workflow could not be set because this form is stapled to another form');\n          } else {\n            _this5.updateCategoriesProperty(_this5.formID, 'workflowID', _this5.workflowID);\n            _this5.updateCategoriesProperty(_this5.formID, 'workflowDescription', _this5.workflowDescription);\n            _this5.showLastUpdate('form_properties_last_update');\n          }\n        },\n        error: function error(err) {\n          return console.log('workflow post err', err);\n        }\n      });\n    },\n    updateAvailability: function updateAvailability() {\n      var _this6 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formVisible\"),\n        data: {\n          visible: this.visible,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this6.updateCategoriesProperty(_this6.formID, 'visible', _this6.visible);\n          _this6.showLastUpdate('form_properties_last_update');\n        },\n        error: function error(err) {\n          return console.log('visibility post err', err);\n        }\n      });\n    },\n    updateNeedToKnow: function updateNeedToKnow() {\n      var _this7 = this;\n      var forceOn = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var newValue = forceOn === true ? 1 : this.needToKnow;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formNeedToKnow\"),\n        data: {\n          needToKnow: newValue,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this7.updateCategoriesProperty(_this7.formID, 'needToKnow', newValue);\n          _this7.needToKnow = newValue;\n          _this7.showLastUpdate('form_properties_last_update');\n        },\n        error: function error(err) {\n          return console.log('ntk post err', err);\n        }\n      });\n    },\n    updateType: function updateType() {\n      var _this8 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formType\"),\n        data: {\n          type: this.type,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this8.updateCategoriesProperty(_this8.formID, 'type', _this8.type);\n          _this8.showLastUpdate('form_properties_last_update');\n        },\n        error: function error(err) {\n          return console.log('type post err', err);\n        }\n      });\n    },\n    updateDestructionAge: function updateDestructionAge() {\n      var _this9 = this;\n      if (this.destructionAgeYears === null || this.destructionAgeYears >= 1 && this.destructionAgeYears <= 30) {\n        $.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/destructionAge\"),\n          data: {\n            destructionAge: this.destructionAgeYears,\n            categoryID: this.formID,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success(res) {\n            var _res$status;\n            if (+(res === null || res === void 0 || (_res$status = res.status) === null || _res$status === void 0 ? void 0 : _res$status.code) === 2 && +res.data === +_this9.destructionAgeYears * 365) {\n              //+null will become 0\n              var newVal = (res === null || res === void 0 ? void 0 : res.data) > 0 ? +res.data : null;\n              _this9.updateCategoriesProperty(_this9.formID, 'destructionAge', newVal);\n              _this9.showLastUpdate('form_properties_last_update');\n            }\n          },\n          error: function error(err) {\n            return console.log('destruction age post err', err);\n          }\n        });\n      }\n    }\n  },\n  template: \"<div id=\\\"edit-properties-panel\\\">\\n        <span class=\\\"form-id\\\">{{formID}}\\n            <span v-if=\\\"formParentID\\\">(internal for {{formParentID}})</span>\\n        </span>\\n        <div id=\\\"edit-properties-description\\\">\\n            <label for=\\\"categoryName\\\">Form name\\n                <span :aria-label=\\\"'max length 50 characters, ' + formNameCharsRemaining + ' remaining'\\\">({{formNameCharsRemaining}})</span>\\n            </label>\\n            <input id=\\\"categoryName\\\" type=\\\"text\\\" maxlength=\\\"50\\\" v-model=\\\"categoryName\\\" @change=\\\"updateName\\\"/>\\n            \\n            <label for=\\\"categoryDescription\\\">Form description\\n                <span :aria-label=\\\"'max length 255 characters, ' + formDescrCharsRemaining + ' remaining'\\\">({{formDescrCharsRemaining}})</span>\\n            </label>\\n            <textarea id=\\\"categoryDescription\\\" maxlength=\\\"255\\\" v-model=\\\"categoryDescription\\\" rows=\\\"3\\\" @change=\\\"updateDescription\\\"></textarea>\\n        </div>\\n        <div v-if=\\\"!loading\\\" id=\\\"edit-properties-other-properties\\\">\\n            <div style=\\\"display:flex; justify-content: space-between;\\\">\\n                <button type=\\\"button\\\" id=\\\"form_properties_last_update\\\" @click.prevent=\\\"openFormHistoryDialog(focusedFormRecord.categoryID)\\\"\\n                    style=\\\"display: none;\\\">\\n                </button>\\n            </div>\\n            <template v-if=\\\"!isSubForm\\\">\\n                <div class=\\\"panel-properties\\\">\\n                    <div id=\\\"workflow_info\\\" v-if=\\\"!isStaple && workflowRecords.length > 0\\\">\\n                        <label for=\\\"workflowID\\\">Workflow: \\n                            <select id=\\\"workflowID\\\" name=\\\"select-workflow\\\" @change=\\\"updateWorkflow\\\"\\n                                title=\\\"select workflow\\\"\\n                                v-model.number=\\\"workflowID\\\"\\n                                style=\\\"width:280px;\\\"\\n                                :style=\\\"{color: workflowID === 0 ? '#a00' : 'black'}\\\"\\n                                :disabled=\\\"isStaple\\\">\\n                                <option value=\\\"0\\\" :selected=\\\"workflowID === 0\\\">\\n                                    No Workflow.  Users cannot submit requests\\n                                </option>\\n                                <template v-for=\\\"r in workflowRecords\\\" :key=\\\"'workflow_' + r.workflowID\\\">\\n                                    <option v-if=\\\"parseInt(r.workflowID) > 0\\\"\\n                                        :value=\\\"r.workflowID\\\"\\n                                        :selected=\\\"workflowID === parseInt(r.workflowID)\\\">\\n                                        ID#{{r.workflowID}}: {{truncateText(decodeAndStripHTML(r.description),32)}}\\n                                    </option>\\n                                </template>\\n                            </select>\\n                        </label>\\n                        <a v-if=\\\"+focusedFormRecord.workflowID > 0\\\" id=\\\"view_workflow\\\" class=\\\"btn-general\\\" :href=\\\"'./?a=workflow&workflowID='+ focusedFormRecord.workflowID\\\" target=\\\"_blank\\\">\\n                            View Workflow\\n                        </a>\\n                    </div>\\n                    <div v-if=\\\"!workflowsLoading && workflowRecords.length === 0\\\" style=\\\"color: #a00; width: 100%; margin-bottom: 0.5rem;\\\">A workflow must be set up first</div>\\n\\n                    <label for=\\\"availability\\\" title=\\\"When hidden, users will not be able to select this form\\\">Status: \\n                        <select id=\\\"availability\\\" title=\\\"Select Availability\\\" v-model.number=\\\"visible\\\" @change=\\\"updateAvailability\\\">\\n                            <option value=\\\"1\\\" :selected=\\\"visible === 1\\\">Available</option>\\n                            <option value=\\\"0\\\" :selected=\\\"visible === 0\\\">Hidden</option>\\n                            <option value=\\\"-1\\\" :selected=\\\"visible === -1\\\">Unpublished</option>\\n                        </select>\\n                    </label>\\n                    <div v-if=\\\"focusedFormIsSensitive && isNeedToKnow\\\" style=\\\"display:flex; color: #a00;\\\">\\n                        <div style=\\\"display:flex; align-items: center;\\\"><b>Need to know: </b></div> &nbsp;\\n                        <div style=\\\"display:flex; align-items: center;\\\">Forced On because sensitive fields are present</div>\\n                    </div>\\n                    <label v-else for=\\\"needToKnow\\\"\\n                        title=\\\"When turned on, the people associated with the workflow are the only ones who have access to view the form. \\nForced on if the form contains sensitive information.\\\">Need to know: \\n                        <select id=\\\"needToKnow\\\" v-model.number=\\\"needToKnow\\\" :style=\\\"{color: isNeedToKnow ? '#a00' : 'black'}\\\" @change=\\\"updateNeedToKnow\\\">\\n                            <option value=\\\"0\\\" :selected=\\\"!isNeedToKnow\\\">Off</option>\\n                            <option value=\\\"1\\\" style=\\\"color: #a00;\\\" :selected=\\\"isNeedToKnow\\\">On</option>\\n                        </select>\\n                    </label>\\n                    <label for=\\\"formType\\\">Form Type: \\n                        <select id=\\\"formType\\\" title=\\\"Change type of form\\\" v-model=\\\"type\\\" @change=\\\"updateType\\\">\\n                            <option value=\\\"\\\" :selected=\\\"type === ''\\\">Standard</option>\\n                            <option value=\\\"parallel_processing\\\" :selected=\\\"type === 'parallel_processing'\\\">Parallel Processing</option>\\n                        </select>\\n                    </label>\\n                    <div v-if=\\\"false\\\" style=\\\"display:flex; align-items: center; column-gap: 1rem;\\\">\\n                        <label for=\\\"destructionAgeYears\\\" title=\\\"Resolved requests that have reached this expiration date will be destroyed\\\" >Record Destruction Age\\n                            <select id=\\\"destructionAgeYears\\\" v-model=\\\"destructionAgeYears\\\"\\n                                title=\\\"resolved request destruction age in years\\\" \\n                                @change=\\\"updateDestructionAge\\\">\\n                                <option :value=\\\"null\\\" :selected=\\\"destructionAgeYears===null\\\">never</option>\\n                                <option v-for=\\\"i in 30\\\" :value=\\\"i\\\">{{i}} year{{ i === 1 ? \\\"\\\" : \\\"s\\\"}}</option>\\n                            </select>\\n                        </label>\\n                    </div>\\n                </div>\\n            </template>\\n            <div v-else style=\\\"margin-top: auto;\\\">This is an Internal Form</div>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/EditPropertiesPanel.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormEditorMenu.js":
/*!***********************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormEditorMenu.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'form-editor-menu',\n  inject: ['APIroot', 'categories', 'focusedFormRecord', 'siteSettings', 'noForm', 'mainFormID', 'openFormHistoryDialog', 'openConfirmDeleteFormDialog', 'openEditCollaboratorsDialog'],\n  computed: {\n    /**\r\n     * @returns {array} of categories records that are internal forms of the main form\r\n     */\n    internalFormRecords: function internalFormRecords() {\n      var internalFormRecords = [];\n      for (var c in this.categories) {\n        if (this.categories[c].parentID === this.mainFormID && this.mainFormID !== '') {\n          internalFormRecords.push(_objectSpread({}, this.categories[c]));\n        }\n      }\n      return internalFormRecords;\n    }\n  },\n  methods: {\n    /**\r\n     * resolve main form, internal form, and workflow info, then export\r\n     */\n    exportForm: function exportForm() {\n      var _this = this;\n      var catID = this.mainFormID;\n      var packet = {};\n      packet.form = {};\n      packet.subforms = {};\n      var exportCalls = [];\n      exportCalls.push($.ajax({\n        type: 'GET',\n        url: \"\".concat(this.APIroot, \"form/_\").concat(catID, \"/export\"),\n        success: function success(res) {\n          packet.form = res;\n          packet.categoryID = catID;\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      }));\n      this.internalFormRecords.forEach(function (f) {\n        var subID = f.categoryID;\n        exportCalls.push($.ajax({\n          type: 'GET',\n          url: \"\".concat(_this.APIroot, \"form/_\").concat(subID, \"/export\"),\n          success: function success(res) {\n            packet.subforms[subID] = {};\n            packet.subforms[subID].name = f.categoryName;\n            packet.subforms[subID].description = f.categoryDescription;\n            packet.subforms[subID].packet = res;\n          },\n          error: function error(err) {\n            return console.log('an error has occurred', err);\n          }\n        }));\n      });\n      exportCalls.push($.ajax({\n        type: 'GET',\n        url: \"\".concat(this.APIroot, \"form/_\").concat(catID, \"/workflow\"),\n        success: function success(res) {\n          packet.workflowID = res[0].workflowID;\n        },\n        error: function error(err) {\n          return console.log('an error has occurred', err);\n        }\n      }));\n      Promise.all(exportCalls).then(function () {\n        var outPacket = {};\n        outPacket.version = 1;\n        outPacket.name = _this.categories[catID].categoryName + ' (Copy)';\n        outPacket.description = _this.categories[catID].categoryDescription;\n        outPacket.packet = packet;\n        var outBlob = new Blob([JSON.stringify(outPacket).replace(/[^ -~]/g, '')], {\n          type: 'text/plain'\n        }); // Regex replace needed to workaround IE11 encoding issue\n        saveAs(outBlob, 'LEAF_FormPacket_' + catID + '.txt'); //FileSaver.js method\n      })[\"catch\"](function (err) {\n        return console.log('an error has occurred', err);\n      });\n    }\n  },\n  template: \"<div><nav id=\\\"top-menu-nav\\\">\\n        <!-- FORM EDITOR VIEW MENU -->\\n        <ul>\\n            <template v-if=\\\"!noForm\\\">\\n                <li>\\n                    <button type=\\\"button\\\" @click=\\\"openFormHistoryDialog(this.focusedFormRecord.categoryID)\\\" title=\\\"view form history\\\" aria-label=\\\"view form history\\\">\\n                        <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDD57&nbsp;</span>View History\\n                    </button>\\n                </li>\\n                <li>\\n                    <button type=\\\"button\\\" @click=\\\"openEditCollaboratorsDialog\\\" title=\\\"Edit Special Write Access\\\" aria-label=\\\"Edit Special Write Access\\\">\\n                        <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDD12&nbsp;</span>Customize Write Access\\n                    </button>\\n                </li>\\n                <li>\\n                    <button type=\\\"button\\\" @click=\\\"exportForm\\\" title=\\\"export form\\\" aria-label=\\\"export form\\\">\\n                        <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDCBE&nbsp;</span>Export Form\\n                    </button>\\n                </li>\\n                <li>\\n                    <button type=\\\"button\\\" @click=\\\"openConfirmDeleteFormDialog\\\" title=\\\"delete this form\\\" aria-label=\\\"delete this form\\\">\\n                        <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\u274C&nbsp;</span>Delete this form\\n                    </button>\\n                </li>\\n            </template>\\n            <li>\\n                <router-link :to=\\\"{ name: 'restore' }\\\" class=\\\"router-link\\\" >\\n                    <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\u267B\\uFE0F&nbsp;</span>Restore Fields\\n                </router-link>\\n            </li>\\n        </ul>\\n    </nav>\\n    <div v-if=\\\"siteSettings?.siteType==='national_subordinate'\\\" id=\\\"subordinate_site_warning\\\" style=\\\"padding: 0.5rem; margin: 0.5rem 0;\\\" >\\n        <h3 style=\\\"margin: 0 0 0.5rem 0; color: #a00;\\\">This is a Nationally Standardized Subordinate Site</h3>\\n        <span><b>Do not make modifications!</b> &nbsp;Synchronization problems will occur. &nbsp;Please contact your process POC if modifications need to be made.</span>\\n    </div></div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormEditorMenu.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormIndexListing.js":
/*!*************************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormIndexListing.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _FormQuestionDisplay_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FormQuestionDisplay.js */ \"./src/form_editor/components/form_editor_view/FormQuestionDisplay.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'form-index-listing',\n  props: {\n    categoryID: String,\n    formPage: Number,\n    depth: Number,\n    indicatorID: Number,\n    formNode: Object,\n    index: Number,\n    currentListLength: Number,\n    parentID: Number\n  },\n  components: {\n    FormQuestionDisplay: _FormQuestionDisplay_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  },\n  inject: ['shortIndicatorNameStripped', 'clearListItem', 'addToListTracker', 'previewMode', 'setIndicatorFocus', 'clickToMoveListItem', 'focusedIndicatorID', 'startDrag', 'endDrag', 'handleOnDragCustomizations', 'onDragEnter', 'onDragLeave', 'onDrop', 'makePreviewKey', 'newQuestion'],\n  mounted: function mounted() {\n    //add to listTracker array to track indicatorID, parentID, sort and current index values\n    //only track in edit mode because preview mode includes staples in the primary form list\n    if (!this.previewMode) {\n      this.addToListTracker(this.formNode, this.parentID, this.index);\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.clearListItem(this.formNode.indicatorID);\n  },\n  computed: {\n    suffix: function suffix() {\n      return \"\".concat(this.formNode.indicatorID, \"_\").concat(this.formNode.series);\n    },\n    printResponseID: function printResponseID() {\n      return \"xhrIndicator_\".concat(this.suffix);\n    },\n    required: function required() {\n      return parseInt(this.formNode.required) === 1;\n    },\n    hasClickToMoveOptions: function hasClickToMoveOptions() {\n      return this.currentListLength > 1;\n    }\n  },\n  template: \"<li\\n            :title=\\\"'indicatorID: '+ indicatorID\\\" :class=\\\"depth === 0 ? 'section_heading' : 'subindicator_heading'\\\"\\n            @click.stop=\\\"setIndicatorFocus(indicatorID)\\\">\\n        <div class=\\\"printResponse\\\" :class=\\\"{'form-header': depth === 0, preview: previewMode}\\\" :id=\\\"printResponseID\\\">\\n\\n            <!-- VISIBLE DRAG INDICATOR (event is on li itself) / CLICK UP DOWN options -->\\n            <div v-show=\\\"!previewMode\\\" class=\\\"move_question_container\\\">\\n                <div :id=\\\"'index_listing_' + indicatorID + '_button'\\\"\\n                    :title=\\\"'drag to move indicatorID ' + indicatorID + '.'\\\"\\n                    class=\\\"drag_question_handle\\\">\\n                    <div role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\" class=\\\"icon_drag\\\" :title=\\\"'drag to move indicatorID ' + indicatorID + '.'\\\">\\u2237</div>\\n                </div>\\n                <div :id=\\\"'click_to_move_options_' + indicatorID\\\" class=\\\"click_to_move_options\\\"\\n                    :class=\\\"{click_buttons_visible: indicatorID === focusedIndicatorID && hasClickToMoveOptions}\\\">\\n                    <button type=\\\"button\\\"\\n                        :disabled=\\\"index === 0\\\"\\n                        :id=\\\"'click_to_move_up_' + indicatorID\\\" class=\\\"icon_move up\\\"\\n                        :title=\\\"'move indicatorID ' + indicatorID + ' up'\\\"\\n                        :aria-label=\\\"'move indicatorID ' + indicatorID + ' up'\\\"\\n                        @keyup.tab=\\\"setIndicatorFocus(indicatorID)\\\"\\n                        @click.stop=\\\"clickToMoveListItem($event, indicatorID, true)\\\">\\n                    </button>\\n                    <button type=\\\"button\\\"\\n                        :disabled=\\\"index === currentListLength - 1\\\"\\n                        :id=\\\"'click_to_move_down_' + indicatorID\\\" class=\\\"icon_move down\\\"\\n                        :title=\\\"'move indicatorID ' + indicatorID + ' down'\\\"\\n                        :aria-label=\\\"'move indicatorID ' + indicatorID + ' down'\\\"\\n                        @keyup.tab=\\\"setIndicatorFocus(indicatorID)\\\"\\n                        @click.stop=\\\"clickToMoveListItem($event, indicatorID, false)\\\">\\n                    </button>\\n                </div>\\n            </div>\\n\\n            <form-question-display\\n                :key=\\\"'editing_display_' + formNode.indicatorID + makePreviewKey(formNode)\\\"\\n                :categoryID=\\\"categoryID\\\"\\n                :depth=\\\"depth\\\"\\n                :formPage=\\\"formPage\\\"\\n                :index=\\\"index\\\"\\n                :currentListLength=\\\"currentListLength\\\"\\n                :formNode=\\\"formNode\\\">\\n            </form-question-display>\\n            \\n            <!-- NOTE: ul for drop zones always needs to be here in edit mode even if there are no current children -->\\n            <ul v-if=\\\"formNode.child !== null || !previewMode\\\"\\n                class=\\\"form-index-listing-ul\\\" :id=\\\"'drop_area_parent_'+ indicatorID\\\"\\n                :class=\\\"{empty_drop_area_ul: formNode.child === null}\\\"\\n                data-effect-allowed=\\\"move\\\"\\n                @drop.stop=\\\"onDrop($event)\\\"\\n                @dragover.prevent\\n                @dragenter.prevent=\\\"onDragEnter\\\"\\n                @dragleave=\\\"onDragLeave\\\">\\n\\n                <form-index-listing v-for=\\\"(listItem, idx) in formNode.child\\\"\\n                    :id=\\\"'index_listing_' + listItem.indicatorID\\\"\\n                    :categoryID=\\\"categoryID\\\"\\n                    :formPage=formPage\\n                    :depth=\\\"depth + 1\\\"\\n                    :parentID=\\\"indicatorID\\\"\\n                    :indicatorID=\\\"listItem.indicatorID\\\"\\n                    :formNode=\\\"listItem\\\"\\n                    :index=\\\"idx\\\"\\n                    :currentListLength=\\\"formNode.child.length\\\"\\n                    :key=\\\"'index_list_item_' + listItem.indicatorID\\\"\\n                    :draggable=\\\"!previewMode\\\"\\n                    @dragstart.stop=\\\"startDrag\\\"\\n                    @dragend.stop=\\\"endDrag\\\"\\n                    @drag.stop=\\\"handleOnDragCustomizations\\\">\\n                </form-index-listing>\\n            </ul>\\n            <div v-if=\\\"depth === 0 && !previewMode\\\" style=\\\"padding:0.5rem;\\\">\\n                <button type=\\\"button\\\" class=\\\"btn-general new_section_question\\\"\\n                    aria-label=\\\"Add Question to Section\\\"\\n                    @click=\\\"newQuestion(formNode.indicatorID)\\\">\\n                    + Add Question to Section\\n                </button>\\n            </div>\\n        </div>\\n    </li>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormIndexListing.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormQuestionDisplay.js":
/*!****************************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormQuestionDisplay.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _FormatPreview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FormatPreview */ \"./src/form_editor/components/form_editor_view/FormatPreview.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'form-question-display',\n  props: {\n    categoryID: String,\n    depth: Number,\n    formPage: Number,\n    index: Number,\n    currentListLength: Number,\n    formNode: Object\n  },\n  components: {\n    FormatPreview: _FormatPreview__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  },\n  inject: ['libsPath', 'newQuestion', 'shortIndicatorNameStripped', 'focusedFormID', 'focusedIndicatorID', 'editQuestion', 'hasDevConsoleAccess', 'editAdvancedOptions', 'openIfThenDialog', 'listTracker', 'previewMode', 'makePreviewKey'],\n  computed: {\n    indicatorID: function indicatorID() {\n      var _this$formNode;\n      return +((_this$formNode = this.formNode) === null || _this$formNode === void 0 ? void 0 : _this$formNode.indicatorID);\n    },\n    isHeader: function isHeader() {\n      return this.depth === 0;\n    },\n    hasCode: function hasCode() {\n      var _this$formNode2, _this$formNode3;\n      return (((_this$formNode2 = this.formNode) === null || _this$formNode2 === void 0 ? void 0 : _this$formNode2.html) || '').trim() !== '' || (((_this$formNode3 = this.formNode) === null || _this$formNode3 === void 0 ? void 0 : _this$formNode3.htmlPrint) || '').trim() !== '';\n    },\n    conditionalQuestion: function conditionalQuestion() {\n      return !this.isHeader && this.formNode.conditions !== null && this.formNode.conditions !== '' & this.formNode.conditions !== 'null';\n    },\n    conditionsAllowed: function conditionsAllowed() {\n      return !this.isHeader && (this.formNode.format || '').toLowerCase() !== 'raw_data';\n    },\n    indicatorName: function indicatorName() {\n      var _this$formNode4;\n      var page = this.depth === 0 ? \"<div class=\\\"form_page\\\">\".concat(this.formPage + 1, \"</div>\") : '';\n      var contentRequired = this.required ? \"<span class=\\\"required-sensitive\\\">*&nbsp;Required</span>\" : '';\n      var shortLabel = (((_this$formNode4 = this.formNode) === null || _this$formNode4 === void 0 ? void 0 : _this$formNode4.description) || '') !== '' && !this.previewMode ? \"<span style=\\\"font-weight:normal\\\"> (\".concat(this.formNode.description, \")</span>\") : '';\n      var staple = this.depth === 0 && this.formNode.categoryID !== this.focusedFormID ? \"<span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDCCC&nbsp;</span>\" : '';\n      var name = this.formNode.name.trim() !== '' ? '<span class=\"name\">' + this.formNode.name.trim() + '</span>' : '<span class=\"name\">[ blank ]</span>';\n      return \"\".concat(page).concat(staple).concat(name).concat(shortLabel).concat(contentRequired);\n    },\n    hasSpecialAccessRestrictions: function hasSpecialAccessRestrictions() {\n      return parseInt(this.formNode.isMaskable) === 1;\n    },\n    required: function required() {\n      return parseInt(this.formNode.required) === 1;\n    },\n    sensitive: function sensitive() {\n      return parseInt(this.formNode.is_sensitive) === 1;\n    }\n  },\n  template: \"<div class=\\\"form_editing_area\\\">\\n            <div class=\\\"name_and_toolbar\\\" :class=\\\"{'form-header': isHeader, preview: previewMode}\\\">\\n                <!-- TOOLBAR -->\\n                <div v-show=\\\"!previewMode\\\"\\n                    :id=\\\"'form_editing_toolbar_' + indicatorID\\\">\\n\\n                    <div style=\\\"display: grid; grid-template-columns: 1fr auto auto; grid-template-rows: repeat(2, 1fr)\\\">\\n                        <button type=\\\"button\\\"\\n                            :id=\\\"'edit_indicator_' + indicatorID\\\"\\n                            class=\\\"btn-general\\\"\\n                            :style=\\\"{ 'grid-area': depth === 0 ? '1' : '1 / 1 / 3 / 2', 'height': depth === 0 ? 'auto' : '100%' }\\\"\\n                            @click.exact=\\\"editQuestion(parseInt(indicatorID))\\\"\\n                            :title=\\\"'edit indicator ' + indicatorID\\\">\\n                            <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\u270F\\uFE0F&nbsp;</span> {{ depth === 0 ? 'Edit Header' : 'Edit' }}\\n                        </button>\\n                        <button v-if=\\\"hasDevConsoleAccess\\\" type=\\\"button\\\"\\n                            :id=\\\"'programmer_indicator_' + indicatorID\\\" class=\\\"btn-general\\\"\\n                            @click=\\\"editAdvancedOptions(parseInt(indicatorID))\\\">\\n                            Programmer\\n                        </button>\\n                        <button v-if=\\\"conditionsAllowed\\\" type=\\\"button\\\" :id=\\\"'edit_conditions_' + indicatorID\\\"\\n                            class=\\\"btn-general\\\"\\n                            @click=\\\"openIfThenDialog(parseInt(indicatorID), formNode.name.trim())\\\">\\n                            Modify Logic\\n                        </button>\\n                        <button v-if=\\\"!isHeader\\\" type=\\\"button\\\" class=\\\"btn-general\\\"\\n                            title=\\\"add sub-question\\\"\\n                            aria-label=\\\"add sub-question\\\"\\n                            @click=\\\"newQuestion(indicatorID)\\\">\\n                            + Sub-question\\n                        </button>\\n                        <div style=\\\"margin-left: auto; grid-area: 1 / 3 / 2 / 4\\\">\\n                            <span v-if=\\\"sensitive\\\">\\n                                <img :src=\\\"libsPath + 'dynicons/svg/eye_invisible.svg'\\\" style=\\\"width: 16px; vertical-align: middle; margin: 0 4px 2px 0\\\" alt=\\\"\\\" class=\\\"sensitive-icon\\\" title=\\\"This field is sensitive\\\" />\\n                            </span>\\n                            <span v-if=\\\"hasSpecialAccessRestrictions\\\" role=\\\"img\\\" alt=\\\"special access restrictions are present\\\" title=\\\"special access restrictions are present\\\" style=\\\"text-shadow: 0 0 1px black, 0 0 1px black; cursor: help\\\">\\uD83D\\uDD12</span>\\n                            <span v-if=\\\"conditionalQuestion\\\" role=\\\"img\\\" alt=\\\"conditional logic is present\\\" title=\\\"conditional logic is present\\\" style=\\\"text-shadow: 0 0 1px black, 0 0 1px black; cursor: help\\\">\\u26D3\\uFE0F</span>\\n                            <span v-if=\\\"hasCode\\\" role=\\\"img\\\" alt=\\\"advanced options are present\\\" title=\\\"advanced options are present\\\" style=\\\"text-shadow: 0 0 1px black, 0 0 1px black; cursor: help\\\">\\u2699\\uFE0F</span>\\n                        </div>\\n                    </div>\\n                </div>\\n                <!-- NAME -->\\n                <div v-html=\\\"indicatorName\\\"\\n                    class=\\\"indicator-name-preview\\\" :id=\\\"'format_label_' + indicatorID\\\">\\n                </div>\\n            </div>\\n\\n            <!-- FORMAT PREVIEW -->\\n            <format-preview :indicator=\\\"formNode\\\" :key=\\\"'FP_' + indicatorID\\\"></format-preview>\\n        </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormQuestionDisplay.js?\n}");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormatPreview.js":
/*!**********************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormatPreview.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'format-preview',\n  data: function data() {\n    return {\n      indID: this.indicator.indicatorID\n    };\n  },\n  props: {\n    indicator: Object\n  },\n  inject: ['libsPath', 'initializeOrgSelector', 'orgchartFormats', 'decodeAndStripHTML', 'updateChosenAttributes'],\n  computed: {\n    baseFormat: function baseFormat() {\n      var _this$indicator$forma;\n      return ((_this$indicator$forma = this.indicator.format) === null || _this$indicator$forma === void 0 || (_this$indicator$forma = _this$indicator$forma.toLowerCase()) === null || _this$indicator$forma === void 0 ? void 0 : _this$indicator$forma.trim()) || '';\n    },\n    truncatedOptions: function truncatedOptions() {\n      var _this$indicator$optio;\n      return ((_this$indicator$optio = this.indicator.options) === null || _this$indicator$optio === void 0 ? void 0 : _this$indicator$optio.slice(0, 6)) || [];\n    },\n    defaultValue: function defaultValue() {\n      var _this$indicator;\n      return ((_this$indicator = this.indicator) === null || _this$indicator === void 0 ? void 0 : _this$indicator[\"default\"]) || '';\n    },\n    strippedDefault: function strippedDefault() {\n      return this.decodeAndStripHTML(this.defaultValue || '');\n    },\n    inputElID: function inputElID() {\n      return \"input_preview_\".concat(this.indID);\n    },\n    selType: function selType() {\n      return this.baseFormat.slice(this.baseFormat.indexOf('_') + 1);\n    },\n    labelSelector: function labelSelector() {\n      return 'format_label_' + this.indID;\n    },\n    printResponseID: function printResponseID() {\n      return \"xhrIndicator_\".concat(this.indID, \"_\").concat(this.indicator.series);\n    },\n    gridOptions: function gridOptions() {\n      var _this$indicator2;\n      //NOTE: uses LEAF global XSSHelpers\n      var options = JSON.parse(((_this$indicator2 = this.indicator) === null || _this$indicator2 === void 0 ? void 0 : _this$indicator2.options) || '[]');\n      options.map(function (o) {\n        o.name = XSSHelpers.stripAllTags(o.name);\n        if (o !== null && o !== void 0 && o.options) {\n          o.options.map(function (ele) {\n            return ele = XSSHelpers.stripAllTags(ele);\n          });\n        }\n      });\n      return options;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this,\n      _document$getElementB,\n      _this$indicator3,\n      _document$getElementB2,\n      _document$querySelect,\n      _document$getElementB3;\n    switch (this.baseFormat) {\n      case 'raw_data':\n        break;\n      case 'date':\n        $(\"#\".concat(this.inputElID)).datepicker({\n          autoHide: true,\n          showAnim: \"slideDown\",\n          onSelect: function onSelect() {\n            $('#' + _this.indID + '_focusfix').focus();\n          }\n        });\n        (_document$getElementB = document.getElementById(this.inputElID)) === null || _document$getElementB === void 0 || _document$getElementB.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n      case 'dropdown':\n        $(\"#\".concat(this.inputElID)).chosen({\n          disable_search_threshold: 5,\n          allow_single_deselect: true,\n          width: '50%'\n        });\n        this.updateChosenAttributes(this.inputElID, this.labelSelector, \"Select Question Option\");\n        break;\n      case 'multiselect':\n        var elSelect = document.getElementById(this.inputElID);\n        if (elSelect !== null && elSelect.multiple === true && (elSelect === null || elSelect === void 0 ? void 0 : elSelect.getAttribute('data-choice')) !== 'active') {\n          var options = this.indicator.options || [];\n          options = options.map(function (o) {\n            return {\n              value: o,\n              label: o,\n              selected: _this.strippedDefault !== '' && _this.strippedDefault === o\n            };\n          });\n          var choices = new Choices(elSelect, {\n            placeholderValue: 'Type here to search',\n            allowHTML: false,\n            removeItemButton: true,\n            editItems: true,\n            choices: options.filter(function (o) {\n              return o.value !== \"\";\n            })\n          });\n          elSelect.choicesjs = choices;\n        }\n        var elChoicesInput = document.querySelector(\"#\".concat(this.inputElID, \" ~ input.choices__input\"));\n        if (elChoicesInput !== null) {\n          elChoicesInput.setAttribute('aria-labelledby', this.labelSelector);\n          elChoicesInput.setAttribute('role', 'searchbox');\n        }\n        break;\n      case 'orgchart_group':\n      case 'orgchart_position':\n      case 'orgchart_employee':\n        this.initializeOrgSelector(this.selType, this.indID, '', ((_this$indicator3 = this.indicator) === null || _this$indicator3 === void 0 ? void 0 : _this$indicator3[\"default\"]) || '');\n        break;\n      case 'checkbox':\n        (_document$getElementB2 = document.getElementById(this.inputElID + '_check0')) === null || _document$getElementB2 === void 0 || _document$getElementB2.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n      case 'checkboxes':\n      case 'radio':\n        (_document$querySelect = document.querySelector(\"#\".concat(this.printResponseID, \" .format-preview\"))) === null || _document$querySelect === void 0 || _document$querySelect.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n      default:\n        (_document$getElementB3 = document.getElementById(this.inputElID)) === null || _document$getElementB3 === void 0 || _document$getElementB3.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n    }\n  },\n  methods: {\n    useAdvancedEditor: function useAdvancedEditor() {\n      $('#' + this.inputElID).trumbowyg({\n        btns: ['bold', 'italic', 'underline', '|', 'unorderedList', 'orderedList', '|', 'justifyLeft', 'justifyCenter', 'justifyRight', 'fullscreen']\n      });\n      $(\"#textarea_format_button_\".concat(this.indID)).css('display', 'none');\n    }\n  },\n  template: \"<div class=\\\"format_preview\\\">\\n        <input v-if=\\\"baseFormat === 'text'\\\" :id=\\\"inputElID\\\" type=\\\"text\\\" :value=\\\"strippedDefault\\\" class=\\\"text_input_preview\\\"/>\\n        <input v-if=\\\"baseFormat === 'number'\\\" :id=\\\"inputElID\\\" type=\\\"number\\\" :value=\\\"strippedDefault\\\" class=\\\"text_input_preview\\\"/>\\n\\n        <template v-if=\\\"baseFormat === 'currency'\\\">\\n            $&nbsp;<input :id=\\\"inputElID\\\" type=\\\"number\\\" :value=\\\"strippedDefault\\\"\\n            min=\\\"0.00\\\" step=\\\"0.01\\\" class=\\\"text_input_preview\\\"/>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'raw_data'\\\">\\n            Custom Widget\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'textarea'\\\">\\n            <textarea :id=\\\"inputElID\\\" rows=\\\"6\\\" class=\\\"textarea_input_preview\\\" :value=\\\"strippedDefault\\\"></textarea>\\n            <div :id=\\\"'textarea_format_button_' + indicator.indicatorID\\\"\\n                @click=\\\"useAdvancedEditor\\\" \\n                style=\\\"text-align: right; font-size: 12px\\\"><span class=\\\"link\\\">formatting options</span>\\n            </div>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'radio'\\\">\\n            <template v-for=\\\"o, i in truncatedOptions\\\" :key=\\\"'radio_prev_' + indicator.indicatorID + '_' + i\\\">\\n                <label class=\\\"checkable leaf_check\\\" :for=\\\"inputElID + '_radio' + i\\\">\\n                    <input type=\\\"radio\\\" :id=\\\"inputElID + '_radio' + i\\\" \\n                    :name=\\\"indicator.indicatorID\\\" class=\\\"icheck leaf_check\\\"\\n                    :checked=\\\"strippedDefault !== '' && strippedDefault === o\\\" />\\n                    <span class=\\\"leaf_check\\\"></span>{{ o }}\\n                </label>\\n            </template>\\n            <div v-if=\\\"indicator?.options?.length > 5\\\" style=\\\"padding-left: 0.4em\\\"><b> ...</b></div>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'checkboxes' || baseFormat === 'checkbox'\\\">\\n            <template v-for=\\\"o, i in truncatedOptions\\\" :key=\\\"'check_prev_' + indicator.indicatorID + '_' + i\\\">\\n                <label class=\\\"checkable leaf_check\\\" :for=\\\"inputElID + '_check' + i\\\">\\n                    <input type=\\\"checkbox\\\" :id=\\\"inputElID + '_check' + i\\\" :name=\\\"indicator.indicatorID\\\" class=\\\"icheck leaf_check\\\"  :checked=\\\"strippedDefault !== '' && strippedDefault === o\\\" />\\n                    <span class=\\\"leaf_check\\\"></span>{{ o }}\\n                </label>\\n            </template>\\n            <div v-if=\\\"indicator?.options?.length > 5\\\" style=\\\"padding-left: 0.4em\\\"><b> ...</b></div>\\n        </template>\\n        \\n        <fieldset v-if=\\\"baseFormat === 'fileupload' || baseFormat === 'image'\\\" \\n            style=\\\"padding: 0.5em;\\\"><legend>File Attachment(s)</legend>\\n            <p style=\\\"margin-bottom: 0.5em;\\\">Select File to attach:</p>\\n            <input :id=\\\"inputElID\\\" name=\\\"formPacket\\\" type=\\\"file\\\" />\\n        </fieldset>\\n\\n        <template v-if=\\\"baseFormat === 'date'\\\">\\n            <input type=\\\"text\\\" :id=\\\"inputElID\\\"\\n            :style=\\\"'background: white url(' + libsPath + 'dynicons/svg/office-calendar.svg) no-repeat 4px center; background-size: 16px;'\\\"\\n            style=\\\"padding-left: 24px; font-size: 1.3em; font-family: monospace;\\\" :value=\\\"indicator.default\\\" />\\n        </template>\\n\\n        <select v-if=\\\"baseFormat === 'dropdown'\\\" :id=\\\"inputElID\\\" style=\\\"width: 50%\\\" :value=\\\"strippedDefault\\\">\\n            <option v-for=\\\"o, i in truncatedOptions\\\" :key=\\\"'drop_prev_' + indicator.indicatorID + '_' + i\\\">\\n            {{o}}\\n            </option>\\n            <option v-if=\\\"indicator?.options?.length > 5\\\" style=\\\"padding-left: 0.4em\\\" disabled>(preview showing first 5)</option>\\n        </select>\\n        \\n        <select v-if=\\\"baseFormat === 'multiselect'\\\" multiple \\n            :id=\\\"inputElID\\\">\\n            :name=\\\"'multi_prev_' + indicator.indicatorID + '_multiselect[]'\\\"\\n            style=\\\"display:none\\\">\\n        </select>\\n        \\n        <template v-if=\\\"orgchartFormats.includes(baseFormat)\\\">\\n            <div :id=\\\"'orgSel_' + indicator.indicatorID\\\" style=\\\"min-height:30px\\\"></div>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'grid'\\\">\\n            <div class=\\\"tableinput\\\">\\n                <table class=\\\"table\\\" :id=\\\"'grid_' + indicator.indicatorID + '_' + indicator.series + '_input'\\\"\\n                    style=\\\"word-wrap: break-word; table-layout: fixed; height: 100%; display: table\\\">\\n\\n                    <thead :id=\\\"'gridTableHead_' + indicator.indicatorID\\\">\\n                        <tr>\\n                            <td v-for=\\\"o in gridOptions\\\" :key=\\\"'grid_head_' + o.id\\\">{{ o.name }}</td>\\n                        </tr>\\n                    </thead>\\n                    <tbody :id=\\\"'gridTableBody_' + indicator.indicatorID\\\">\\n                        <tr>\\n                            <td v-for=\\\"o in gridOptions\\\" style=\\\"min-width: 150px;\\\" :key=\\\"'grid_body_' + o.id\\\">\\n                                <input v-if=\\\"o.type === 'text'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\" />\\n                                <textarea v-if=\\\"o.type === 'textarea'\\\" rows=\\\"3\\\" style=\\\"resize:none; width: 100%;\\\" :aria-label=\\\"o.name\\\"></textarea>\\n                                <input type=\\\"date\\\" v-if=\\\"o.type === 'date'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\" />\\n                                <select v-if=\\\"o.type === 'dropdown'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\">\\n                                    <option v-for=\\\"option in o.options\\\" :key=\\\"'grid_drop_' + option\\\">{{option}}</option>\\n                                </select>\\n                                <select v-if=\\\"o.type === 'dropdown_file'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\">\\n                                    <option value=\\\"\\\">Dropdown from File</option>\\n                                </select>\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </template>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormatPreview.js?\n}");

/***/ }),

/***/ "./src/form_editor/views/FormEditorView.js":
/*!*************************************************!*\
  !*** ./src/form_editor/views/FormEditorView.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/* harmony import */ var _common_components_LeafFormDialog_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/common/components/LeafFormDialog.js */ \"./src/common/components/LeafFormDialog.js\");\n/* harmony import */ var _common_components_HistoryDialog_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/common/components/HistoryDialog.js */ \"./src/common/components/HistoryDialog.js\");\n/* harmony import */ var _components_dialog_content_IndicatorEditingDialog_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/dialog_content/IndicatorEditingDialog.js */ \"./src/form_editor/components/dialog_content/IndicatorEditingDialog.js\");\n/* harmony import */ var _components_dialog_content_AdvancedOptionsDialog_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/dialog_content/AdvancedOptionsDialog.js */ \"./src/form_editor/components/dialog_content/AdvancedOptionsDialog.js\");\n/* harmony import */ var _components_dialog_content_NewFormDialog_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../components/dialog_content/NewFormDialog.js */ \"./src/form_editor/components/dialog_content/NewFormDialog.js\");\n/* harmony import */ var _components_dialog_content_StapleFormDialog_js__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../components/dialog_content/StapleFormDialog.js */ \"./src/form_editor/components/dialog_content/StapleFormDialog.js\");\n/* harmony import */ var _components_dialog_content_EditCollaboratorsDialog_js__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../components/dialog_content/EditCollaboratorsDialog.js */ \"./src/form_editor/components/dialog_content/EditCollaboratorsDialog.js\");\n/* harmony import */ var _components_dialog_content_ConfirmDeleteDialog_js__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../components/dialog_content/ConfirmDeleteDialog.js */ \"./src/form_editor/components/dialog_content/ConfirmDeleteDialog.js\");\n/* harmony import */ var _components_dialog_content_ConditionsEditorDialog_js__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ../components/dialog_content/ConditionsEditorDialog.js */ \"./src/form_editor/components/dialog_content/ConditionsEditorDialog.js\");\n/* harmony import */ var _components_form_editor_view_FormEditorMenu_js__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! ../components/form_editor_view/FormEditorMenu.js */ \"./src/form_editor/components/form_editor_view/FormEditorMenu.js\");\n/* harmony import */ var _components_form_editor_view_FormQuestionDisplay_js__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! ../components/form_editor_view/FormQuestionDisplay.js */ \"./src/form_editor/components/form_editor_view/FormQuestionDisplay.js\");\n/* harmony import */ var _components_form_editor_view_FormIndexListing_js__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! ../components/form_editor_view/FormIndexListing.js */ \"./src/form_editor/components/form_editor_view/FormIndexListing.js\");\n/* harmony import */ var _components_form_editor_view_EditPropertiesPanel_js__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! ../components/form_editor_view/EditPropertiesPanel.js */ \"./src/form_editor/components/form_editor_view/EditPropertiesPanel.js\");\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'form-editor-view',\n  data: function data() {\n    return {\n      dragLI_Prefix: 'index_listing_',\n      dragUL_Prefix: 'drop_area_parent_',\n      draggedElID: '',\n      listTracker: {},\n      previewMode: false,\n      sortOffset: 128,\n      //number to subtract from listindex when comparing or updating sort values\n      updateKey: 0,\n      appIsLoadingForm: false,\n      focusedFormID: '',\n      //id of specific primary, staple or internal focused form.\n      focusedFormTree: [],\n      //detailed structure of the focused form.  Always a single form.\n      previewTree: [],\n      //detailed structure of primary form and any staples.  Only used in preview mode, and only if primary has staples.\n      focusedIndicatorID: null,\n      //used for form focus management.\n      hasCollaborators: false,\n      fileManagerTextFiles: [],\n      ariaStatusFormDisplay: '',\n      focusAfterFormUpdateSelector: null\n    };\n  },\n  components: {\n    LeafFormDialog: _common_components_LeafFormDialog_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    IndicatorEditingDialog: _components_dialog_content_IndicatorEditingDialog_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    AdvancedOptionsDialog: _components_dialog_content_AdvancedOptionsDialog_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    NewFormDialog: _components_dialog_content_NewFormDialog_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"],\n    HistoryDialog: _common_components_HistoryDialog_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    StapleFormDialog: _components_dialog_content_StapleFormDialog_js__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n    EditCollaboratorsDialog: _components_dialog_content_EditCollaboratorsDialog_js__WEBPACK_IMPORTED_MODULE_7__[\"default\"],\n    ConfirmDeleteDialog: _components_dialog_content_ConfirmDeleteDialog_js__WEBPACK_IMPORTED_MODULE_8__[\"default\"],\n    ConditionsEditorDialog: _components_dialog_content_ConditionsEditorDialog_js__WEBPACK_IMPORTED_MODULE_9__[\"default\"],\n    FormEditorMenu: _components_form_editor_view_FormEditorMenu_js__WEBPACK_IMPORTED_MODULE_10__[\"default\"],\n    FormQuestionDisplay: _components_form_editor_view_FormQuestionDisplay_js__WEBPACK_IMPORTED_MODULE_11__[\"default\"],\n    FormIndexListing: _components_form_editor_view_FormIndexListing_js__WEBPACK_IMPORTED_MODULE_12__[\"default\"],\n    EditPropertiesPanel: _components_form_editor_view_EditPropertiesPanel_js__WEBPACK_IMPORTED_MODULE_13__[\"default\"]\n  },\n  inject: ['APIroot', 'CSRFToken', 'getSiteSettings', 'setDefaultAjaxResponseMessage', 'appIsLoadingCategories', 'categories', 'showLastUpdate', 'openAdvancedOptionsDialog', 'openIndicatorEditingDialog', 'openNewFormDialog', 'openStapleFormsDialog', 'allStapledFormCatIDs', 'decodeAndStripHTML', 'truncateText', 'showFormDialog', 'dialogFormContent'],\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.getSiteSettings();\n      vm.setDefaultAjaxResponseMessage();\n      vm.getFileManagerTextFiles();\n      if (!vm.appIsLoadingCategories && vm.queryID) {\n        vm.getFormFromQueryParam();\n      }\n    });\n  },\n  mounted: function mounted() {\n    window.addEventListener(\"scroll\", this.onScroll);\n  },\n  beforeUnmount: function beforeUnmount() {\n    window.removeEventListener(\"scroll\", this.onScroll);\n  },\n  provide: function provide() {\n    var _this = this;\n    return {\n      listTracker: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.listTracker;\n      }),\n      previewMode: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.previewMode;\n      }),\n      focusedIndicatorID: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.focusedIndicatorID;\n      }),\n      fileManagerTextFiles: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.fileManagerTextFiles;\n      }),\n      appIsLoadingForm: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.appIsLoadingForm;\n      }),\n      queryID: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.queryID;\n      }),\n      focusedFormID: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.focusedFormID;\n      }),\n      focusedFormTree: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.focusedFormTree;\n      }),\n      previewTree: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.previewTree;\n      }),\n      focusedFormRecord: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.focusedFormRecord;\n      }),\n      focusedFormIsSensitive: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.focusedFormIsSensitive;\n      }),\n      noForm: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.noForm;\n      }),\n      mainFormID: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.mainFormID;\n      }),\n      getFormByCategoryID: this.getFormByCategoryID,\n      editAdvancedOptions: this.editAdvancedOptions,\n      newQuestion: this.newQuestion,\n      editQuestion: this.editQuestion,\n      clearListItem: this.clearListItem,\n      addToListTracker: this.addToListTracker,\n      setIndicatorFocus: this.setIndicatorFocus,\n      startDrag: this.startDrag,\n      endDrag: this.endDrag,\n      handleOnDragCustomizations: this.handleOnDragCustomizations,\n      onDragEnter: this.onDragEnter,\n      onDragLeave: this.onDragLeave,\n      onDrop: this.onDrop,\n      clickToMoveListItem: this.clickToMoveListItem,\n      shortIndicatorNameStripped: this.shortIndicatorNameStripped,\n      makePreviewKey: this.makePreviewKey\n    };\n  },\n  computed: {\n    queryID: function queryID() {\n      return this.$route.query.formID;\n    },\n    internalID: function internalID() {\n      return this.$route.query.internalID || null;\n    },\n    noForm: function noForm() {\n      return !this.appIsLoadingForm && this.focusedFormID === '';\n    },\n    mainFormID: function mainFormID() {\n      var _this$focusedFormReco, _this$focusedFormReco2;\n      return ((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.parentID) === '' ? this.focusedFormRecord.categoryID : ((_this$focusedFormReco2 = this.focusedFormRecord) === null || _this$focusedFormReco2 === void 0 ? void 0 : _this$focusedFormReco2.parentID) || '';\n    },\n    /**\n     * @returns {Object} current query from categories object from url query id.\n     */\n    currentCategoryQuery: function currentCategoryQuery() {\n      return this.categories[this.queryID] || {};\n    },\n    /**\n     * @returns {Object} focused form record from categories object\n     */\n    focusedFormRecord: function focusedFormRecord() {\n      return this.categories[this.focusedFormID] || {};\n    },\n    /**\n     * @returns {boolean} true once sensitive indicator found\n     */\n    focusedFormIsSensitive: function focusedFormIsSensitive() {\n      var _this2 = this;\n      var isSensitive = false;\n      this.focusedFormTree.forEach(function (section) {\n        if (!isSensitive) {\n          isSensitive = _this2.checkSensitive(section);\n        }\n      });\n      return isSensitive;\n    },\n    /**\n     * @returns {array} of categories records for queried form and any staples\n     */\n    currentFormCollection: function currentFormCollection() {\n      var _Object$keys,\n        _this3 = this;\n      var allRecords = [];\n      if (((_Object$keys = Object.keys(this.currentCategoryQuery)) === null || _Object$keys === void 0 ? void 0 : _Object$keys.length) > 0) {\n        var _this$currentCategory, _this$allStapledFormC, _this$currentCategory2;\n        var mainInternals = [];\n        for (var f in this.categories) {\n          if (this.categories[f].parentID === this.currentCategoryQuery.categoryID) {\n            mainInternals.push(_objectSpread({}, this.categories[f]));\n          }\n        }\n        var currStapleIDs = ((_this$currentCategory = this.currentCategoryQuery) === null || _this$currentCategory === void 0 ? void 0 : _this$currentCategory.stapledFormIDs) || [];\n        currStapleIDs.forEach(function (id) {\n          var stapleInternals = [];\n          for (var fs in _this3.categories) {\n            if (_this3.categories[fs].parentID === id) {\n              stapleInternals.push(_objectSpread({}, _this3.categories[fs]));\n            }\n          }\n          allRecords.push(_objectSpread(_objectSpread({}, _this3.categories[id]), {}, {\n            formContextType: 'staple',\n            internalForms: stapleInternals\n          }));\n        });\n        var focusedFormType = this.currentCategoryQuery.parentID !== '' ? 'internal' : ((_this$allStapledFormC = this.allStapledFormCatIDs) === null || _this$allStapledFormC === void 0 ? void 0 : _this$allStapledFormC[((_this$currentCategory2 = this.currentCategoryQuery) === null || _this$currentCategory2 === void 0 ? void 0 : _this$currentCategory2.categoryID) || '']) > 0 ? 'staple' : 'main form';\n        allRecords.push(_objectSpread(_objectSpread({}, this.currentCategoryQuery), {}, {\n          formContextType: focusedFormType,\n          internalForms: mainInternals\n        }));\n      }\n      return allRecords.sort(function (eleA, eleB) {\n        return eleA.sort - eleB.sort;\n      });\n    },\n    /**\n     * @returns concatenated string of formIDs associated with the current query.\n     * Used to get the form pages for the preview display for a form if it has staples.\n     */\n    formPreviewIDs: function formPreviewIDs() {\n      var ids = [];\n      this.currentFormCollection.forEach(function (form) {\n        ids.push(form.categoryID);\n      });\n      return ids.join();\n    },\n    /**\n     * @returns boolean.  Whether to use preview tree or focused tree for the form display.\n     */\n    usePreviewTree: function usePreviewTree() {\n      var _this$focusedFormReco3;\n      return ((_this$focusedFormReco3 = this.focusedFormRecord) === null || _this$focusedFormReco3 === void 0 || (_this$focusedFormReco3 = _this$focusedFormReco3.stapledFormIDs) === null || _this$focusedFormReco3 === void 0 ? void 0 : _this$focusedFormReco3.length) > 0 && this.previewMode && this.focusedFormID === this.queryID;\n    },\n    /**\n     * @returns tree to display.  shorthand for template iterator.\n     */\n    fullFormTree: function fullFormTree() {\n      var _this4 = this;\n      var baseTree = this.usePreviewTree ? this.previewTree : this.focusedFormTree;\n      baseTree.forEach(function (page) {\n        if (page.child !== null && !Array.isArray(page.child)) {\n          page.child = _this4.transformFormTreeChild(page.child);\n        }\n      });\n      return baseTree;\n    },\n    /**\n     * @returns boolean.  used to watch for index or parentID changes.  triggers sorting update if true\n     */\n    sortOrParentChanged: function sortOrParentChanged() {\n      return this.sortValuesToUpdate.length > 0 || this.parentIDsToUpdate.length > 0;\n    },\n    sortValuesToUpdate: function sortValuesToUpdate() {\n      var indsToUpdate = [];\n      for (var i in this.listTracker) {\n        if (this.listTracker[i].sort !== this.listTracker[i].listIndex - this.sortOffset) {\n          indsToUpdate.push(_objectSpread({\n            indicatorID: parseInt(i)\n          }, this.listTracker[i]));\n        }\n      }\n      return indsToUpdate;\n    },\n    parentIDsToUpdate: function parentIDsToUpdate() {\n      var indsToUpdate = [];\n      //headers have null as their parentID, so newParentID is initialized with ''\n      for (var i in this.listTracker) {\n        if (this.listTracker[i].newParentID !== '' && this.listTracker[i].parentID !== this.listTracker[i].newParentID) {\n          indsToUpdate.push(_objectSpread({\n            indicatorID: parseInt(i)\n          }, this.listTracker[i]));\n        }\n      }\n      return indsToUpdate;\n    }\n  },\n  methods: {\n    /*\n     * Backward compatibility: certain properties are pre-sanitized server-side, and must be decoded before rendering\n     * TODO: Migrate to markdown\n     */\n    decodeHTMLEntities: function decodeHTMLEntities(txt) {\n      var tmp = document.createElement(\"textarea\");\n      tmp.innerHTML = txt;\n      return tmp.value;\n    },\n    backwardCompatNames: function backwardCompatNames(obj) {\n      for (var i in obj) {\n        obj[i].name = this.decodeHTMLEntities(obj[i].name);\n        if (obj[i].child != null) {\n          obj[i].child = this.backwardCompatNames(obj[i].child);\n        }\n      }\n      return obj;\n    },\n    /**\n     * Used to transform objects into ordered lists based on sort property\n     * @param {object} obj\n     * @returns {array}\n     */\n    transformFormTreeChild: function transformFormTreeChild(childObj) {\n      var tree = [];\n      for (var c in childObj) {\n        if (childObj[c].child !== null) {\n          childObj[c].child = this.transformFormTreeChild(childObj[c].child);\n        }\n        tree.push(childObj[c]);\n      }\n      tree.sort(function (a, b) {\n        return a.sort - b.sort;\n      });\n      return tree;\n    },\n    /**\n     * updates the position of the form options area in large screen displays\n     */\n    onScroll: function onScroll() {\n      var elPreview = document.getElementById('form_entry_and_preview');\n      var elIndex = document.getElementById('form_index_display');\n      if (elPreview !== null && elIndex !== null) {\n        var indexBoundTop = elIndex.getBoundingClientRect().top;\n        var previewBoundTop = elPreview.getBoundingClientRect().top;\n        var currTop = (elIndex.style.top || '0').replace('px', '');\n        if (this.appIsLoadingForm || window.innerWidth <= 600 || +currTop === 0 && indexBoundTop > 0) {\n          elIndex.style.top = 0; //was preview\n        } else {\n          var newTop = Math.round(-previewBoundTop - 8); //margin spacer\n          elIndex.style.top = newTop < 0 ? 0 : newTop + 'px';\n        }\n      }\n    },\n    /**\n     * get details for the form specified in the url param.\n     */\n    getFormFromQueryParam: function getFormFromQueryParam() {\n      var formID = this.queryID;\n      if (this.categories[formID] === undefined) {\n        this.focusedFormID = '';\n        this.focusedFormTree = [];\n      } else {\n        //an internal would need to be explicitly entered, but would cause issues\n        var parID = this.categories[formID].parentID;\n        if (parID === '') {\n          this.getFormByCategoryID(formID, true);\n        } else {\n          this.$router.push({\n            name: 'category',\n            query: {\n              formID: parID,\n              internalID: formID\n            }\n          });\n        }\n      }\n    },\n    /**\n     * Get details for a specific form and update focused form info\n     * @param {string} catID\n     * @param {boolean} setFormLoading show loader\n     */\n    getFormByCategoryID: function getFormByCategoryID() {\n      var _this5 = this;\n      var catID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var setFormLoading = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      this.ariaStatusFormDisplay = '';\n      if (catID === '') {\n        this.focusedFormID = '';\n        this.focusedFormTree = [];\n      } else {\n        this.appIsLoadingForm = setFormLoading;\n        this.setDefaultAjaxResponseMessage();\n        $.ajax({\n          type: 'GET',\n          url: \"\".concat(this.APIroot, \"form/_\").concat(catID, \"?context=formEditor\"),\n          success: function success(res) {\n            var _this5$categories$cat;\n            res = _this5.backwardCompatNames(res);\n            var query = {\n              formID: _this5.queryID\n            };\n            var internalID = null;\n            //if initial load and internalID is in URL\n            if (_this5.appIsLoadingForm === true && _this5.internalID !== null) {\n              internalID = _this5.internalID;\n              //user clicked internal btn for an internal form\n            } else if (((_this5$categories$cat = _this5.categories[catID]) === null || _this5$categories$cat === void 0 ? void 0 : _this5$categories$cat.parentID) !== '') {\n              internalID = catID;\n            }\n            if (internalID !== null) {\n              query = _objectSpread(_objectSpread({}, query), {}, {\n                internalID: internalID\n              });\n            }\n            _this5.$router.push({\n              name: 'category',\n              query: query\n            });\n            var sameForm = _this5.focusedFormID === catID;\n            if (sameForm) {\n              _this5.updateKey += 1; //ensures that the form editor view updates if the form ID does not change\n            }\n            _this5.focusedFormID = catID || '';\n            _this5.focusedFormTree = res || [];\n            _this5.appIsLoadingForm = false;\n            setTimeout(function () {\n              //if an internalID query exists and it is an internal for the current form, dispatch internal btn click event\n              if (_this5.internalID !== null && _this5.focusedFormID !== _this5.internalID) {\n                var elBtnInternal = document.getElementById('internal_form_' + _this5.internalID);\n                if (elBtnInternal !== null) {\n                  elBtnInternal.dispatchEvent(new Event(\"click\"));\n                }\n              }\n              //if a focus after form update ID is stored and it's the same form, try to move focus to that el\n              if (sameForm) {\n                var selector = _this5.focusAfterFormUpdateSelector;\n                if (selector !== null) {\n                  var element = document.querySelector(selector);\n                  var aria = '';\n                  switch (true) {\n                    case selector.startsWith(\"#click_to_move\"):\n                      var idArr = selector.split('_');\n                      var direction = idArr === null || idArr === void 0 ? void 0 : idArr[3];\n                      var id = idArr === null || idArr === void 0 ? void 0 : idArr[4];\n                      if (direction && id) {\n                        var _element;\n                        aria = \"moved indicator \".concat(id, \" \").concat(direction);\n                        /*If moved to start or end, the button that had been pressed will be disabled\n                        In this case, focus the opposite button */\n                        if (((_element = element) === null || _element === void 0 ? void 0 : _element.disabled) === true) {\n                          var otherDir = direction === 'up' ? 'down' : 'up';\n                          element = document.getElementById(\"click_to_move_\".concat(otherDir, \"_\").concat(id));\n                        }\n                      }\n                      break;\n                    case selector.startsWith(\"#edit_indicator\"):\n                      aria = \"edited indicator\";\n                      break;\n                    case selector.startsWith(\"#programmer\"):\n                      aria = \"edited programmer\";\n                      break;\n                    case selector.startsWith(\"ul#\"):\n                      aria = \"created new question\";\n                      break;\n                    default:\n                      break;\n                  }\n                  _this5.ariaStatusFormDisplay = aria;\n                  if (element !== null && !_this5.showFormDialog) {\n                    element.focus();\n                    _this5.focusAfterFormUpdateSelector = null;\n                  }\n                }\n              } else {\n                _this5.focusAfterFormUpdateSelector = null;\n              }\n            });\n          },\n          error: function error(err) {\n            return console.log(err);\n          }\n        });\n      }\n    },\n    /**\n     * @param {string} primaryID form that has staples attached.\n     * Gets detailed information for multiple categories and sets focus ID after success.\n     */\n    getPreviewTree: function getPreviewTree() {\n      var _this6 = this;\n      var primaryID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      if (primaryID !== '' && this.formPreviewIDs !== '') {\n        this.appIsLoadingForm = true;\n        this.setDefaultAjaxResponseMessage();\n        try {\n          fetch(\"\".concat(this.APIroot, \"form/specified?categoryIDs=\").concat(this.formPreviewIDs)).then(function (res) {\n            res.json().then(function (data) {\n              _this6.previewTree = data || [];\n              _this6.previewTree = _this6.backwardCompatNames(_this6.previewTree);\n              _this6.focusedFormID = primaryID;\n              _this6.appIsLoadingForm = false;\n              setTimeout(function () {\n                var btn = document.getElementById('indicator_toolbar_toggle');\n                if (btn !== null) {\n                  btn.focus();\n                  setTimeout(function () {\n                    _this6.ariaStatusFormDisplay = 'Previewing form';\n                  });\n                }\n              });\n            })[\"catch\"](function (err) {\n              return console.log(err);\n            });\n          })[\"catch\"](function (err) {\n            return console.log(err);\n          });\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    },\n    /**\n     * @param {number} indicatorID \n     * @returns {Object} with property information about the specific indicator\n     */\n    getIndicatorByID: function getIndicatorByID() {\n      var _this7 = this;\n      var indicatorID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      return new Promise(function (resolve, reject) {\n        fetch(\"\".concat(_this7.APIroot, \"formEditor/indicator/\").concat(indicatorID)).then(function (res) {\n          return res.json();\n        }).then(function (data) {\n          return resolve(data[indicatorID]);\n        })[\"catch\"](function (err) {\n          return reject(err);\n        });\n      });\n    },\n    /**\n     * get text and csv files from file manager.  Used for dropdown loading.\n     */\n    getFileManagerTextFiles: function getFileManagerTextFiles() {\n      var _this8 = this;\n      try {\n        fetch(\"\".concat(this.APIroot, \"system/files\")).then(function (res) {\n          res.json().then(function (data) {\n            var files = data || [];\n            _this8.fileManagerTextFiles = files.filter(function (filename) {\n              return filename.indexOf('.txt') > -1 || filename.indexOf('.csv') > -1;\n            });\n          })[\"catch\"](function (err) {\n            return console.log(err);\n          });\n        });\n      } catch (error) {\n        console.log(error);\n      }\n    },\n    /**\n     * get indicator details and then open the advanced options (coding) modal\n     * @param {number} indicatorID\n     */\n    editAdvancedOptions: function editAdvancedOptions() {\n      var _document,\n        _this9 = this;\n      var indicatorID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.focusAfterFormUpdateSelector = '#' + ((_document = document) === null || _document === void 0 || (_document = _document.activeElement) === null || _document === void 0 ? void 0 : _document.id) || 0;\n      this.getIndicatorByID(indicatorID).then(function (indicator) {\n        _this9.openAdvancedOptionsDialog(indicator);\n      })[\"catch\"](function (err) {\n        return console.log('error getting indicator information', err);\n      });\n    },\n    /**\n     * @param {number|null} parentID of the new subquestion.  null for new sections.\n     */\n    newQuestion: function newQuestion() {\n      var parentID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      var parentUl = parentID === null ? \"ul#base_drop_area_\".concat(this.focusedFormID) : \"ul#\".concat(this.dragUL_Prefix).concat(parentID);\n      this.focusAfterFormUpdateSelector = \"\".concat(parentUl, \" > li:last-child button[id^=\\\"edit_indicator\\\"]\");\n      this.openIndicatorEditingDialog(null, parentID, {});\n      this.focusedIndicatorID = null;\n    },\n    /**\n     * get information about the indicator and open indicator editing modal\n     * @param {number} indicatorID \n     */\n    editQuestion: function editQuestion() {\n      var _document2,\n        _this0 = this;\n      var indicatorID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      this.focusAfterFormUpdateSelector = '#' + ((_document2 = document) === null || _document2 === void 0 || (_document2 = _document2.activeElement) === null || _document2 === void 0 ? void 0 : _document2.id) || 0;\n      this.getIndicatorByID(indicatorID).then(function (indicator) {\n        _this0.focusedIndicatorID = indicatorID;\n        var parentID = (indicator === null || indicator === void 0 ? void 0 : indicator.parentID) || null;\n        _this0.openIndicatorEditingDialog(indicatorID, parentID, indicator);\n      })[\"catch\"](function (err) {\n        return console.log('error getting indicator information', err);\n      });\n    },\n    /**\n     * recursively check for questions marked sensistive.  break on true.\n     * @param {object} node form section\n     * @returns boolean\n     */\n    checkSensitive: function checkSensitive() {\n      var node = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (parseInt(node.is_sensitive) === 1) {\n        return true;\n      } else {\n        var sensitive = false;\n        if (node.child) {\n          for (var c in node.child) {\n            sensitive = this.checkSensitive(node.child[c]) || false;\n            if (sensitive === true) break;\n          }\n        }\n        return sensitive;\n      }\n    },\n    /**\n     * @param {Number|null} nodeID indicatorID of the form section selected in the Form Index\n     */\n    setIndicatorFocus: function setIndicatorFocus() {\n      var nodeID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n      if (this.focusedIndicatorID !== nodeID) {\n        this.focusedIndicatorID = nodeID;\n      }\n    },\n    /**\n     * switch between edit and preview mode\n     */\n    toggleToolbars: function toggleToolbars() {\n      this.ariaStatusFormDisplay = '';\n      this.focusedIndicatorID = null;\n      this.previewMode = !this.previewMode;\n      this.updateKey += 1;\n      if (this.usePreviewTree) {\n        this.getPreviewTree(this.focusedFormID);\n        //preview and needs load - aria will be set in gerPrevTree success\n      } else {\n        this.previewTree = [];\n        this.ariaStatusFormDisplay = this.previewMode ? 'Previewing form' : 'Editing form';\n      }\n    },\n    /**\n     * moves an item in the Form Index via the buttons that appear when the item is selected\n     * @param {Object} event \n     * @param {number} indID of the list item to move\n     * @param {boolean} moveup click/enter moves the item up (false moves it down)\n     */\n    clickToMoveListItem: function clickToMoveListItem() {\n      var _this1 = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var indID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var moveup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if (!this.previewMode && indID === this.focusedIndicatorID) {\n        var _event$target, _event$currentTarget;\n        if ((event === null || event === void 0 ? void 0 : event.keyCode) === 32) event.preventDefault();\n        this.ariaStatusFormDisplay = '';\n        this.focusAfterFormUpdateSelector = '#' + (event === null || event === void 0 || (_event$target = event.target) === null || _event$target === void 0 ? void 0 : _event$target.id) || 0;\n        var parentEl = event === null || event === void 0 || (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.closest('ul');\n        var elToMove = document.getElementById(\"\".concat(this.dragLI_Prefix).concat(indID));\n        var oldElsLI = Array.from(document.querySelectorAll(\"#\".concat(parentEl.id, \" > li\")));\n        var newElsLI = oldElsLI.filter(function (li) {\n          return li !== elToMove;\n        });\n        var listitem = this.listTracker[indID];\n        var condition = moveup === true ? listitem.listIndex > 0 : listitem.listIndex < oldElsLI.length - 1;\n        var spliceLoc = moveup === true ? -1 : 1;\n        if (condition) {\n          var oldIndex = listitem.listIndex;\n          newElsLI.splice(oldIndex + spliceLoc, 0, elToMove);\n          oldElsLI.forEach(function (li) {\n            return parentEl.removeChild(li);\n          });\n          newElsLI.forEach(function (li, i) {\n            var liIndID = parseInt(li.id.replace(_this1.dragLI_Prefix, ''));\n            parentEl.appendChild(li);\n            _this1.listTracker[liIndID].listIndex = i;\n          });\n        }\n      }\n    },\n    /**\n     * posts sort and parentID values\n     */\n    applySortAndParentID_Updates: function applySortAndParentID_Updates() {\n      var _this10 = this;\n      var updateSort = [];\n      if (this.sortValuesToUpdate.length > 0) {\n        var sortData = [];\n        this.sortValuesToUpdate.forEach(function (item) {\n          sortData.push({\n            indicatorID: item.indicatorID,\n            sort: item.listIndex - _this10.sortOffset\n          });\n        });\n        updateSort.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/sort/batch\"),\n          data: {\n            sortData: sortData,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success() {},\n          //returns array of updates, [{ indicatorID, sort },]\n          error: function error(err) {\n            return console.log('ind sort post err', err);\n          }\n        }));\n      }\n      var updateParentID = [];\n      this.parentIDsToUpdate.forEach(function (item) {\n        updateParentID.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(_this10.APIroot, \"formEditor/\").concat(item.indicatorID, \"/parentID\"),\n          data: {\n            parentID: item.newParentID,\n            CSRFToken: _this10.CSRFToken\n          },\n          success: function success() {},\n          //returns null\n          error: function error(err) {\n            return console.log('ind parentID post err', err);\n          }\n        }));\n      });\n      var all = updateSort.concat(updateParentID);\n      Promise.all(all).then(function (res) {\n        if (res.length > 0) {\n          _this10.getFormByCategoryID(_this10.focusedFormID);\n          _this10.showLastUpdate('form_properties_last_update');\n        }\n      })[\"catch\"](function (err) {\n        return console.log('an error has occurred', err);\n      });\n    },\n    /**\n     * @param {number} indID remove a record from the tracker\n     */\n    clearListItem: function clearListItem() {\n      var indID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.listTracker[indID]) {\n        delete this.listTracker[indID];\n      }\n    },\n    /**\n     * adds initial sort and parentID values to app list tracker\n     * @param {Object} formNode from the Form Index listing\n     * @param {number|null} parentID parent ID of the index listing (null for form sections)\n     * @param {number} listIndex current index for that depth in the form index\n     */\n    addToListTracker: function addToListTracker() {\n      var formNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parentID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var listIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var indicatorID = formNode.indicatorID,\n        sort = formNode.sort;\n      var item = {\n        sort: sort,\n        parentID: parentID,\n        listIndex: listIndex,\n        newParentID: ''\n      };\n      this.listTracker[indicatorID] = item;\n    },\n    /**\n     * updates the listIndex and newParentID values for a specific indicator in listtracker when moved via the Form Index\n     * @param {number} indID \n     * @param {number|null} newParIndID null for form Sections\n     * @param {number} listIndex\n     */\n    updateListTracker: function updateListTracker() {\n      var indID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var newParIndID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var listIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var item = _objectSpread({}, this.listTracker[indID]);\n      item.listIndex = listIndex;\n      item.newParentID = newParIndID;\n      this.listTracker[indID] = item;\n    },\n    removeDragDropClasses: function removeDragDropClasses() {\n      //remove possible drag-drop related classes\n      var prevEls = Array.from(document.querySelectorAll(\"#base_drop_area_\".concat(this.focusedFormID, \" li[id^=\\\"\").concat(this.dragLI_Prefix, \"\\\"],\\n                #base_drop_area_\").concat(this.focusedFormID, \" ul[id^=\\\"\").concat(this.dragUL_Prefix, \"\\\"]\")));\n      prevEls.forEach(function (el) {\n        el.classList.remove('entered-empty-ul-drop-zone');\n        el.classList.remove('entered-parent-ul-drop-zone');\n        el.classList.remove('entered-parent-ul-drop-zone-last');\n        el.classList.remove('drop_preview_visible');\n      });\n    },\n    startDrag: function startDrag() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //restrict action to bounds of visual drag indicator tab\n      if ((event === null || event === void 0 ? void 0 : event.offsetX) > 25 || (event === null || event === void 0 ? void 0 : event.offsetY) > 78) {\n        event.preventDefault();\n      } else {\n        if (!this.previewMode && event !== null && event !== void 0 && event.dataTransfer) {\n          event.dataTransfer.dropEffect = 'move';\n          event.dataTransfer.effectAllowed = 'move';\n          event.dataTransfer.setData('text/plain', event.target.id);\n          //define/update a min height for the form preview element or the dragged item could be dropped when its size changes.\n          var elFormDisplay = document.getElementById(\"form_entry_and_preview\");\n          var currentFormHeight = +elFormDisplay.getBoundingClientRect().height.toFixed(0);\n          elFormDisplay.style.minHeight = currentFormHeight + 'px';\n          //size set programmatically.  Other styles in CSS class.\n          event.target.style.height = '80px';\n          event.target.classList.add(\"is_being_dragged\");\n          var elReplacementImg = document.getElementById(\"drag_drop_default_img_replacement\");\n          if (elReplacementImg !== null) {\n            var _document$querySelect;\n            event.dataTransfer.setDragImage(elReplacementImg, 0, 0);\n            var text = (_document$querySelect = document.querySelector(\"#\".concat(event.target.id, \" .name\"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.textContent;\n            text = this.shortIndicatorNameStripped(text);\n            var targetHasSublist = event.target.querySelector('ul > li') !== null;\n            if (targetHasSublist) {\n              text += ' (includes sub-questions)';\n            }\n            this.$refs.drag_drop_custom_display.textContent = text;\n            this.draggedElID = event.target.id;\n          }\n        }\n      }\n    },\n    endDrag: function endDrag() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //reset custom display coords and remove drag class regardless of outcome\n      this.$refs.drag_drop_custom_display.style.left = '-9999px';\n      this.$refs.drag_drop_custom_display.style.top = '-1000px';\n      this.$refs.drag_drop_custom_display.textContent = \"\";\n      event.target.style.height = 'auto';\n      event.target.classList.remove('is_being_dragged');\n    },\n    handleOnDragCustomizations: function handleOnDragCustomizations() {\n      var _this$$refs$drag_drop;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //increase the ranges at which window will scroll\n      var scrollBuffer = 75;\n      var y = +(event === null || event === void 0 ? void 0 : event.clientY);\n      if (y < scrollBuffer || y > window.innerHeight - scrollBuffer) {\n        var scrollIncrement = 4;\n        var sX = window.scrollX;\n        var sY = window.scrollY;\n        var increment = y < scrollBuffer ? -scrollIncrement : scrollIncrement;\n        window.scrollTo(sX, sY + increment);\n      }\n      //update the custom display coordinates\n      var parEl = ((_this$$refs$drag_drop = this.$refs.drag_drop_custom_display) === null || _this$$refs$drag_drop === void 0 ? void 0 : _this$$refs$drag_drop.parentElement) || null;\n      if (parEl !== null) {\n        var bounds = parEl.getBoundingClientRect();\n        this.$refs.drag_drop_custom_display.style.left = +(event === null || event === void 0 ? void 0 : event.clientX) - bounds.x + 2 + 'px';\n        this.$refs.drag_drop_custom_display.style.top = +(event === null || event === void 0 ? void 0 : event.clientY) - bounds.y + 2 + 'px';\n      }\n    },\n    onDrop: function onDrop() {\n      var _this11 = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parentEl = event.currentTarget; //NOTE: drop event is on parent ul, the li is the el being moved\n      if (parentEl.nodeName === 'UL' && event !== null && event !== void 0 && event.dataTransfer && event.dataTransfer.effectAllowed === 'move') {\n        event.preventDefault();\n        var draggedElID = event.dataTransfer.getData('text');\n        var elLiToMove = document.getElementById(draggedElID);\n        var indID = parseInt(draggedElID.replace(this.dragLI_Prefix, ''));\n        var parIndID = (parentEl.id || '').includes(\"base_drop_area\") ? null : parseInt(parentEl.id.replace(this.dragUL_Prefix, ''));\n        var elsLI = Array.from(document.querySelectorAll(\"#\".concat(parentEl.id, \" > li\")));\n\n        //if the drop target ul has no items yet, just append\n        if (elsLI.length === 0) {\n          try {\n            parentEl.append(elLiToMove);\n            this.updateListTracker(indID, parIndID, 0);\n          } catch (error) {\n            console.log(error);\n          }\n          //otherwise, find the closest li to the drop-point and mv it if it has changed pos\n        } else {\n          var parTop = parentEl.getBoundingClientRect().top;\n          var closest = elsLI.find(function (item) {\n            return event.clientY - parTop <= item.offsetTop + item.offsetHeight / 2;\n          }) || null;\n          if (closest !== elLiToMove) {\n            try {\n              parentEl.insertBefore(elLiToMove, closest);\n              //update the new indexes\n              var newElsLI = Array.from(document.querySelectorAll(\"#\".concat(parentEl.id, \" > li\")));\n              newElsLI.forEach(function (li, i) {\n                var indID = parseInt(li.id.replace(_this11.dragLI_Prefix, ''));\n                _this11.updateListTracker(indID, parIndID, i);\n              });\n            } catch (error) {\n              console.log(error);\n            }\n          }\n        }\n        this.removeDragDropClasses();\n      }\n    },\n    /**\n     * @param {Object} event removes the drop zone hilite if target is ul\n     */\n    onDragLeave: function onDragLeave() {\n      var _event$target2;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (event !== null && event !== void 0 && (_event$target2 = event.target) !== null && _event$target2 !== void 0 && _event$target2.classList.contains('form-index-listing-ul')) {\n        this.removeDragDropClasses();\n      }\n    },\n    /**\n     * @param {Object} event adds the drop zone hilite if target is ul\n     */\n    onDragEnter: function onDragEnter() {\n      var _event$target3;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      //remove possible drag-drop related classes\n      this.removeDragDropClasses();\n      if (event !== null && event !== void 0 && event.dataTransfer && event.dataTransfer.effectAllowed === 'move' && event !== null && event !== void 0 && (_event$target3 = event.target) !== null && _event$target3 !== void 0 && _event$target3.classList.contains('form-index-listing-ul')) {\n        var _dropTargetDirectLIs;\n        var dropTargetDirectLIs = Array.from(event.target.querySelectorAll('#' + event.target.id + '> li'));\n        var ulTop = event.target.getBoundingClientRect().top;\n        var draggedLi = document.getElementById(this.draggedElID);\n        var draggedLiIndex = dropTargetDirectLIs.indexOf(draggedLi);\n        var closestLi = dropTargetDirectLIs.find(function (item) {\n          return event.clientY - ulTop <= item.offsetTop + item.offsetHeight / 2;\n        }) || null;\n        var isSameList = draggedLiIndex > -1;\n        var isDirectlyAboveCurrentLocation = this.draggedElID === (closestLi === null || closestLi === void 0 ? void 0 : closestLi.id);\n        var isDirectlyBelowCurrentLocation = isSameList && (\n        //at the end and the dragged item is last\n        closestLi === null && dropTargetDirectLIs.length - 1 === draggedLiIndex ||\n        //next li is immediately next to the dragged one\n        closestLi !== null && (dropTargetDirectLIs === null || dropTargetDirectLIs === void 0 || (_dropTargetDirectLIs = dropTargetDirectLIs[dropTargetDirectLIs.indexOf(draggedLi) + 1]) === null || _dropTargetDirectLIs === void 0 ? void 0 : _dropTargetDirectLIs.id) === (closestLi === null || closestLi === void 0 ? void 0 : closestLi.id));\n\n        //don't bother doing anything further if it's in the same location\n        if (!isDirectlyAboveCurrentLocation && !isDirectlyBelowCurrentLocation) {\n          if (dropTargetDirectLIs.length === 0) {\n            //no items in this list - add class to target (UL)\n            event.target.classList.add('entered-empty-ul-drop-zone');\n          } else {\n            //add class to closest LI\n            var el = null;\n            if (closestLi !== null) {\n              el = closestLi;\n              closestLi.classList.add('entered-parent-ul-drop-zone');\n            } else {\n              //element is at bottom of list, add 'last' styles to last LI\n              var lastLI = dropTargetDirectLIs[dropTargetDirectLIs.length - 1];\n              el = lastLI;\n              lastLI.classList.add('entered-parent-ul-drop-zone-last');\n            }\n            setTimeout(function () {\n              el.classList.add('drop_preview_visible');\n            }, 150);\n          }\n        }\n      }\n    },\n    /**\n     * @param {string} categoryID \n     * @param {number} len \n     * @returns shortened form name\n     */\n    shortFormNameStripped: function shortFormNameStripped() {\n      var catID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n      var form = this.categories[catID] || '';\n      var name = this.decodeAndStripHTML((form === null || form === void 0 ? void 0 : form.categoryName) || 'Untitled');\n      return this.truncateText(name, len).trim();\n    },\n    shortIndicatorNameStripped: function shortIndicatorNameStripped() {\n      var text = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 35;\n      var name = this.decodeAndStripHTML(text);\n      return this.truncateText(name, len).trim() || '[ blank ]';\n    },\n    /**\n     * @param {object} node form section\n     * @returns string used to key the format preview.\n     */\n    makePreviewKey: function makePreviewKey(node) {\n      var _node$options;\n      return \"\".concat(node.format).concat((node === null || node === void 0 || (_node$options = node.options) === null || _node$options === void 0 ? void 0 : _node$options.join()) || '', \"_\").concat((node === null || node === void 0 ? void 0 : node[\"default\"]) || '');\n    }\n  },\n  watch: {\n    appIsLoadingCategories: function appIsLoadingCategories(newVal, oldVal) {\n      if (oldVal === true && this.queryID) {\n        this.getFormFromQueryParam();\n      }\n    },\n    queryID: function queryID() {\n      var newVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var oldVal = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      if (!this.appIsLoadingCategories) {\n        this.getFormFromQueryParam();\n      }\n    },\n    sortOrParentChanged: function sortOrParentChanged(newVal, oldVal) {\n      if (newVal === true && !this.previewMode) {\n        this.applySortAndParentID_Updates();\n      }\n    },\n    focusedFormID: function focusedFormID(newVal, oldVal) {\n      window.scrollTo(0, 0);\n      if (newVal) {\n        setTimeout(function () {\n          var elFormBtn = document.querySelector(\"button[id$=\\\"form_\".concat(newVal, \"\\\"]\"));\n          if (elFormBtn !== null) {\n            elFormBtn.focus();\n          }\n        });\n      }\n    }\n  },\n  template: \"<FormEditorMenu />\\n    <section id=\\\"formEditor_content\\\">\\n        <div v-if=\\\"appIsLoadingForm || appIsLoadingCategories\\\" class=\\\"page_loading\\\">\\n            Loading... \\n            <img src=\\\"../images/largespinner.gif\\\" alt=\\\"\\\" />\\n        </div>\\n        <div v-else-if=\\\"noForm\\\">\\n            The form you are looking for ({{ queryID }}) was not found.\\n            <router-link :to=\\\"{ name: 'browser' }\\\" class=\\\"router-link\\\" style=\\\"display: inline-block;\\\">\\n                Back to&nbsp;<b>Form Browser</b>\\n            </router-link>\\n        </div>\\n\\n        <template v-else>\\n            <!-- admin home link, browser link, page title -->\\n            <h2 id=\\\"page_breadcrumbs\\\">\\n                <a href=\\\"../admin\\\" class=\\\"leaf-crumb-link\\\" title=\\\"to Admin Home\\\">Admin</a>\\n                <i class=\\\"fas fa-caret-right leaf-crumb-caret\\\"></i>\\n                <router-link :to=\\\"{ name: 'browser' }\\\" class=\\\"leaf-crumb-link\\\" title=\\\"to Form Browser\\\">Form Browser</router-link>\\n                <i class=\\\"fas fa-caret-right leaf-crumb-caret\\\"></i>Form Editor\\n            </h2>\\n            <!-- TOP INFO PANEL -->\\n            <edit-properties-panel :key=\\\"'panel_' + focusedFormID\\\"></edit-properties-panel>\\n\\n            <div id=\\\"form_index_and_editing\\\" :data-focus=\\\"focusedIndicatorID\\\">\\n                <!-- NOTE: INDEX (main + stapled forms, internals) -->\\n                <div id=\\\"form_index_display\\\">\\n                    <div role=\\\"status\\\" style=\\\"position:absolute;opacity:0\\\" aria-live=\\\"assertive\\\" :aria-label=\\\"ariaStatusFormDisplay\\\"></div>\\n                    <button type=\\\"button\\\" id=\\\"indicator_toolbar_toggle\\\" class=\\\"btn-general preview\\\"\\n                        @click.stop=\\\"toggleToolbars()\\\">\\n                        <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">{{ previewMode ? '\\uD83D\\uDCC3' : '\\uD83D\\uDD0E' }}&nbsp;</span>\\n                        {{previewMode ? 'Edit this Form' : 'Preview this Form'}}\\n                    </button>\\n                    <template v-if=\\\"!previewMode\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn-general\\\"\\n                            :id=\\\"'addInternalUse_' + mainFormID\\\"\\n                            @click=\\\"openNewFormDialog(mainFormID)\\\">\\n                            <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\u2795&nbsp;</span>\\n                            Add Internal-Use\\n                        </button>\\n                        <!-- staple options if main form is not itself a staple -->\\n                        <button v-if=\\\"!allStapledFormCatIDs?.[mainFormID] > 0\\\"\\n                            type=\\\"button\\\" class=\\\"btn-general\\\"\\n                            :id=\\\"'addStaple_' + mainFormID\\\"\\n                            @click=\\\"openStapleFormsDialog(mainFormID)\\\">\\n                            <span role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDCCC&nbsp;</span>Staple other form\\n                        </button>\\n                    </template>\\n                    <!-- LAYOUTS (FORMS AND INTERNAL/STAPLE OPTIONS) -->\\n                    <ul v-if=\\\"!previewMode && currentFormCollection.length > 0\\\" :id=\\\"'layoutFormRecords_' + queryID\\\" :class=\\\"{preview: previewMode}\\\">\\n                        <template v-for=\\\"form in currentFormCollection\\\" :key=\\\"'form_layout_item_' + form.categoryID\\\">\\n                            <li :class=\\\"{selected: form.categoryID === focusedFormID}\\\">\\n                                <button type=\\\"button\\\" :id=\\\"'main_form_' + form.categoryID\\\" :title=\\\"form.categoryID === focusedFormID ? 'selected form' : ''\\\"\\n                                    @click=\\\"form.stapledFormIDs.length > 0 && previewMode && form.categoryID === queryID ?\\n                                        getPreviewTree(form.categoryID) : getFormByCategoryID(form.categoryID)\\\"\\n                                    class=\\\"layout-listitem\\\"\\n                                    :aria-label=\\\"shortFormNameStripped(form.categoryID, 30) + (form.formContextType === 'staple' ? ', stapled form' : ', main form')\\\">\\n                                    <span v-if=\\\"form.formContextType === 'staple'\\\" role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDCCC&nbsp;</span>\\n                                    <span v-if=\\\"form.formContextType === 'main form'\\\" role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDCC2&nbsp;</span>\\n                                    <span :style=\\\"{textDecoration: form.categoryID === focusedFormID ? 'none' : 'underline'}\\\">\\n                                        {{shortFormNameStripped(form.categoryID, 30)}}&nbsp;\\n                                    </span>\\n                                </button>\\n                                <!-- INTERNAL FORMS -->\\n                                <div v-if=\\\"form.internalForms.length > 0\\\"\\n                                    class=\\\"internal_forms\\\">\\n                                    <ul :id=\\\"'internalFormRecords_' + form.categoryID\\\">\\n                                        <li v-for=\\\"i in form.internalForms\\\" :key=\\\"'internal_' + i.categoryID\\\">\\n                                            <button type=\\\"button\\\" :id=\\\"'internal_form_' + i.categoryID\\\" @click=\\\"getFormByCategoryID(i.categoryID)\\\"\\n                                                :class=\\\"{selected: i.categoryID === focusedFormID}\\\">\\n                                                <span role=\\\"img\\\" aria=\\\"\\\" alt=\\\"\\\">\\uD83D\\uDCC3&nbsp;</span>\\n                                                {{shortFormNameStripped(i.categoryID, 26)}}\\n                                            </button>\\n                                        </li>\\n                                    </ul>\\n                                </div>\\n                            </li>\\n                        </template>\\n                    </ul>\\n\\n                    <!-- FORM MENU PREVIEW -->\\n                    <ul v-if=\\\"previewMode && fullFormTree.length > 0\\\">\\n                        <li v-for=\\\"(page, i) in fullFormTree\\\" :key=\\\"'preview_' + page.indicatorID + '_' + page.categoryID\\\"\\n                            class=\\\"form_menu_preview\\\">\\n                            {{ i + 1}}.\\n                            <span v-if=\\\"page.categoryID !== focusedFormID\\\" role=\\\"img\\\" aria-hidden=\\\"true\\\" alt=\\\"\\\">\\uD83D\\uDCCC</span>\\n                            {{ shortIndicatorNameStripped(page.description || page.name) }}\\n                        </li>\\n                    </ul>\\n                </div>\\n\\n                <!-- FORM EDITING AND ENTRY PREVIEW -->\\n                <div id=\\\"form_entry_and_preview\\\">\\n                    <!-- visually / access hidden elements used for the drag/drop display -->\\n                    <div id=\\\"drag_drop_default_img_replacement\\\" aria-hidden=\\\"true\\\"></div>\\n                    <div id=\\\"drag_drop_custom_display\\\" ref=\\\"drag_drop_custom_display\\\" aria-hidden=\\\"true\\\"></div>\\n\\n                    <div class=\\\"printformblock\\\" :data-update-key=\\\"updateKey\\\">\\n\\n                        <!-- FORM DISPLAY WITH DRAG-DROP ZONE -->\\n                        <ul v-if=\\\"focusedFormTree.length > 0\\\"\\n                            :id=\\\"'base_drop_area_' + focusedFormRecord.categoryID\\\"\\n                            :key=\\\"'drop_zone_collection_' + focusedFormRecord.categoryID + '_' + updateKey\\\"\\n                            class=\\\"form-index-listing-ul\\\"\\n                            data-effect-allowed=\\\"move\\\"\\n                            @drop.stop=\\\"onDrop($event)\\\"\\n                            @dragover.prevent\\n                            @dragenter.prevent=\\\"onDragEnter\\\"\\n                            @dragleave=\\\"onDragLeave\\\">\\n\\n                            <form-index-listing v-for=\\\"(formSection, i) in fullFormTree\\\"\\n                                :id=\\\"dragLI_Prefix + formSection.indicatorID\\\"\\n                                :categoryID=\\\"formSection.categoryID\\\"\\n                                :formPage=i\\n                                :depth=0\\n                                :indicatorID=\\\"formSection.indicatorID\\\"\\n                                :formNode=\\\"formSection\\\"\\n                                :index=i\\n                                :currentListLength=\\\"fullFormTree.length\\\"\\n                                :parentID=null\\n                                :key=\\\"'index_list_item_' + formSection.indicatorID\\\"\\n                                :draggable=\\\"!previewMode\\\"\\n                                @dragstart.stop=\\\"startDrag\\\"\\n                                @dragend.stop=\\\"endDrag\\\"\\n                                @drag.stop=\\\"handleOnDragCustomizations\\\">\\n                            </form-index-listing>\\n                        </ul>\\n                    </div>\\n                    <div v-if=\\\"!previewMode\\\" id=\\\"blank_section_preview\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn-general\\\"\\n                            @click=\\\"newQuestion(null)\\\"\\n                            aria-label=\\\"Add Section\\\">\\n                            + Add Section\\n                        </button>\\n                    </div>\\n                </div>\\n            </div>\\n        </template>\\n\\n        <!-- DIALOGS -->\\n        <leaf-form-dialog v-if=\\\"showFormDialog\\\">\\n            <template #dialog-content-slot>\\n                <component :is=\\\"dialogFormContent\\\" @get-form=\\\"getFormByCategoryID\\\"></component>\\n            </template>\\n        </leaf-form-dialog>\\n    </section>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/views/FormEditorView.js?\n}");

/***/ })

}]);