/**
 * Object that represents a query to the Form API
 * 
 * TODO: This is based off of /LEAF_Request_Portal/js/formQuery.js. Eventually that file should be deprecated 
 * in favor of this one. This version removes any built-in ajax calls and is made available to the rest of the
 * javascript APIs.
 */
var FormQuery = function () {
    var terms = [],
        joins = [],
        sort = { column: "", direction: "" },
        getData = [],
        limit = 0,
        limitOffset = 0,

        /**
         * Build a JSON object that represents a Form query
         * 
         * @returns object  JSON object that represetns a Form query
         */
        buildQuery = function () {

            var res = {
                terms: terms,
                joins: joins,
                sort: sort,
                getData: getData
            };

            if (limit > 0) {
                res["limit"] = limit;

                if (limitOffset > 0) {
                    res["limitOffset"] = limitOffset;
                }
            }

            return res;
        },

        /**
         * Reset any search terms, joins, sort, and getData
         */
        reset = function () {
            terms = [];
            joins = [];
            sort = { column: "", direction: "" };
            getData = [];
        },

        /**
         * Add a new search term
         * 
         * @param id        string  columnID
         * @param operator  string  SQL comparison operator
         * @param match     string  search term to match on
         * @param gate      string  AND/OR gate
         */
        addTerm = function (id, operator, match, gate) {
            // @TODO IE Fix (No overloading)
            if (gate === undefined) {
                gate = 'AND';
            }
            terms.push({
                "id": id,
                "operator": operator,
                "match": match,
                "gate": gate
            });
        },

        /**
         * Add a new search term for data table
         * 
         * @param id            string  columnID / 'data' to search data table / 'dependencyID' to search records_dependencies data, matching on 'filled'
         * @param indicatorID   string  indicatorID / dependencyID / "0" to search all indicators
         * @param operator      string  SQL comparison operator
         * @param match         string  search term to match on
         * @param gate          string  AND/OR gate
         */
        addDataTerm = function (id, indicatorID, operator, match, gate) {
            // @TODO IE Fix (No overloading)
            if (gate === undefined) {
                gate = 'AND';
            }
            terms.push({
                "id": id,
                "indicatorID": indicatorID,
                "operator": operator,
                "match": match,
                "gate": gate
            });
        },

        /**
         * Import query generated by formSearch
         * 
         * @param input object  The JSON query object generated by formSearch
         */
        importQuery = function (input) {
            for(let i in input.terms) {
                switch(Object.keys(input.terms[i]).length) {
                    case 3:
                        addTerm(input.terms[i].id, input.terms[i].operator, input.terms[i].match);
                        break;
                    case 4:
                        if (input.terms[i].gate === undefined) {
                            addDataTerm(input.terms[i].id, input.terms[i].indicatorID, input.terms[i].operator, input.terms[i].match);
                            break;
                        } else {
                            addTerm(input.terms[i].id, input.terms[i].operator, input.terms[i].match, input.terms[i].gate);
                            break;
                        }
                    case 5:
                        addDataTerm(input.terms[i].id, input.terms[i].indicatorID, input.terms[i].operator, input.terms[i].match, input.terms[i].gate);
                        break;
                    default:
                        console.log('Format error');
                        break;
                }
            }

            for (var i in input.joins) {
                join(input.joins[i]);
            }

            for (var i in input.getData) {
                getData(input.getData[i]);
            }
        },

        /**
         * Limit number of results
         * 
         * @param queryLimit    int the number of records to limit to
         * @param queryOffset   int the number of records to offset (optional)
         */
        setLimit = function (queryLimit, queryOffset) {
            limit = queryLimit;

            if (queryOffset !== undefined) {
                offset = queryOffset;
                setLimitOffset(offset);
            }
        },

        /**
         * Offset results
         * 
         * @param offset    int the nubmer of records to offset
         */
        setLimitOffset = function (offset) {
            limitOffset = offset;
        },

        /**
         * Join table
         * 
         * @param table string  the table name
         */
        addJoin = function (table) {
            if (joins.indexOf(table) == -1) {
                joins.push(table);
            }
        },

        /**
         * Get data
         * 
         * @param indicatorID   string  the indicatorID to get data for
         * @memberOf LeafFormQuery
         */
        includeIndicator = function (indicatorID) {
            if (getData.indexOf(indicatorID) == -1) {
                getData.push(indicatorID);
            }
        },

        /**
         * Sort results
         * 
         * @param column    string  the column to sort
         * @param direction string  the direction to sort (ASC,DESC)
         */
        sort = function (column, direction) {
            sort.column = column;
            sort.direction = direction;
        };

    return {
        addDataTerm: addDataTerm,
        addJoin: addJoin,
        addTerm: addTerm,
        buildQuery: buildQuery,
        importQuery: importQuery,
        includeIndicator: includeIndicator,
        reset: reset,
        setLimit: setLimit,
        setLimitOffset: setLimitOffset,
        sort: sort
    };
};
