var print;
var printer = function () {
  function printForm(recordID) {
    var buttonHtml = $("#btn_printForm").html();
    $("#btn_printForm").html("Loading...");
    let portal_path = $("#abs_portal_path").val();

    var doc = new jsPDF({ lineHeight: 1.3 });
    doc.page = 0;
    doc.setFontSize(12);
    var blank = false;

    var width = doc.internal.pageSize.getWidth();
    var height = doc.internal.pageSize.getHeight();
    var verticalShift = 17;

    var requestInfo = new Object();
    var internalInfo = new Array();
    var homeQR = document.createElement("img");
    const homeURL = encodeURIComponent(portal_path + '/');
    //get QR code of record
    homeQR.setAttribute("class", "print nodisplay");
    homeQR.setAttribute("style", "width: 72px");
    homeQR.setAttribute("src", portal_path + "/qrcode/?encode=" + homeURL);

    //Image entries
    function getBase64Image(img) {
      // Create an empty canvas element
      var canvas = document.createElement("canvas");
      canvas.width = img.width;
      canvas.height = img.height;

      // Copy the image contents to the canvas
      var ctx = canvas.getContext("2d");
      ctx.drawImage(img, 0, 0);

      var dataURL = canvas.toDataURL("image/png");

      return dataURL.replace(/^data:image\/(png|jpg);base64,/, "");
    }

    //cleanup on tags and whitespace
    function cleanTagsAndWhitespace(input) {
      if (typeof input !== "undefined" && input !== null) {
        input = input.replace(/(<li>)/gi, "- ");
        input = input.replace(/(<\/li>)/gi, "\n");
        return input.trim();
      } else {
        return "";
      }
    }

    //insert html tags
    function decodeHTMLEntities(str) {
      return $("<div/>").html(str).text();
    }

    //get current date
    function getDate(date) {
      return (
        date.getMonth() + 1 + "/" + date.getDate() + "/" + date.getFullYear()
      );
    }

    //Start PDF pass-through of indicators
    function makePdf(data) {
      $("#btn_printForm").html(buttonHtml);

      var makeCount = 0;
      var numInRow = 0;
      var horizontalShift = 10;
      var maxWidth = 190;
      var subCount = 1;
      var lineSpacing = (doc.getFontSize() * 1.28 * 25.4) / 72;
      var htmlPattern = new RegExp("<([^>]+)>");
      var date = new Date();
      var checkBoxShift = 0;

      // set to true for first sub question of each header
      var subShift = true;

      doc.setFont("Helvetica");
      doc.setFontSize(12);

      //Create a page footer for current page
      function pageFooter(isLast) {
        var originalColor = doc.getTextColor();
        doc.setFillColor(0);
        doc.setDrawColor(0);
        doc.setTextColor(0);
        doc.line(10, height - 10, width - 10, height - 10);
        doc.setFontSize(10);
        doc.setFont("times");
        if (requestInfo["workflows"].length > 1) {
          doc.text("Multiple forms", 10, height - 7);
        } else {
          doc.text(
            requestInfo["workflows"][0][0]["categoryName"],
            10,
            height - 7
          );
        }
        doc.page++;
        doc.text(doc.page.toString(), 198, height - 7);
        if (!isLast) {
          doc.text(
            "Continued on the next page.",
            105,
            height - 7,
            null,
            null,
            "center"
          );
        } else {
          doc.text(
            "This form was generated by LEAF on " + getDate(date),
            105,
            height - 7,
            null,
            null,
            "center"
          );
        }
        doc.setFontSize(12);
        doc.setFont("Helvetica");
        doc.setTextColor(originalColor);
      }

      //Create new row under main entry
      function subNewRow() {
        numInRow = 0;
        verticalShift += 12;
        horizontalShift = 10;
        maxWidth = 190;
      }
      //make selected values consistently arrays for checkboxes, multisel, radio, checkbox, dropdown
      function toArrayFormat(indicator) {
        let selectedVals = "";
        if (indicator.format === "checkboxes") {
          selectedVals = Array.isArray(indicator.value)
            ? indicator.value.slice() || []
            : [indicator.value];
        } else if (indicator.format === "multiselect") {
          //old and new multisel data formats
          selectedVals = Array.isArray(indicator.value)
            ? indicator.value.slice()
            : indicator.value.split(/,(?!\s)/) || [];
        } else selectedVals = [indicator.value];
        selectedVals = selectedVals.filter((v) => v !== "");
        selectedVals = selectedVals.map((v) => decodeHTMLEntities(v));
        return selectedVals;
      }

      //Create an indicator entry based on information passed through for PDF
      function makeEntry(indicator, parentIndex, depth, numAtLevel, index) {
        var required = Number(indicator.required) === 1 ? " *" : "";
        var number = depth === 0 ? index : parentIndex + "." + subCount;
        var title =
          typeof indicator.description !== "undefined" &&
          indicator.description !== null &&
          indicator.description.length > 0
            ? number +
              ": " +
              decodeHTMLEntities(indicator.description) +
              " " +
              required
            : number +
              ": " +
              decodeHTMLEntities(indicator.name) +
              " " +
              required;
        var titleContinued =
          typeof indicator.description !== "undefined" &&
          indicator.description !== null &&
          indicator.description.length > 0
            ? decodeHTMLEntities(indicator.description) +
              " continued " +
              required
            : decodeHTMLEntities(indicator.name) + " continued " + required;
        var storedSubCount = subCount;
        var sizeOfBox = 0;
        var fitSize = 0;
        var verticalStart = 0;
        var horizontalStart = 0;
        var sizeOfOption = 0;
        var splitTitle = [];
        var splitOption = [];
        var format = indicator.format;
        if (
          format === "text" &&
          ((indicator.value && indicator.value.length > 30) ||
            title.length > 30)
        ) {
          format = "textarea";
        }

        if (depth === 0) {
          verticalShift += 10;
          doc.setTextColor(255);
          doc.setDrawColor(0);
        } else {
          doc.setTextColor(0);
        }

        if (verticalShift > height - 40) {
          pageFooter(false);
          doc.addPage();
          verticalShift = 10;
        }

        doc.setFillColor(30, 70, 125);
        var value = htmlPattern.test((indicator.value || "").toString())
          ? decodeHTMLEntities(cleanTagsAndWhitespace(indicator.value))
          : decodeHTMLEntities(indicator.value);
        var splitText = doc.splitTextToSize(value, 150.5);
        var lines = 1;

        $.each(splitText, function (i) {
          if (splitText[i].length !== 0) {
            lines++;
          }
        });

        function textSub() {
          if (title.length > value.length) {
            sizeOfBox = title.length * 3.5;
          } else {
            sizeOfBox =
              value.length > 0
                ? value.length * 3.5
                : (numInRow * 190) / numAtLevel;
          }
          if (sizeOfBox > maxWidth && maxWidth !== 190) {
            if (title.length > value.length) {
              sizeOfBox = title.length * 3.5;
            } else {
              sizeOfBox =
                value.length > 0
                  ? value.length * 3.5
                  : (numInRow * 190) / numAtLevel;
            }
            subNewRow();
          }
          verticalStart = verticalShift;
          doc.setFontSize(8);
          if (title.length > 190) {
            splitTitle = doc.splitTextToSize(title, 185);
            for (var i = 0; i < splitTitle.length; i++) {
              verticalShift += 3;
              doc.text(splitTitle[i], 11, verticalShift);
            }
          } else {
            doc.text(title, horizontalShift + 1, verticalShift + 3);
          }
          doc.setFontSize(12);
          if (!blank && typeof value !== "undefined") {
            doc.setFont("times");
            doc.text(value, horizontalShift + 2, verticalShift + 10);
          }
          doc.rect(
            horizontalShift,
            verticalStart,
            maxWidth,
            verticalShift - verticalStart + 12
          );
          doc.setFont("Helvetica");
          maxWidth = maxWidth - sizeOfBox;
          horizontalShift += sizeOfBox;
          makeCount++;
          numInRow++;
        }

        function textHeader() {
          verticalShift += -4;
          splitTitle = doc.splitTextToSize(title, 40);
          var shiftHeaderText = splitTitle.length * 8;
          doc.setFillColor(30, 70, 125);
          doc.rect(10, verticalShift, 190, shiftHeaderText, "FD");
          doc.setFillColor(255);
          doc.rect(50, verticalShift, 150, shiftHeaderText, "FD");
          for (var i = 0; i < splitTitle.length; i++) {
            doc.text(splitTitle[i], 11, verticalShift + 6 + 8 * i);
          }
          doc.setFillColor(30, 70, 125);
          doc.setTextColor(0);
          if (!blank && typeof value !== "undefined") {
            doc.setFont("times");
            doc.text(value, 51, verticalShift + 6);
          }
          doc.setFont("Helvetica");
          verticalShift +=
            depth === 0 &&
            typeof indicator.child !== "undefined" &&
            indicator.child !== null
              ? splitTitle.length * 8 - 4
              : splitTitle.length * 8;
        }

        function makeTable() {
          var columns = [];
          var start = doc.page;

          $.each(JSON.parse(indicator.options), function () {
            columns.push(this.name);
          });
          var table =
            "#grid_" +
            indicator.indicatorID +
            "_" +
            indicator.series +
            "_" +
            recordID +
            "_output";
          doc.autoTableSetDefaults({
            margin: {
              left: 10,
              right: 10,
              bottom: 20,
            },
            tableWidth: 190,
            cellPadding: 0.5,
            theme: "grid",
            style: {
              overflow: "linebreak",
              overflowColumns: false,
              cellWidth: 190 / columns.length,
              fontSize: 12,
              halign: "center",
            },
          });
          doc.autoTable({
            head: [columns],
            startY: verticalShift,
            styles: {
              font: "helvetica",
              fontStyle: "normal",
              fillColor: [30, 70, 125],
              overflow: "linebreak",
              overflowColumns: false,
              cellWidth: 190 / columns.length,
              halign: "center",
              cellPadding: 0.5,
              fontSize: 12,
            },
          });
          verticalShift = doc.previousAutoTable.finalY - 7;
          if (blank) {
            var blankArr = [];
            var a = [""];
            while (a.length * 2 <= columns.length) a = a.concat(a);
            if (a.length < columns.length)
              a = a.concat(a.slice(0, columns.length - a.length));
            blankArr.push(a, a, a);
            doc.autoTable({
              body: blankArr,
              startY: verticalShift + 6,
              styles: {
                font: "times",
                overflow: "linebreak",
                overflowColumns: false,
                halign: "center",
                cellWidth: 190 / columns.length,
              },
            });
          } else {
            doc.autoTable({
              html: table,
              startY: verticalShift + 6,
              styles: {
                font: "times",
                overflow: "linebreak",
                overflowColumns: false,
                halign: "center",
                cellWidth: 190 / columns.length,
              },
            });
          }

          // adds footer to pages where table overflowed from
          var i = 1;
          while (i < doc.internal.getNumberOfPages() - start) {
            doc.setPage(start + i);
            pageFooter(false);
            i++;
          }

          // returns focus to last page
          doc.setPage(doc.internal.getNumberOfPages());
          doc.setTextColor(0);
          doc.setDrawColor(0);
        }
        
        if (depth > 0) {
          if (subShift) {
            verticalShift += 4;
            subShift = false;
          }
          switch (format) {
            case "grid":
              if (maxWidth !== 190) {
                subNewRow();
              }
              if (blank) {
                title += " (Use additional sheet if needed)";
              }
              verticalStart = verticalShift;
              splitTitle = doc.splitTextToSize(title, 180);
              for (var i = 0; i < splitTitle.length; i++) {
                doc.text(splitTitle[i], 11, verticalStart + 6 + 8 * i);
              }
              verticalShift += splitTitle.length * 8;
              doc.rect(10, verticalStart, 190, verticalShift - verticalStart);
              makeTable();
              verticalShift = doc.previousAutoTable.finalY;
              break;
            case "orgchart_employee":
              value =
                value !== ""
                  ? cleanTagsAndWhitespace(
                      $(
                        "#data_" +
                          indicator.indicatorID +
                          "_" +
                          indicator.series
                      )
                        .find("a")
                        .html()
                    )
                  : "";
              textSub();
              break;
            case "orgchart_group":
              value =
                value !== ""
                  ? cleanTagsAndWhitespace(
                      $(
                        "#data_" +
                          indicator.indicatorID +
                          "_" +
                          indicator.series
                      ).text()
                    )
                  : "";
              textSub();
              break;
            case "orgchart_position":
              value =
                value !== ""
                  ? cleanTagsAndWhitespace(
                      $(
                        "#data_" +
                          indicator.indicatorID +
                          "_" +
                          indicator.series +
                          " > div:first"
                      )
                        .clone()
                        .children()
                        .remove()
                        .end()
                        .text()
                    )
                  : "";
              textSub();
              break;
            case "date":
            case "number":
            case "currency":
            case "text":
              textSub();
              break;
            case "textarea":
              if (maxWidth !== 190) {
                subNewRow();
              }
              fitSize = !blank ? lines * lineSpacing : 60;
              verticalStart = verticalShift;
              doc.setFontSize(8);
              if (title.length > 190) {
                splitTitle = doc.splitTextToSize(title, 185);
                for (var i = 0; i < splitTitle.length; i++) {
                  verticalShift += 3;
                  doc.text(splitTitle[i], 11, verticalShift);
                }
              } else {
                doc.text(title, horizontalShift + 1, verticalShift + 3);
              }
              doc.setFontSize(12);
              if (!blank && typeof value !== "undefined") {
                doc.setFont("times");
                for (var i = 0; i < splitText.length; i++) {
                  if (verticalShift >= height - 40) {
                    doc.rect(
                      10,
                      verticalStart,
                      190,
                      height - 20 - verticalStart
                    );
                    pageFooter(false);
                    doc.addPage();
                    verticalShift = 10;
                    verticalStart = verticalShift;
                    fitSize = (splitText.length - i) * lineSpacing;
                    doc.setFontSize(8);
                    doc.setFont("helvetica");
                    if (titleContinued.length > 190) {
                      splitTitleContinued = doc.splitTextToSize(
                        titleContinued,
                        185
                      );
                      for (var j = 0; j < splitTitleContinued.length; j++) {
                        verticalShift += 3;
                        doc.text(splitTitleContinued[j], 11, verticalShift);
                      }
                      verticalShift += 4;
                    } else {
                      doc.text(titleContinued, 11, verticalShift + 3);
                    }
                    doc.setFontSize(12);
                    doc.setFont("times");
                  }
                  doc.setTextColor(0);
                  doc.text(splitText[i], 15, verticalShift + 16);
                  verticalShift += lineSpacing;
                }
              } else {
                if (verticalShift + 5 * lineSpacing > height - 40) {
                  verticalShift = height - 40;
                } else {
                  verticalShift += 5 * lineSpacing;
                }
              }
              doc.setFont("Helvetica");
              doc.rect(
                10,
                verticalStart,
                190,
                verticalShift - verticalStart + 16
              );
              verticalShift += 2.17 * (lineSpacing + 2);
              break;
            case "radio":
            case "multiselect":
            case "dropdown":
            case "checkbox":
            case "checkboxes":
              $.each(indicator.options, function () {
                sizeOfBox += this.length * 3.5 + 20;
              });
              sizeOfBox =
                sizeOfBox > title.length * 3.5 ? sizeOfBox : title.length * 3.5;
              doc.setFontSize(8);

              if (sizeOfBox > maxWidth && maxWidth !== 190) {
                subNewRow();
              }
              doc.setFont("times");

              verticalStart = verticalShift;
              if (title.length > 100) {
                splitTitle = doc.splitTextToSize(title, 185);
                for (var i = 0; i < splitTitle.length; i++) {
                  doc.text(splitTitle[i], 11, verticalShift + 3);
                  verticalShift += 3;
                }
              } else {
                doc.text(title, horizontalShift + 1, verticalShift + 3);
              }
              doc.setFontSize(12);
              checkBoxShift = 0;
              $.each(indicator.options, function () {
                checkBoxShift =
                  doc.getTextWidth(this) + 10 > checkBoxShift
                    ? doc.getTextWidth(this) + 10
                    : checkBoxShift;
              });
              checkBoxShift = checkBoxShift > 20 ? checkBoxShift : 20;
              if (maxWidth > 190) {
                horizontalShift = 15;
              } else {
                horizontalStart = horizontalShift;
              }
              horizontalShift += 5;
              if (
                typeof indicator.options !== "undefined" &&
                indicator.options !== null
              ) {
                for (var i = 0; i < indicator.options.length; i++) {
                  if (
                    horizontalShift + doc.getTextWidth(indicator.options[i]) >
                    maxWidth
                  ) {
                    verticalShift += 8;
                    horizontalShift = 15;
                  }
                  if (verticalShift >= height - 40) {
                    doc.rect(
                      10,
                      verticalStart,
                      190,
                      height - 20 - verticalStart
                    );
                    pageFooter(false);
                    doc.addPage();
                    verticalShift = 10;
                    verticalStart = verticalShift;
                    fitSize = (splitText.length - i) * lineSpacing;
                    doc.setFontSize(8);
                    doc.setFont("helvetica");
                    if (titleContinued.length > 190) {
                      splitTitleContinued = doc.splitTextToSize(
                        titleContinued,
                        185
                      );
                      for (var j = 0; j < splitTitleContinued.length; j++) {
                        verticalShift += 3;
                        doc.text(splitTitleContinued[j], 11, verticalShift);
                      }
                      verticalShift += 4;
                    } else {
                      doc.text(titleContinued, 11, verticalShift + 3);
                    }
                    doc.setFontSize(12);
                    doc.setFont("times");
                  }
                  if (horizontalShift > 160) {
                    subNewRow();
                    horizontalShift += 5;
                  }
                  doc.rect(horizontalShift, verticalShift + 6, 5, 5);

                  let selectedVals = toArrayFormat(indicator);
                  indicator.options = indicator.options.filter((option) => selectedVals.includes(option));
                  if (
                    !blank &&
                    selectedVals.indexOf(indicator.options[i]) > -1
                  ) {
                    doc.text("x", horizontalShift + 1.5, verticalShift + 9.5);
                  }
                  sizeOfOption = (indicator.options[i]?.length ?? 0) * 2.5;
                  doc.setFont("times");
                  splitOption = doc.splitTextToSize(
                    decodeHTMLEntities(indicator.options[i]),
                    170
                  );
                  for (var j = 0; j < splitOption.length; j++) {
                    doc.text(
                      splitOption[j],
                      horizontalShift + 6,
                      verticalShift + 10.5 + 8 * j
                    );
                  }
                  verticalShift += 8 * (splitOption.length - 1);
                  doc.setFont("Helvetica");
                  horizontalShift += checkBoxShift;
                  sizeOfBox += sizeOfOption;
                }
              }
              if (verticalStart === verticalShift) {
                doc.rect(horizontalStart, verticalStart, maxWidth, 12);
              } else {
                doc.rect(
                  10,
                  verticalStart,
                  maxWidth,
                  12 + verticalShift - verticalStart
                );
              }
              maxWidth = maxWidth - sizeOfBox;
              horizontalShift += sizeOfBox;
              makeCount++;
              numInRow++;
              break;
            default:
              if (maxWidth !== 190) {
                subNewRow();
              }
              //default format is dark-blue header
              doc.setTextColor(255);
              doc.setFont("helvetica");
              splitTitle = doc.splitTextToSize(title, 185);
              if (verticalShift + 8 + splitTitle.length * 8 >= height - 40) {
                doc.rect(
                  10,
                  verticalShift,
                  190,
                  height - 30 - verticalShift,
                  "FD"
                );
              } else {
                doc.rect(10, verticalShift, 190, splitTitle.length * 8, "FD");
              }
              for (var i = 0; i < splitTitle.length; i++) {
                if (verticalShift >= height - 40) {
                  pageFooter(false);
                  doc.addPage();
                  doc.setFont("helvetica");
                  doc.setTextColor(255);
                  doc.setDrawColor(0);
                  doc.setFillColor(30, 70, 125);
                  verticalShift = 10;
                  if (
                    verticalShift + 8 + (splitTitle.length - i) * 8 >=
                    height - 40
                  ) {
                    doc.rect(
                      10,
                      verticalShift,
                      190,
                      height - 30 - verticalShift,
                      "FD"
                    );
                  } else {
                    doc.rect(
                      10,
                      verticalShift,
                      190,
                      8 + (splitTitle.length - i) * 8,
                      "FD"
                    );
                  }
                }
                doc.text(splitTitle[i], 11, verticalShift + 6);
                verticalShift += 8;
              }
          }
        } else {
          switch (format) {
            case "grid":
              if (blank) {
                title += " (Use additional sheet if needed)";
              }
              splitTitle = doc.splitTextToSize(title, 180);
              doc.rect(10, verticalShift, 190, splitTitle.length * 8, "FD");
              for (var i = 0; i < splitTitle.length; i++) {
                doc.text(splitTitle[i], 11, verticalShift + 6 + 8 * i);
              }
              verticalShift += splitTitle.length * 8;
              makeTable();
              verticalShift = doc.previousAutoTable.finalY - 3.5;
              break;
            case "orgchart_employee":
              value =
                value !== ""
                  ? cleanTagsAndWhitespace(
                      $(
                        "#data_" +
                          indicator.indicatorID +
                          "_" +
                          indicator.series
                      )
                        .find("a")
                        .html()
                    )
                  : "";
              textHeader();
              break;
            case "orgchart_group":
              value =
                value !== ""
                  ? cleanTagsAndWhitespace(
                      $(
                        "#data_" +
                          indicator.indicatorID +
                          "_" +
                          indicator.series
                      ).text()
                    )
                  : "";
              textHeader();
              break;
            case "orgchart_position":
              value =
                value !== ""
                  ? cleanTagsAndWhitespace(
                      $(
                        "#data_" +
                          indicator.indicatorID +
                          "_" +
                          indicator.series +
                          " > div:first"
                      )
                        .clone()
                        .children()
                        .remove()
                        .end()
                        .text()
                    )
                  : "";
              textHeader();
              break;
            case "date":
            case "number":
            case "currency":
            case "text":
              textHeader();
              break;
            case "textarea":
              verticalShift += -4;
              fitSize = !blank ? lines * 2 * lineSpacing : 60;
              doc.setFillColor(30, 70, 125);
              if (title.length > 190) {
                splitTitle = doc.splitTextToSize(title, 185);
                doc.rect(
                  10,
                  verticalShift,
                  190,
                  8 * splitTitle.length + 4,
                  "FD"
                );
                for (var i = 0; i < splitTitle.length; i++) {
                  verticalShift += 8;
                  doc.text(splitTitle[i], 11, verticalShift);
                }
                verticalShift += 4;
              } else {
                doc.rect(10, verticalShift, 190, 8, "FD");
                doc.text(title, 11, verticalShift + 6);
              }
              if (fitSize >= height - 70) {
                doc.rect(
                  10,
                  verticalShift + 8,
                  190,
                  height - 12 - (verticalShift + 8)
                );
              }
              doc.setTextColor(0);
              verticalStart = verticalShift;
              if (!blank && typeof value !== "undefined") {
                doc.setFont("times");
                verticalShift += 4;
                for (var i = 0; i < splitText.length; i++) {
                  if (verticalShift >= height - 40) {
                    doc.rect(
                      10,
                      verticalStart,
                      190,
                      height - 20 - verticalStart
                    );
                    pageFooter(false);
                    doc.addPage();
                    doc.setTextColor(255);
                    doc.setDrawColor(0);
                    doc.setFillColor(30, 70, 125);
                    verticalShift = 10;
                    verticalStart = 10;
                    fitSize = (splitText.length - i) * lineSpacing;
                    doc.rect(10, verticalShift, 190, 8, "FD");
                    if (titleContinued.length > 190) {
                      splitTitleContinued = doc.splitTextToSize(
                        titleContinued,
                        185
                      );
                      for (var j = 0; j < splitTitleContinued.length; j++) {
                        verticalShift += 3;
                        doc.text(splitTitleContinued[j], 11, verticalShift);
                      }
                      verticalShift += 4;
                    } else {
                      doc.text(titleContinued, 11, verticalShift + 6);
                    }
                    doc.setFont("times");
                  }
                  doc.setTextColor(0);
                  doc.text(splitText[i], 15, verticalShift + 2 * lineSpacing);
                  verticalShift += lineSpacing;
                }
                if (verticalShift + 2 * lineSpacing > height - 40) {
                  verticalShift = height - 40;
                } else {
                  verticalShift += 2 * lineSpacing;
                }
              } else {
                if (verticalShift + 5 * lineSpacing > height - 40) {
                  verticalShift = height - 40;
                } else {
                  verticalShift += 5 * lineSpacing;
                }
              }
              doc.setFont("Helvetica");
              doc.rect(10, verticalStart, 190, verticalShift - verticalStart);
              if (
                typeof indicator.child !== "undefined" &&
                indicator.child !== null
              ) {
                verticalShift += -4;
              }
              break;
            case "radio":
            case "multiselect":
            case "dropdown":
            case "checkbox":
            case "checkboxes":
              verticalShift += -4;
              splitTitle = doc.splitTextToSize(title, 40);
              if (title.length > 190) {
                splitTitle = doc.splitTextToSize(title, 185);
                doc.rect(
                  10,
                  verticalShift,
                  190,
                  8 * splitTitle.length + 4,
                  "FD"
                );
                for (var i = 0; i < splitTitle.length; i++) {
                  verticalShift += 8;
                  doc.text(splitTitle[i], 11, verticalShift);
                }
                verticalShift += 4;
              } else {
                doc.rect(10, verticalShift, 190, 8, "FD");
                doc.text(title, 11, verticalShift + 6);
              }
              doc.setFont("times");
              checkBoxShift = 0;
              $.each(indicator.options, function () {
                checkBoxShift =
                  doc.getTextWidth(this) + 10 > checkBoxShift
                    ? doc.getTextWidth(this) + 10
                    : checkBoxShift;
              });
              checkBoxShift = checkBoxShift > 20 ? checkBoxShift : 20;
              horizontalShift = 20;
              verticalStart = verticalShift;
              doc.setTextColor(0);
              verticalShift += 4;
              if (
                typeof indicator.options !== "undefined" &&
                indicator.options !== null
              ) {
                for (var i = 0; i < indicator.options.length; i++) {
                  if (
                    horizontalShift + doc.getTextWidth(indicator.options[i]) >
                    maxWidth
                  ) {
                    verticalShift += 8;
                    horizontalShift = 20;
                  }
                  if (verticalShift >= height - 40) {
                    doc.rect(
                      10,
                      verticalStart,
                      190,
                      height - 20 - verticalStart
                    );
                    doc.setTextColor(0);
                    doc.setFont("times");
                    pageFooter(false);
                    doc.addPage();
                    doc.setTextColor(255);
                    doc.setDrawColor(0);
                    doc.setFillColor(30, 70, 125);
                    verticalShift = 10;
                    verticalStart = 10;
                    splitTitle = doc.splitTextToSize(title, 38);
                    doc.setFont("helvetica");
                    doc.setFillColor(30, 70, 125);
                    if (title.length > 190) {
                      splitTitle = doc.splitTextToSize(title, 185);
                      doc.rect(
                        10,
                        verticalShift,
                        190,
                        8 * splitTitle.length + 4,
                        "FD"
                      );
                      for (var j = 0; j < splitTitle.length; j++) {
                        verticalShift += 8;
                        doc.text(splitTitle[j], 11, verticalShift);
                      }
                      verticalShift += 4;
                    } else {
                      doc.rect(10, verticalShift, 190, 8, "FD");
                      doc.text(title, 11, verticalShift + 6);
                    }
                    doc.setTextColor(255);
                    doc.setFillColor(30, 70, 125);
                    doc.setFillColor(255);
                    for (var j = 0; j < splitTitle.length; j++) {
                      doc.text(splitTitle[j], 11, verticalStart + 6 + 8 * j);
                    }
                    verticalShift += 4;
                  }
                  doc.rect(horizontalShift - 5, verticalShift + 6, 5, 5);
                  doc.setTextColor(0);
                  doc.setFont("helvetica");

                  let selectedVals = toArrayFormat(indicator);
                  indicator.options = indicator.options.filter((option) => selectedVals.includes(option));
                  if (
                    !blank &&
                    selectedVals.indexOf(indicator.options[i]) > -1
                  ) {
                    doc.text("x", horizontalShift - 3.5, verticalShift + 9.5);
                  }
                  doc.setFont("times");
                  splitOption = doc.splitTextToSize(
                    decodeHTMLEntities(indicator.options[i]),
                    170
                  );
                  for (var j = 0; j < splitOption.length; j++) {
                    doc.text(
                      splitOption[j],
                      horizontalShift + 1,
                      verticalShift + 10.5 + 8 * j
                    );
                  }
                  verticalShift += 8 * (splitOption.length - 1);
                  horizontalShift += checkBoxShift;
                }
              }
              verticalShift += 16;
              doc.rect(10, verticalStart, 190, verticalShift - verticalStart);
              doc.setFont("helvetica");
              horizontalShift = 10;
              verticalShift += -4;
              break;
            default:
              //default format is dark-blue header
              doc.setFont("helvetica");
              splitTitle = doc.splitTextToSize(title, 185);
              if (verticalShift + 8 + splitTitle.length * 8 >= height - 40) {
                doc.rect(
                  10,
                  verticalShift,
                  190,
                  height - 30 - verticalShift,
                  "FD"
                );
              } else {
                doc.rect(10, verticalShift, 190, splitTitle.length * 8, "FD");
              }
              for (var i = 0; i < splitTitle.length; i++) {
                if (verticalShift >= height - 40) {
                  pageFooter(false);
                  doc.addPage();
                  doc.setFont("helvetica");
                  doc.setTextColor(255);
                  doc.setDrawColor(0);
                  doc.setFillColor(30, 70, 125);
                  verticalShift = 10;
                  if (
                    verticalShift + 8 + (splitTitle.length - i) * 8 >=
                    height - 40
                  ) {
                    doc.rect(
                      10,
                      verticalShift,
                      190,
                      height - 30 - verticalShift,
                      "FD"
                    );
                  } else {
                    doc.rect(
                      10,
                      verticalShift,
                      190,
                      8 + (splitTitle.length - i) * 8,
                      "FD"
                    );
                  }
                }
                doc.text(splitTitle[i], 11, verticalShift + 6);
                verticalShift += 8;
              }
              if (
                typeof indicator.child !== "undefined" &&
                indicator.child !== null
              ) {
                verticalShift += -4;
              }
              break;
          }
        }
        if (
          typeof indicator.child !== "undefined" &&
          indicator.child !== null
        ) {
          subCount = 0;
          $.each(indicator.child, function () {
            subCount += 1;
            makeEntry(
              this,
              number,
              depth + 1,
              Object.keys(indicator.child).length,
              index
            );
          });
          subCount = storedSubCount;
        }
      }

      //Get the internal form indicators
      function getInternalData() {
        $.each(requestInfo["internalForms"], function (i) {
          $.ajax({
            method: "GET",
            url:
              "./api/form/" +
              recordID +
              "/_" +
              requestInfo["internalForms"][i] +
              "/data/tree",
            dataType: "json",
            cache: false,
            async: false,
          })
            .done(function (res) {
              pageFooter(false);
              doc.addPage();
              verticalShift = 17;
              createHeader(res, true, i);
              makeInternal(res);
            })
            .fail(function (err) {
              console.log(err);
              alert("Could not retrieve indicator data");
            });
        });
      }

      //Create indicator entries for PDF
      function makeInternal(data2) {
        $.each(data2, function (i) {
          makeEntry(this, null, 0, 0, i + 1);
          verticalShift += -4;
          subShift = true;
          if (this.child !== undefined && this.child !== null) {
            makeCount = 0;
            subNewRow();
          }
        });
      }

      //Pass through main request indicators
      $.each(data, function (i) {
        makeEntry(this, null, 0, 0, i + 1);
        verticalShift += -4;
        subShift = true;
        if (this.child !== undefined && this.child !== null) {
          makeCount = 0;
          subNewRow();
        }
      });

      //Pass through internal form indicators
      if (requestInfo["internalForms"].length > 0) {
        getInternalData();
      }

      //Give space for help text
      verticalShift += 16;
      doc.text("* = required field", 200, verticalShift, null, null, "right");

      //Check for signatures to add PDF page
      if (
        typeof requestInfo["signatures"] !== "undefined" &&
        requestInfo["signatures"].length > 0
      ) {
        doc.text("Signatures:", 10, verticalShift);
        verticalShift += 14;
        $.each(requestInfo["signatures"], function () {
          if (verticalShift > height - 15) {
            pageFooter(false);
            doc.addPage();
            doc.text("Signatures continued:", 10, 15);
            verticalShift = 30;
          }

          if (typeof this["signed"] !== "undefined") {
            doc.setFontStyle("italic");
            doc.setFontType("times");
            var signedDate = new Date(Number(this["signed"]["timestamp"]));
            doc.text(
              this["signed"]["userID"] + " on " + getDate(signedDate),
              10,
              verticalShift - 5
            );
            doc.setFontType("helvetica");
            doc.setFontStyle("normal");
          }
          doc.line(10, verticalShift - 4, 90, verticalShift - 4);
          doc.text(this["stepTitle"], 10, verticalShift);
          verticalShift += 14;
        });
      }

      //Last page footer
      pageFooter(true);

      //Save PDF name
      if (blank) {
        if (requestInfo["workflows"].length > 1) {
          doc.save("MultipleForms.pdf");
        } else {
          doc.save(requestInfo["workflows"][0][0]["categoryName"] + ".pdf");
        }
      } else {
        doc.save(
          "Request #" + recordID + " - " + requestInfo["title"] + ".pdf"
        );
      }
    }

    var indicatorCount = 0;
    var indicators = new Object();
    var blankIndicators = 0;

    //Check for blanks in child indicators
    function checkBlankChild(indicator) {
      var children = Object.keys(indicator);

      for (var i = 0; i < children.length; i++) {
        indicatorCount++;
        var child = indicator[children[i]];
        switch (child.format) {
          case "grid":
            if (
              !child.value ||
              typeof child.value.cells === "undefined" ||
              child.value.cells === null
            ) {
              blankIndicators++;
            }
            break;
          default:
            if (!child.value || child.value.length === 0) {
              blankIndicators++;
            }
        }

        // process the children of the children...
        if (typeof child.child !== "undefined" && child.child != null) {
          checkBlankChild(child.child);
        }
      }
    }

    //Check for blanks in indicators
    function checkBlank(ind) {
      $.each(ind, function () {
        indicatorCount++;
        switch (this.format) {
          case "grid":
            if (
              !this.value ||
              typeof this.value.cells === "undefined" ||
              this.value.cells === null
            ) {
              blankIndicators++;
            }
            break;
          default:
            if (!this.value || this.value.length === 0) {
              blankIndicators++;
            }
        }
        if (typeof this.child !== "undefined" && this.child !== null) {
          checkBlankChild(this.child);
        }
      });
    }

    //Create the header for PDF
    function createHeader(headerData, internal, i) {
      checkBlank(headerData);
      blank = blankIndicators === indicatorCount;
      var submitted = Number(requestInfo["submitted"]) > 0;
      var actionCompleted = typeof requestInfo["lastAction"] !== "undefined";
      if (!blank || submitted) {
        var splitRequestTitle = doc.splitTextToSize(requestInfo["title"], 150);
        if (splitRequestTitle[0].length > 40) {
          $.each(splitRequestTitle, function () {
            doc.text(this.toString(), 35, verticalShift);
            verticalShift += 7;
          });
        } else {
          doc.text(splitRequestTitle[0].toString(), 35, verticalShift);
        }
        doc.text(
          $("span#headerTab").text(),
          200,
          verticalShift,
          null,
          null,
          "right"
        );
        verticalShift += 7;
        doc.text(
          "Initiated by " + requestInfo["name"],
          200,
          verticalShift,
          null,
          null,
          "right"
        );
        doc.setTextColor(80, 80, 80);
        doc.setFontStyle("italic");
        $.each(requestInfo["workflows"], function () {
          if (internal == true) {
            doc.text(internalInfo[i], 35, verticalShift);
          } else {
            doc.text(this[0]["categoryName"], 35, verticalShift);
          }
          verticalShift += 7;
        });
        doc.text($("#headerLabel").text(), 35, verticalShift);
        doc.setTextColor(0, 0, 0);
        doc.setFontType("normal");
        if (!submitted) {
          doc.text("Not submitted", 200, verticalShift, null, null, "right");
        } else {
          var submitTime = new Date(Number(requestInfo["submitted"]) * 1000);
          doc.text(
            "Submitted " + getDate(submitTime),
            200,
            verticalShift,
            null,
            null,
            "right"
          );
          if (
            actionCompleted &&
            requestInfo["lastAction"]["action"] !== "Submitted"
          ) {
            var actionTime = new Date(
              Number(requestInfo["lastAction"]["time"]) * 1000
            );
            verticalShift += 14;
            doc.rect(10, verticalShift, 190, 8);
            doc.text(
              requestInfo["lastAction"]["description"] +
                " " +
                requestInfo["lastAction"]["action"] +
                " by " +
                requestInfo["lastAction"]["userID"] +
                " " +
                getDate(actionTime),
              11,
              verticalShift + 6
            );
            verticalShift += 8;
          }
        }
        doc.addImage(
          getBase64Image($('img[alt="QR code"]')[0]),
          "PNG",
          8.5,
          8,
          25,
          25
        );
      } else {
        doc.setFontSize(8);
        doc.text("Name:", 150, verticalShift);
        doc.line(160, verticalShift, 200, verticalShift);
        doc.text("Date:", 152, verticalShift + 7);
        doc.line(160, verticalShift + 7, 200, verticalShift + 7);
        doc.setFontSize(12);
        $.each(requestInfo["workflows"], function () {
          doc.text(this[0]["categoryName"], 35, verticalShift);
          verticalShift += 7;
        });
        doc.setTextColor(80, 80, 80);
        doc.setFontStyle("italic");
        doc.text($("#headerLabel").text(), 35, verticalShift);
        doc.setTextColor(0, 0, 0);
        doc.setFontType("normal");
        doc.addImage(getBase64Image(homeQR), "PNG", 8.5, 8, 25, 25);
      }
    }

    //Get indicator data from API
    function getIndicatorData() {
      $.ajax({
        method: "GET",
        url: "./api/form/" + recordID + "/data/tree",
        dataType: "json",
        cache: false,
      })
        .done(function (res) {
          indicators = res;
          createHeader(indicators, false);
          makePdf(indicators);
        })
        .fail(function (err) {
          console.log(err);
          alert("Could not retrieve indicator data");
        });
    }

    //Get last action of record
    function getLastAction() {
      var fetchURL = "./api/formWorkflow/" + recordID + "/lastAction";

      $.ajax({
        method: "GET",
        url: fetchURL,
        dataType: "json",
        cache: false,
      })
        .done(function (res) {
          if (res !== null && res["actionType"] !== null) {
            requestInfo["lastAction"] = {
              action: res["actionTextPasttense"],
              time: res["time"],
              description:
                res["description"] !== null ? res["description"] + ": " : "",
              userID: res["userID"],
            };
          }
          getIndicatorData();
        })
        .fail(function (err) {
          alert("Unable to get approval details.");
          console.log(err);
          getIndicatorData();
        });
    }

    //Get workflow current step or state
    function getWorkflowState() {
      if (requestInfo["submitted"] > 0) {
        var fetchURL = "./api/formWorkflow/" + recordID + "/currentStep";

        $.ajax({
          method: "GET",
          url: fetchURL,
          dataType: "json",
          cache: false,
        })
          .done(function (res) {
            if (res === null) {
              requestInfo["completed"] = true;
            }
            getLastAction();
          })
          .fail(function (err) {
            alert("Unable to get workflow details.");
            console.log(err);
            getLastAction();
          });
      } else {
        getIndicatorData();
      }
    }

    //Get processed signatures if they were signed
    function getSigned() {
      var fetchURL = "./api/signature/" + recordID;

      $.ajax({
        method: "GET",
        url: fetchURL,
        dataType: "json",
        cache: false,
      })
        .done(function (res) {
          $.each(requestInfo["signatures"], function (i) {
            $.each(res, function () {
              if (this.stepID === requestInfo["signatures"][i]["stepID"]) {
                requestInfo["signatures"][i]["signed"] = {
                  timestamp: this.timestamp,
                  userID: this.userID,
                };
              }
            });
          });
          getWorkflowState();
        })
        .fail(function (err) {
          alert("Unable to get form details.");
          console.log(err);
        });
    }

    //Get signatures if they exist
    function getSignatures(index) {
      var processed = index;
      if (processed === requestInfo["workflows"].length) {
        getSigned();
      } else {
        var workflowID = requestInfo["workflows"][processed][0]["workflowID"];
        var fetchURL = "./api/workflow/" + workflowID;

        $.ajax({
          method: "GET",
          url: fetchURL,
          dataType: "json",
          cache: false,
        })
          .done(function (res) {
            $.each(res, function () {
              if (
                typeof this["requiresDigitalSignature"] !== "undefined" &&
                this["requiresDigitalSignature"] === "1"
              ) {
                requestInfo["signatures"].push({
                  stepID: this.stepID,
                  stepTitle: this.stepTitle,
                });
              }
            });
            processed++;
            getSignatures(processed);
          })
          .fail(function (err) {
            alert("Unable to get form details.");
            console.log(err);
          });
      }
    }

    //Get workflow ID for checking signatures
    function getWorkflowID(categoryIDs, index) {
      var processed = index;
      if (processed === categoryIDs.length) {
        requestInfo["signatures"] = [];
        getSignatures(0);
      } else {
        var fetchURL = "./api/form/_" + categoryIDs[processed] + "/workflow";

        $.ajax({
          method: "GET",
          url: fetchURL,
          dataType: "json",
          cache: false,
        })
          .done(function (res) {
            processed++;
            requestInfo["workflows"].push(res);
            getWorkflowID(categoryIDs, processed);
          })
          .fail(function (err) {
            alert("Unable to get form details.");
            console.log(err);
          });
      }
    }

    //Get the internal forms attached infomration
    function getInternalFormInfo(internalForms) {
      for (var i = 0; i < internalForms.length; i++) {
        $.ajax({
          method: "GET",
          url: "./api/form/" + recordID + "/_" + internalForms[i],
          dataType: "json",
          cache: false,
        })
          .done(function (res) {
            internalInfo.push(res["items"][0]["name"]);
          })
          .fail(function (err) {
            alert("Unable to get form details.");
            console.log(err);
          });
      }
    }

    //Get main request form information
    function getFormInfo() {
      var fetchURL = "./api/form/" + recordID + "/recordinfo";

      $.ajax({
        method: "GET",
        url: fetchURL,
        dataType: "json",
        cache: false,
      })
        .done(function (res) {
          requestInfo["title"] = res["title"];
          requestInfo["name"] = res["name"];
          requestInfo["date"] = res["date"];
          requestInfo["submitted"] = res["submitted"];
          requestInfo["categories"] = Object.keys(res["categories"]);
          requestInfo["workflows"] = [];
          requestInfo["internalForms"] = res["internalForms"];
          if (requestInfo["internalForms"].length > 0) {
            getInternalFormInfo(requestInfo["internalForms"]);
          }
          getWorkflowID(requestInfo["categories"], 0);
        })
        .fail(function (err) {
          alert("Unable to get form details.");
          console.log(err);
        });
    }

    //Start process
    getFormInfo();
  }
  return {
    printForm: printForm,
  };
};
