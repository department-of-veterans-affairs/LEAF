"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkleaf_vue"] = self["webpackChunkleaf_vue"] || []).push([["form_editor/form-editor-view"],{

/***/ "./src/form_editor/components/form_editor_view/CategoryItem.js":
/*!*********************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/CategoryItem.js ***!
  \*********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'category-item',\n  props: {\n    categoriesRecord: Object,\n    availability: String\n  },\n  inject: ['APIroot', 'CSRFToken', 'libsPath', 'categories', 'updateCategoriesProperty', 'stripAndDecodeHTML', 'allStapledFormCatIDs'],\n  computed: {\n    workflowID: function workflowID() {\n      return parseInt(this.categoriesRecord.workflowID);\n    },\n    cardLibraryClasses: function cardLibraryClasses() {\n      //NOTE:? often null (LIVE).  called when smarty referFormLibraryID != ''\n      return \"formPreview formLibraryID_\".concat(this.categoriesRecord.formLibraryID);\n    },\n    catID: function catID() {\n      return this.categoriesRecord.categoryID;\n    },\n    stapledForms: function stapledForms() {\n      var _this = this;\n      var stapledForms = [];\n      this.categoriesRecord.stapledFormIDs.forEach(function (id) {\n        return stapledForms.push(_objectSpread({}, _this.categories[id]));\n      });\n      stapledForms = stapledForms.sort(function (eleA, eleB) {\n        return eleA.sort - eleB.sort;\n      });\n      return stapledForms;\n    },\n    isStapledToOtherForm: function isStapledToOtherForm() {\n      return this.allStapledFormCatIDs.includes(this.categoriesRecord.categoryID);\n    },\n    /**\r\n     * NOTE: uses LEAF XSSHelpers.js\r\n     * @returns {string} truncated category name for card title\r\n     */\n    categoryName: function categoryName() {\n      return this.categoriesRecord.categoryName === '' ? 'Untitled' : this.stripAndDecodeHTML(this.categoriesRecord.categoryName);\n    },\n    formDescription: function formDescription() {\n      return this.stripAndDecodeHTML(this.categoriesRecord.categoryDescription);\n    },\n    /**\r\n     * \r\n     * @returns {string} workflow ID and description\r\n     */\n    workflowDescription: function workflowDescription() {\n      var msg = '';\n      if (this.workflowID > 0) {\n        msg = \"\".concat(this.categoriesRecord.workflowDescription || 'No Description', \" (#\").concat(this.categoriesRecord.workflowID, \")\");\n      } else {\n        msg = 'No Workflow';\n      }\n      return msg;\n    }\n  },\n  methods: {\n    updateSort: function updateSort() {\n      var _this2 = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var categoryID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';\n      var sortValue = parseInt(event.currentTarget.value);\n      if (isNaN(sortValue)) return;\n      if (sortValue < -128) {\n        sortValue = -128;\n        event.currentTarget.value = -128;\n      }\n      if (sortValue > 127) {\n        sortValue = 127;\n        event.currentTarget.value = 127;\n      }\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formSort\"),\n        data: {\n          sort: sortValue,\n          categoryID: categoryID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this2.updateCategoriesProperty(categoryID, 'sort', sortValue);\n        },\n        error: function error(err) {\n          return console.log('sort post err', err);\n        }\n      });\n    }\n  },\n  template: \"<tr :id=\\\"catID\\\" :title=\\\"catID + ': ' + categoryName\\\">\\n            <td height=\\\"40\\\" class=\\\"form-name\\\">\\n                <router-link :to=\\\"{ name: 'category', query: { formID: catID }}\\\">\\n                {{ categoryName }}\\n                </router-link>\\n            </td>\\n            <td class=\\\"formPreviewDescription\\\">{{ formDescription }}</td>\\n            <td v-if=\\\"availability !== 'supplemental'\\\">{{ workflowDescription }}</td>\\n            <td v-else>\\n                <div v-if=\\\"allStapledFormCatIDs.includes(catID)\\\" style=\\\"display: flex; justify-content: center;\\\">\\n                    <span role=\\\"img\\\" aria=\\\"\\\">\\uD83D\\uDCD1</span>&nbsp;Stapled\\n                </div>\\n            </td>\\n            <td>\\n                <div v-if=\\\"parseInt(categoriesRecord.needToKnow) === 1\\\" class=\\\"need-to-know-enabled\\\">\\n                    <img :src=\\\"libsPath + 'dynicons/svg/emblem-readonly.svg'\\\" alt=\\\"\\\" style=\\\"width: 20px;margin-right:2px\\\"/>\\n                    &nbsp;<em>Need to Know enabled</em>\\n                </div>\\n            </td>\\n            <td>\\n                <input type=\\\"number\\\" @change=\\\"updateSort($event, catID)\\\"\\n                    :aria-labelledby=\\\"availability + '_sort'\\\"\\n                    :value=\\\"categoriesRecord.sort\\\" min=\\\"-128\\\" max=\\\"127\\\"\\n                    style=\\\"width: 100%; min-width:50px;\\\" />\\n            </td>\\n        </tr>\\n        <template v-if=\\\"stapledForms.length > 0\\\">\\n            <tr v-for=\\\"form in stapledForms\\\" :key=\\\"catID + '_stapled_with_' + form.categoryID\\\" class=\\\"sub-row\\\">\\n                <td height=\\\"36\\\" class=\\\"form-name\\\">\\n                    <router-link :to=\\\"{ name: 'category', query: { formID: form.categoryID }}\\\" class=\\\"router-link\\\">\\n                        <span role=\\\"img\\\" aria=\\\"\\\">\\uD83D\\uDCCC&nbsp;</span>\\n                        <span style=\\\"text-decoration:underline;\\\">{{ categories[form.categoryID].categoryName }}</span>\\n                    </router-link>\\n                </td>\\n                <td>{{ categories[form.categoryID].categoryDescription }}</td>\\n                <td></td>\\n                <td>\\n                    <div v-if=\\\"parseInt(categories[form.categoryID].needToKnow) === 1\\\" class=\\\"need-to-know-enabled\\\">\\n                        <img :src=\\\"libsPath + 'dynicons/svg/emblem-readonly.svg'\\\" alt=\\\"\\\" style=\\\"width: 20px;margin-right:2px\\\"/>\\n                        &nbsp;<em>Need to Know enabled</em>\\n                    </div>\\n                </td>\\n                <td>\\n                    <input type=\\\"number\\\" @change=\\\"updateSort($event, form.categoryID)\\\"\\n                        :aria-labelledby=\\\"availability + '_sort'\\\"\\n                        :value=\\\"categories[form.categoryID].sort\\\" min=\\\"-128\\\" max=\\\"127\\\"\\n                        style=\\\"width: 100%; min-width:50px;\\\" />\\n                </td>\\n            </tr>\\n        </template>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/CategoryItem.js?");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/EditPropertiesPanel.js":
/*!****************************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/EditPropertiesPanel.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data: function data() {\n    var _this$focusedFormReco, _this$focusedFormReco2, _this$focusedFormReco3, _this$focusedFormReco4, _this$focusedFormReco5, _this$focusedFormReco6, _this$focusedFormReco7, _this$focusedFormReco8, _this$focusedFormReco9;\n    return {\n      categoryName: this.stripAndDecodeHTML((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.categoryName) || 'Untitled',\n      categoryDescription: this.stripAndDecodeHTML((_this$focusedFormReco2 = this.focusedFormRecord) === null || _this$focusedFormReco2 === void 0 ? void 0 : _this$focusedFormReco2.categoryDescription) || '',\n      workflowID: parseInt((_this$focusedFormReco3 = this.focusedFormRecord) === null || _this$focusedFormReco3 === void 0 ? void 0 : _this$focusedFormReco3.workflowID) || 0,\n      needToKnow: parseInt((_this$focusedFormReco4 = this.focusedFormRecord) === null || _this$focusedFormReco4 === void 0 ? void 0 : _this$focusedFormReco4.needToKnow) || 0,\n      visible: parseInt((_this$focusedFormReco5 = this.focusedFormRecord) === null || _this$focusedFormReco5 === void 0 ? void 0 : _this$focusedFormReco5.visible) || 0,\n      type: ((_this$focusedFormReco6 = this.focusedFormRecord) === null || _this$focusedFormReco6 === void 0 ? void 0 : _this$focusedFormReco6.type) || '',\n      formID: ((_this$focusedFormReco7 = this.focusedFormRecord) === null || _this$focusedFormReco7 === void 0 ? void 0 : _this$focusedFormReco7.categoryID) || '',\n      formParentID: ((_this$focusedFormReco8 = this.focusedFormRecord) === null || _this$focusedFormReco8 === void 0 ? void 0 : _this$focusedFormReco8.parentID) || '',\n      destructionAge: ((_this$focusedFormReco9 = this.focusedFormRecord) === null || _this$focusedFormReco9 === void 0 ? void 0 : _this$focusedFormReco9.destructionAge) || null,\n      lastUpdated: ''\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'workflowRecords', 'allStapledFormCatIDs', 'focusedFormRecord', 'focusedFormIsSensitive', 'updateCategoriesProperty', 'openEditCollaboratorsDialog', 'openFormHistoryDialog', 'showLastUpdate', 'truncateText', 'stripAndDecodeHTML'],\n  computed: {\n    workflowDescription: function workflowDescription() {\n      var _this = this;\n      var returnValue = '';\n      if (this.workflowID !== 0) {\n        var currWorkflow = this.workflowRecords.find(function (rec) {\n          return parseInt(rec.workflowID) === _this.workflowID;\n        });\n        returnValue = (currWorkflow === null || currWorkflow === void 0 ? void 0 : currWorkflow.description) || '';\n      }\n      return returnValue;\n    },\n    isSubForm: function isSubForm() {\n      return this.focusedFormRecord.parentID !== '';\n    },\n    isStaple: function isStaple() {\n      return this.allStapledFormCatIDs.includes(this.formID);\n    },\n    isNeedToKnow: function isNeedToKnow() {\n      return parseInt(this.focusedFormRecord.needToKnow) === 1;\n    },\n    formNameCharsRemaining: function formNameCharsRemaining() {\n      return 50 - this.categoryName.length;\n    },\n    formDescrCharsRemaining: function formDescrCharsRemaining() {\n      return 255 - this.categoryDescription.length;\n    }\n  },\n  methods: {\n    updateName: function updateName() {\n      var _this2 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formName\"),\n        data: {\n          name: this.categoryName,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          //except for WF and desctuctionAge, these give back an empty array\n          _this2.updateCategoriesProperty(_this2.formID, 'categoryName', _this2.categoryName);\n          _this2.lastUpdated = new Date().toLocaleString();\n          _this2.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this2.lastUpdated));\n        },\n        error: function error(err) {\n          return console.log('name post err', err);\n        }\n      });\n    },\n    updateDescription: function updateDescription() {\n      var _this3 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formDescription\"),\n        data: {\n          description: this.categoryDescription,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this3.updateCategoriesProperty(_this3.formID, 'categoryDescription', _this3.categoryDescription);\n          _this3.lastUpdated = new Date().toLocaleString();\n          _this3.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this3.lastUpdated));\n        },\n        error: function error(err) {\n          return console.log('form description post err', err);\n        }\n      });\n    },\n    updateWorkflow: function updateWorkflow() {\n      var _this4 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formWorkflow\"),\n        data: {\n          workflowID: this.workflowID,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success(res) {\n          if (res === false) {\n            //1 on success\n            alert('The workflow could not be set because this form is stapled to another form');\n          } else {\n            _this4.updateCategoriesProperty(_this4.formID, 'workflowID', _this4.workflowID);\n            _this4.updateCategoriesProperty(_this4.formID, 'workflowDescription', _this4.workflowDescription);\n            _this4.lastUpdated = new Date().toLocaleString();\n            _this4.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this4.lastUpdated));\n          }\n        },\n        error: function error(err) {\n          return console.log('workflow post err', err);\n        }\n      });\n    },\n    updateAvailability: function updateAvailability() {\n      var _this5 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formVisible\"),\n        data: {\n          visible: this.visible,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this5.updateCategoriesProperty(_this5.formID, 'visible', _this5.visible);\n          _this5.lastUpdated = new Date().toLocaleString();\n          _this5.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this5.lastUpdated));\n        },\n        error: function error(err) {\n          return console.log('visibility post err', err);\n        }\n      });\n    },\n    updateNeedToKnow: function updateNeedToKnow() {\n      var _this6 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formNeedToKnow\"),\n        data: {\n          needToKnow: this.needToKnow,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this6.updateCategoriesProperty(_this6.formID, 'needToKnow', _this6.needToKnow);\n          _this6.lastUpdated = new Date().toLocaleString();\n          _this6.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this6.lastUpdated));\n        },\n        error: function error(err) {\n          return console.log('ntk post err', err);\n        }\n      });\n    },\n    updateType: function updateType() {\n      var _this7 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/formType\"),\n        data: {\n          type: this.type,\n          categoryID: this.formID,\n          CSRFToken: this.CSRFToken\n        },\n        success: function success() {\n          _this7.updateCategoriesProperty(_this7.formID, 'type', _this7.type);\n          _this7.lastUpdated = new Date().toLocaleString();\n          _this7.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this7.lastUpdated));\n        },\n        error: function error(err) {\n          return console.log('type post err', err);\n        }\n      });\n    },\n    updateDestructionAge: function updateDestructionAge() {\n      var _this8 = this;\n      if (this.destructionAge === null || this.destructionAge >= 1 && this.destructionAge <= 30) {\n        $.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/destructionAge\"),\n          data: {\n            destructionAge: this.destructionAge,\n            categoryID: this.formID,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success(res) {\n            if (res === _this8.destructionAge) {\n              _this8.updateCategoriesProperty(_this8.formID, 'destructionAge', _this8.destructionAge);\n              _this8.lastUpdated = new Date().toLocaleString();\n              _this8.showLastUpdate('form_properties_last_update', \"last modified: \".concat(_this8.lastUpdated));\n            }\n          },\n          error: function error(err) {\n            return console.log('destruction age post err', err);\n          }\n        });\n      }\n    }\n  },\n  template: \"<div id=\\\"edit-properties-panel\\\">\\n        <span class=\\\"form-id\\\">{{formID}}\\n            <span v-if=\\\"formParentID\\\">(internal for {{formParentID}})</span>\\n        </span>\\n        <div id=\\\"edit-properties-description\\\">\\n            <label for=\\\"categoryName\\\">Form name\\n                <span style=\\\"margin-left:auto; font-size:80%; align-self:flex-end;\\\">({{formNameCharsRemaining}})</span>\\n            </label>\\n            <input id=\\\"categoryName\\\" type=\\\"text\\\" maxlength=\\\"50\\\" v-model=\\\"categoryName\\\" style=\\\"margin-bottom: 1rem;\\\" @change=\\\"updateName\\\"/>\\n            \\n            <label for=\\\"categoryDescription\\\">Form description\\n                <span style=\\\"margin-left:auto; font-size:80%; align-self:flex-end;\\\">({{formDescrCharsRemaining}})</span>\\n            </label>\\n            <textarea id=\\\"categoryDescription\\\" maxlength=\\\"255\\\" v-model=\\\"categoryDescription\\\" rows=\\\"3\\\" @change=\\\"updateDescription\\\"></textarea>\\n        </div>\\n        <div id=\\\"edit-properties-other-properties\\\">\\n            <div style=\\\"display:flex; justify-content: space-between;\\\">\\n                <button type=\\\"button\\\" id=\\\"editFormPermissions\\\" class=\\\"btn-general\\\"\\n                    style=\\\"width: fit-content;\\\"\\n                    @click=\\\"openEditCollaboratorsDialog\\\">\\n                    Edit Special Write Access\\n                </button>\\n                <button type=\\\"button\\\" id=\\\"form_properties_last_update\\\" @click.prevent=\\\"openFormHistoryDialog\\\"\\n                    :style=\\\"{display: lastUpdated==='' ? 'none' : 'flex'}\\\">\\n                </button>\\n            </div>\\n            <template v-if=\\\"!isSubForm\\\">\\n                <div class=\\\"panel-properties\\\">\\n                    <template v-if=\\\"!isStaple && workflowRecords.length > 0\\\">\\n                        <label for=\\\"workflowID\\\">Workflow\\n                        <select id=\\\"workflowID\\\" name=\\\"select-workflow\\\" @change=\\\"updateWorkflow\\\"\\n                            title=\\\"select workflow\\\"\\n                            v-model.number=\\\"workflowID\\\"\\n                            style=\\\"width:280px;\\\"\\n                            :style=\\\"{color: workflowID === 0 ? '#a00' : 'black'}\\\"\\n                            :disabled=\\\"isStaple\\\">\\n                            <option value=\\\"0\\\" :selected=\\\"workflowID === 0\\\">\\n                                No Workflow.  Users cannot submit requests\\n                            </option>\\n                            <template v-for=\\\"r in workflowRecords\\\" :key=\\\"'workflow_' + r.workflowID\\\">\\n                                <option v-if=\\\"parseInt(r.workflowID) > 0\\\"\\n                                    :value=\\\"r.workflowID\\\"\\n                                    :selected=\\\"workflowID === parseInt(r.workflowID)\\\">\\n                                    ID#{{r.workflowID}}: {{truncateText(r.description,32)}}\\n                                </option>\\n                            </template>\\n                        </select></label>\\n                    </template>\\n                    <div v-if=\\\"workflowRecords.length === 0\\\" style=\\\"color: #a00; width: 100%; margin-bottom: 0.5rem;\\\">A workflow must be set up first</div>\\n\\n                    <label for=\\\"availability\\\" title=\\\"When hidden, users will not be able to select this form\\\">Availability\\n                        <select id=\\\"availability\\\" title=\\\"Select Availability\\\" v-model.number=\\\"visible\\\" @change=\\\"updateAvailability\\\">\\n                            <option value=\\\"1\\\" :selected=\\\"visible === 1\\\">Available</option>\\n                            <option value=\\\"0\\\" :selected=\\\"visible === 0\\\">Hidden</option>\\n                        </select>\\n                    </label>\\n                    <label for=\\\"formType\\\">Form Type\\n                        <select id=\\\"formType\\\" title=\\\"Change type of form\\\" v-model=\\\"type\\\" @change=\\\"updateType\\\">\\n                            <option value=\\\"\\\" :selected=\\\"type === ''\\\">Standard</option>\\n                            <option value=\\\"parallel_processing\\\" :selected=\\\"type === 'parallel_processing'\\\">Parallel Processing</option>\\n                        </select>\\n                    </label>\\n                    <div style=\\\"display:flex; align-items: center; column-gap: 1rem;\\\">\\n                        <label for=\\\"destructionAgeYears\\\" title=\\\"Resolved requests that have reached this expiration date will be destroyed\\\" >Record Destruction Age (Years)\\n                            <select id=\\\"destructionAgeYears\\\" v-model=\\\"destructionAge\\\"\\n                                title=\\\"resolved request destruction age in years\\\" \\n                                @change=\\\"updateDestructionAge\\\">\\n                                <option :value=\\\"null\\\" :selected=\\\"destructionAge===null\\\">never</option>\\n                                <option v-for=\\\"i in 30\\\" :value=\\\"i\\\">{{i}}</option>\\n                            </select>\\n                        </label>\\n                    </div>\\n                    <div v-if=\\\"focusedFormIsSensitive\\\" style=\\\"display:flex; color: #a00;\\\">\\n                        <div style=\\\"display:flex; align-items: center;\\\"><b>Need to know: {{isNeedToKnow ? 'on' : 'off'}}</b></div> &nbsp;\\n                        <div style=\\\"display:flex; align-items: center; font-size:90%;\\\">(forced on because sensitive fields are present)</div>\\n                    </div>\\n                    <label v-else for=\\\"needToKnow\\\"\\n                        title=\\\"When turned on, the people associated with the workflow are the only ones who have access to view the form. \\nForced on if the form contains sensitive information.\\\">Need to know\\n                        <select id=\\\"needToKnow\\\" v-model.number=\\\"needToKnow\\\" :style=\\\"{color: isNeedToKnow ? '#a00' : 'black'}\\\" @change=\\\"updateNeedToKnow\\\">\\n                            <option value=\\\"0\\\" :selected=\\\"!isNeedToKnow\\\">Off</option>\\n                            <option value=\\\"1\\\" style=\\\"color: #a00;\\\" :selected=\\\"isNeedToKnow\\\">On</option>\\n                        </select>\\n                    </label>\\n                </div>\\n            </template>\\n            <div v-else style=\\\"margin-top: auto;\\\">This is an Internal Form</div>\\n        </div>\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/EditPropertiesPanel.js?");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormBrowser.js":
/*!********************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormBrowser.js ***!
  \********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _CategoryItem__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./CategoryItem */ \"./src/form_editor/components/form_editor_view/CategoryItem.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  data: function data() {\n    return {\n      test: 'test'\n    };\n  },\n  inject: ['appIsLoadingCategoryList', 'showCertificationStatus', 'activeForms', 'inactiveForms', 'supplementalForms'],\n  components: {\n    CategoryItem: _CategoryItem__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  },\n  template: \"<template v-if=\\\"appIsLoadingCategoryList === false\\\">\\n        <!-- secure form section -->\\n        <div v-if=\\\"showCertificationStatus\\\" id=\\\"secure_forms_info\\\" style=\\\"padding: 8px; background-color: #a00; margin-bottom:1em;\\\">\\n            <span id=\\\"secureStatus\\\" style=\\\"font-size: 120%; padding: 4px; color: white; font-weight: bold;\\\">LEAF-Secure Certified</span>\\n            <a id=\\\"secureBtn\\\" class=\\\"buttonNorm\\\">View Details</a>\\n        </div>\\n\\n        <!-- form browser tables -->\\n        <div id=\\\"form_browser_tables\\\">\\n            <h3>Active Forms:</h3>\\n            <table v-if=\\\"activeForms.length > 0\\\" id=\\\"active_forms\\\">\\n                <tr class=\\\"header-row\\\">\\n                    <th id=\\\"active_name\\\" style=\\\"width:250px\\\">Form Name</th>\\n                    <th style=\\\"width:400px\\\">Description</th>\\n                    <th style=\\\"width:250px\\\">Workflow</th>\\n                    <th style=\\\"width:125px\\\">Need to Know</th>\\n                    <th id=\\\"active_sort\\\" style=\\\"width:80px\\\">Priority</th>\\n                </tr>\\n                <category-item v-for=\\\"c in activeForms\\\" \\n                    :categories-record=\\\"c\\\" \\n                    availability=\\\"active\\\" \\n                    :key=\\\"'active_' + c.categoryID\\\">\\n                </category-item>\\n            </table>\\n            <p v-else style=\\\"margin-bottom: 2rem;\\\">No Active Forms</p>\\n\\n            <h3>Inactive Forms:</h3>\\n            <table v-if=\\\"inactiveForms.length > 0\\\" id=\\\"inactive_forms\\\">\\n                <tr class=\\\"header-row\\\">\\n                    <th id=\\\"inactive_name\\\" style=\\\"width:250px\\\">Form Name</th>\\n                    <th style=\\\"width:400px\\\">Description</th>\\n                    <th style=\\\"width:250px\\\">Workflow</th>\\n                    <th style=\\\"width:125px\\\">Need to Know</th>\\n                    <th id=\\\"inactive_sort\\\" style=\\\"width:80px\\\">Priority</th>\\n                </tr>\\n                <category-item v-for=\\\"c in inactiveForms\\\" \\n                    :categories-record=\\\"c\\\" \\n                    availability=\\\"inactive\\\" \\n                    :key=\\\"'inactive_' + c.categoryID\\\">\\n                </category-item>\\n            </table>\\n            <p v-else style=\\\"margin-bottom: 2rem;\\\">No Inctive Forms</p>\\n\\n            <h3>Supplemental Forms:</h3>\\n            <table v-if=\\\"supplementalForms.length > 0\\\" id=\\\"supplemental_forms\\\">\\n                <tr class=\\\"header-row\\\">\\n                    <th id=\\\"supplemental_name\\\" style=\\\"width:250px\\\">Form Name</th>\\n                    <th style=\\\"width:400px\\\">Description</th>\\n                    <th style=\\\"width:250px\\\">Staple Status</th>\\n                    <th style=\\\"width:125px\\\">Need to Know</th>\\n                    <th id=\\\"supplemental_sort\\\" style=\\\"width:80px\\\">Priority</th>\\n                </tr>\\n                <category-item v-for=\\\"c in supplementalForms\\\" \\n                    :categories-record=\\\"c\\\" \\n                    availability=\\\"supplemental\\\" \\n                    :key=\\\"'supplement_' + c.categoryID\\\">\\n                </category-item>\\n            </table>\\n            <p v-else style=\\\"margin-bottom: 2rem;\\\">No Supplemental Forms</p>\\n        </div>\\n    </template>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormBrowser.js?");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormEditingDisplay.js":
/*!***************************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormEditingDisplay.js ***!
  \***************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var _FormatPreview__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./FormatPreview */ \"./src/form_editor/components/form_editor_view/FormatPreview.js\");\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'FormEditingDisplay',\n  props: {\n    depth: Number,\n    formNode: Object,\n    index: Number\n  },\n  components: {\n    FormatPreview: _FormatPreview__WEBPACK_IMPORTED_MODULE_0__[\"default\"]\n  },\n  inject: ['libsPath', 'newQuestion', 'editQuestion', 'openAdvancedOptionsDialog', 'openIfThenDialog', 'listTracker', 'allowedConditionChildFormats', 'showToolbars', 'toggleToolbars', 'makePreviewKey'],\n  computed: {\n    isHeaderLocation: function isHeaderLocation() {\n      var ID = parseInt(this.formNode.indicatorID);\n      var item = this.listTracker[ID];\n      return (item === null || item === void 0 ? void 0 : item.parentID) === null || (item === null || item === void 0 ? void 0 : item.newParentID) === null;\n    },\n    sensitiveImg: function sensitiveImg() {\n      return this.sensitive ? \"<img src=\\\"\".concat(this.libsPath, \"dynicons/svg/eye_invisible.svg\\\"\\n                    style=\\\"width: 16px; margin-left: 4px;\\\" alt=\\\"\\\" class=\\\"sensitive-icon\\\"\\n                    title=\\\"This field is sensitive\\\" />\") : '';\n    },\n    conditionalQuestion: function conditionalQuestion() {\n      return !this.isHeaderLocation && this.formNode.conditions !== null && this.formNode.conditions !== '' & this.formNode.conditions !== 'null';\n    },\n    conditionsAllowed: function conditionsAllowed() {\n      var _this$formNode$format;\n      return !this.isHeaderLocation && this.allowedConditionChildFormats.includes((_this$formNode$format = this.formNode.format) === null || _this$formNode$format === void 0 ? void 0 : _this$formNode$format.toLowerCase());\n    },\n    indicatorName: function indicatorName() {\n      var contentRequired = this.required ? \"<span class=\\\"input-required-sensitive\\\">*&nbsp;Required</span>\" : '';\n      var contentSensitive = this.sensitive ? \"<span class=\\\"input-required-sensitive\\\">*&nbsp;Sensitive</span>\" : '';\n      var name = this.formNode.name.trim() !== '' ? this.formNode.name.trim() : '[ blank ]';\n      name = \"\".concat(name).concat(contentRequired).concat(contentSensitive, \"  &nbsp;\").concat(this.sensitiveImg);\n      return name;\n    },\n    indicatorFormat: function indicatorFormat() {\n      var _this$formNode;\n      return \"<span style=\\\"font-weight: normal; font-size: 90%; color:#404046;\\\">\".concat((_this$formNode = this.formNode) === null || _this$formNode === void 0 ? void 0 : _this$formNode.format, \"</span> \").concat(this.sensitiveImg);\n    },\n    printResponseID: function printResponseID() {\n      return \"xhrIndicator_\".concat(this.formNode.indicatorID, \"_\").concat(this.formNode.series);\n    },\n    required: function required() {\n      return parseInt(this.formNode.required) === 1;\n    },\n    sensitive: function sensitive() {\n      return parseInt(this.formNode.is_sensitive) === 1;\n    }\n  },\n  template: \"<div class=\\\"printResponse\\\" \\n            :class=\\\"{'form-header': isHeaderLocation}\\\"\\n            style=\\\"margin-bottom: 1rem;\\\"\\n            :id=\\\"printResponseID\\\">\\n\\n            <!-- EDITING AREA FOR INDICATOR -->\\n            <div class=\\\"form_editing_area\\\" style=\\\"display:flex\\\"\\n                :class=\\\"{'conditional': conditionalQuestion, 'form-header': isHeaderLocation}\\\">\\n\\n                <div style=\\\"width: 100%;\\\">\\n                    <!-- NAME -->\\n                    <div style=\\\"display:flex;\\\">\\n                        <button v-show=\\\"showToolbars\\\" type=\\\"button\\\" @click=\\\"editQuestion(parseInt(formNode.indicatorID))\\\"\\n                            class=\\\"icon\\\" :title=\\\"'edit indicator ' + formNode.indicatorID\\\" style=\\\"margin-top: 2px;\\\">\\n                            <img :src=\\\"libsPath + 'dynicons/svg/accessories-text-editor.svg'\\\" style=\\\"width: 20px\\\" alt=\\\"\\\" />\\n                        </button>\\n                        <div v-html=\\\"indicatorName\\\" @click=\\\"toggleToolbars($event, parseInt(formNode.indicatorID))\\\"\\n                        class=\\\"indicator-name-preview\\\" :id=\\\"formNode.indicatorID + '_format_label'\\\"></div>\\n                    </div>\\n                    <!-- FORMAT PREVIEW -->\\n                    <div v-if=\\\"formNode.format !== ''\\\" class=\\\"form_data_entry_preview\\\">\\n                        <format-preview :indicator=\\\"formNode\\\" :key=\\\"'FP_' + formNode.indicatorID\\\"></format-preview>\\n                    </div>\\n                </div>\\n                <!-- TOOLBAR -->\\n                <div v-show=\\\"showToolbars\\\"\\n                    :style=\\\"{backgroundColor: required ? '#eec8c8' : '#f2f2f5'}\\\"\\n                    :id=\\\"'form_editing_toolbar_' + formNode.indicatorID\\\"\\n                    :class=\\\"{'conditional': conditionalQuestion}\\\">\\n\\n                    <div v-html=\\\"indicatorFormat\\\" style=\\\"white-space:nowrap;\\\"></div>\\n\\n                    <div style=\\\"width:100%;\\\">\\n                        <div style=\\\"display:flex; align-items:center; margin-right: auto;\\\">\\n                            <img v-if=\\\"formNode.has_code\\\" tabindex=\\\"0\\\" title=\\\"advanced options are present\\\"\\n                            style=\\\"cursor:pointer; width: 20px;\\\" :src=\\\"libsPath + 'dynicons/svg/document-properties.svg'\\\" alt=\\\"advanced options are present\\\" />\\n                        </div>\\n                        <button v-if=\\\"conditionsAllowed\\\" type=\\\"button\\\" :id=\\\"'edit_conditions_' + formNode.indicatorID\\\" \\n                            @click=\\\"openIfThenDialog(parseInt(formNode.indicatorID), formNode.name.trim())\\\" \\n                            :title=\\\"'Edit conditions for ' + formNode.indicatorID\\\" class=\\\"icon\\\">\\n                            <img :src=\\\"libsPath + 'dynicons/svg/preferences-system.svg'\\\" style=\\\"width: 20px\\\" alt=\\\"\\\" />\\n                        </button>\\n                        <button type=\\\"button\\\" @click=\\\"openAdvancedOptionsDialog(parseInt(formNode.indicatorID))\\\"\\n                            title=\\\"Open Advanced Options\\\" class=\\\"icon\\\">\\n                            <img :src=\\\"libsPath + 'dynicons/svg/emblem-system.svg'\\\" style=\\\"width: 20px\\\" alt=\\\"\\\" />\\n                        </button>\\n                    </div>\\n                    <button type=\\\"button\\\" class=\\\"btn-general add-subquestion\\\" \\n                        :title=\\\"isHeaderLocation ? 'Add question to section' : 'Add sub-question'\\\"\\n                        @click=\\\"newQuestion(formNode.indicatorID)\\\">\\n                        + {{isHeaderLocation ? 'Add question to section' : 'Add sub-question'}}\\n                    </button>\\n                </div>\\n            </div>\\n\\n            <!-- NOTE: RECURSIVE SUBQUESTIONS -->\\n            <template v-if=\\\"formNode.child\\\">\\n                <form-editing-display v-for=\\\"child in formNode.child\\\"\\n                    :depth=\\\"depth + 1\\\"\\n                    :formNode=\\\"child\\\"\\n                    :key=\\\"'FED_' + child.indicatorID + makePreviewKey(child)\\\">\\n                </form-editing-display>\\n            </template>\\n        </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormEditingDisplay.js?");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormIndexListing.js":
/*!*************************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormIndexListing.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'FormIndexListing',\n  data: function data() {\n    return {\n      subMenuOpen: false\n    };\n  },\n  props: {\n    depth: Number,\n    formNode: Object,\n    index: Number,\n    parentID: Number\n  },\n  inject: ['truncateText', 'clearListItem', 'addToListTracker', 'selectNewFormNode', 'selectedNodeIndicatorID', 'startDrag', 'onDragEnter', 'onDragLeave', 'onDrop', 'moveListing'],\n  mounted: function mounted() {\n    //each list item is added to the array on parent component, to track indicatorID, parentID, sort and current index values\n    this.addToListTracker(this.formNode, this.parentID, this.index);\n    if (this.selectedNodeIndicatorID !== null && this.selectedNodeIndicatorID === this.formNode.indicatorID) {\n      var el = document.getElementById(\"index_listing_\".concat(this.selectedNodeIndicatorID));\n      if (el !== null) {\n        var headingEl = el.closest('li.section_heading');\n        var elsMenu = Array.from((headingEl === null || headingEl === void 0 ? void 0 : headingEl.querySelectorAll(\"li .sub-menu-chevron.closed\")) || []);\n        elsMenu.forEach(function (el) {\n          return el.click();\n        });\n        el.classList.add('index-selected');\n      }\n    }\n  },\n  beforeUnmount: function beforeUnmount() {\n    this.clearListItem(this.formNode.indicatorID);\n  },\n  methods: {\n    indexHover: function indexHover() {\n      var _event$currentTarget;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      event === null || event === void 0 ? void 0 : (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.classList.add('index-selected');\n    },\n    indexHoverOff: function indexHoverOff() {\n      var _event$currentTarget2;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      event === null || event === void 0 ? void 0 : (_event$currentTarget2 = event.currentTarget) === null || _event$currentTarget2 === void 0 ? void 0 : _event$currentTarget2.classList.remove('index-selected');\n    },\n    toggleSubMenu: function toggleSubMenu() {\n      var _event$currentTarget$;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if ((event === null || event === void 0 ? void 0 : event.keyCode) === 32) event.preventDefault();\n      this.subMenuOpen = !this.subMenuOpen;\n      (_event$currentTarget$ = event.currentTarget.closest('li')) === null || _event$currentTarget$ === void 0 ? void 0 : _event$currentTarget$.focus();\n    }\n  },\n  computed: {\n    headingNumber: function headingNumber() {\n      return this.depth === 0 ? this.index + 1 + '.' : '';\n    },\n    hasConditions: function hasConditions() {\n      return this.depth !== 0 && this.formNode.conditions !== null && this.formNode.conditions !== '' && this.formNode.conditions !== 'null';\n    },\n    //NOTE: Uses globally available XSSHelpers.js (LEAF class)\n    indexDisplay: function indexDisplay() {\n      //if the indicator has a short label (description), display that, otherwise display the name. Show 'blank' if it has neither\n      var display = this.formNode.description ? XSSHelpers.stripAllTags(this.formNode.description) : XSSHelpers.stripAllTags(this.formNode.name);\n      return XSSHelpers.decodeHTMLEntities(this.truncateText(display)) || '[ blank ]';\n    },\n    suffix: function suffix() {\n      return \"\".concat(this.formNode.indicatorID, \"_\").concat(this.formNode.series);\n    },\n    required: function required() {\n      return parseInt(this.formNode.required) === 1;\n    },\n    isEmpty: function isEmpty() {\n      return this.formNode.isEmpty === true;\n    }\n  },\n  template: \"\\n        <li tabindex=0 :title=\\\"'index item '+ formNode.indicatorID\\\"\\n            :class=\\\"depth === 0 ? 'section_heading' : 'subindicator_heading'\\\"\\n            @mouseover.stop=\\\"indexHover\\\" @mouseout.stop=\\\"indexHoverOff\\\"\\n            @click.stop=\\\"selectNewFormNode($event, formNode)\\\"\\n            @keypress.enter.stop=\\\"selectNewFormNode($event, formNode)\\\">\\n            <div>\\n                <span v-if=\\\"hasConditions\\\" title=\\\"question is conditionally shown\\\">\\u2192</span>\\n                {{headingNumber}}&nbsp;{{indexDisplay}}\\n                <div class=\\\"icon_move_container\\\">\\n                    <div v-show=\\\"formNode.indicatorID === selectedNodeIndicatorID\\\" \\n                        tabindex=\\\"0\\\" class=\\\"icon_move up\\\" role=\\\"button\\\" title=\\\"move item up\\\"\\n                        @click.stop=\\\"moveListing($event, selectedNodeIndicatorID, true)\\\"\\n                        @keydown.stop.enter.space=\\\"moveListing($event, selectedNodeIndicatorID, true)\\\">\\n                    </div>\\n                    <div v-show=\\\"formNode.indicatorID === selectedNodeIndicatorID\\\"\\n                        tabindex=\\\"0\\\" class=\\\"icon_move down\\\" role=\\\"button\\\" title=\\\"move item down\\\"\\n                        @click.stop=\\\"moveListing($event, selectedNodeIndicatorID, false)\\\"\\n                        @keydown.stop.enter.space=\\\"moveListing($event, selectedNodeIndicatorID, false)\\\">\\n                    </div>\\n                </div>\\n                <div v-if=\\\"formNode.child\\\" tabindex=\\\"0\\\" class=\\\"sub-menu-chevron\\\" :class=\\\"{closed: !subMenuOpen}\\\"\\n                    @click.stop=\\\"toggleSubMenu($event)\\\"\\n                    @keydown.stop.enter.space=\\\"toggleSubMenu($event)\\\">\\n                    <span v-show=\\\"subMenuOpen\\\" role=\\\"img\\\" aria=\\\"\\\">\\u25BE</span>\\n                    <span v-show=\\\"!subMenuOpen\\\" role=\\\"img\\\" aria=\\\"\\\">\\u25B8</span>\\n                </div>\\n            </div>\\n            \\n            <!-- NOTE: RECURSIVE SUBQUESTIONS. ul for each for drop zones -->\\n            <ul class=\\\"form-index-listing-ul\\\" :id=\\\"'drop_area_parent_'+ formNode.indicatorID\\\"\\n                data-effect-allowed=\\\"move\\\"\\n                @drop.stop=\\\"onDrop\\\"\\n                @dragover.prevent\\n                @dragenter.prevent=\\\"onDragEnter\\\"\\n                @dragleave=\\\"onDragLeave\\\">\\n\\n                <template v-if=\\\"formNode.child\\\">\\n                    <form-index-listing v-show=\\\"subMenuOpen\\\" v-for=\\\"(child, k, i) in formNode.child\\\"\\n                        :id=\\\"'index_listing_' + child.indicatorID\\\"\\n                        :depth=\\\"depth + 1\\\"\\n                        :parentID=\\\"formNode.indicatorID\\\"\\n                        :formNode=\\\"child\\\"\\n                        :index=\\\"i\\\"\\n                        :key=\\\"'index_list_item_' + child.indicatorID\\\"\\n                        draggable=\\\"true\\\"\\n                        @dragstart.stop=\\\"startDrag\\\"> \\n                    </form-index-listing>\\n                </template>\\n            </ul>\\n        </li>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormIndexListing.js?");

/***/ }),

/***/ "./src/form_editor/components/form_editor_view/FormatPreview.js":
/*!**********************************************************************!*\
  !*** ./src/form_editor/components/form_editor_view/FormatPreview.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  props: {\n    indicator: Object\n  },\n  inject: ['libsPath', 'initializeOrgSelector', 'orgchartFormats', 'stripAndDecodeHTML'],\n  computed: {\n    truncatedOptions: function truncatedOptions() {\n      var _this$indicator$optio;\n      return ((_this$indicator$optio = this.indicator.options) === null || _this$indicator$optio === void 0 ? void 0 : _this$indicator$optio.slice(0, 6)) || [];\n    },\n    baseFormat: function baseFormat() {\n      var _this$indicator$forma, _this$indicator$forma2;\n      return ((_this$indicator$forma = this.indicator.format) === null || _this$indicator$forma === void 0 ? void 0 : (_this$indicator$forma2 = _this$indicator$forma.toLowerCase()) === null || _this$indicator$forma2 === void 0 ? void 0 : _this$indicator$forma2.trim()) || '';\n    },\n    defaultValue: function defaultValue() {\n      var _this$indicator;\n      return ((_this$indicator = this.indicator) === null || _this$indicator === void 0 ? void 0 : _this$indicator[\"default\"]) || '';\n    },\n    strippedDefault: function strippedDefault() {\n      return this.stripAndDecodeHTML(this.defaultValue);\n    },\n    inputElID: function inputElID() {\n      return \"input_preview_\".concat(this.indicator.indicatorID);\n    },\n    selType: function selType() {\n      return this.baseFormat.slice(this.baseFormat.indexOf('_') + 1);\n    },\n    labelSelector: function labelSelector() {\n      return this.indicator.indicatorID + '_format_label';\n    },\n    printResponseID: function printResponseID() {\n      return \"xhrIndicator_\".concat(this.indicator.indicatorID, \"_\").concat(this.indicator.series);\n    },\n    gridOptions: function gridOptions() {\n      var _this$indicator2;\n      //NOTE: uses LEAF global XSSHelpers\n      var options = JSON.parse(((_this$indicator2 = this.indicator) === null || _this$indicator2 === void 0 ? void 0 : _this$indicator2.options) || '[]');\n      options.map(function (o) {\n        o.name = XSSHelpers.stripAllTags(o.name);\n        if (o !== null && o !== void 0 && o.options) {\n          o.options.map(function (ele) {\n            return ele = XSSHelpers.stripAllTags(ele);\n          });\n        }\n      });\n      return options;\n    }\n  },\n  mounted: function mounted() {\n    var _this = this,\n      _document$getElementB,\n      _document$getElementB2,\n      _document$querySelect,\n      _document$getElementB3;\n    switch (this.baseFormat.toLowerCase()) {\n      case 'raw_data':\n        break;\n      case 'date':\n        $(\"#\".concat(this.inputElID)).datepicker({\n          autoHide: true,\n          showAnim: \"slideDown\",\n          onSelect: function onSelect() {\n            $('#' + _this.indicator.indicatorID + '_focusfix').focus();\n          }\n        });\n        (_document$getElementB = document.getElementById(this.inputElID)) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n      case 'dropdown':\n        $(\"#\".concat(this.inputElID)).chosen({\n          disable_search_threshold: 5,\n          allow_single_deselect: true,\n          width: '50%'\n        });\n        $(\"#\".concat(this.inputElID, \"_chosen input.chosen-search-input\")).attr('aria-labelledby', this.labelSelector);\n        break;\n      case 'multiselect':\n        var elSelect = document.getElementById(this.inputElID);\n        if (elSelect !== null && elSelect.multiple === true && (elSelect === null || elSelect === void 0 ? void 0 : elSelect.getAttribute('data-choice')) !== 'active') {\n          var options = this.indicator.options || [];\n          options = options.map(function (o) {\n            return {\n              value: o,\n              label: o,\n              selected: _this.strippedDefault !== '' && _this.strippedDefault === o\n            };\n          });\n          var choices = new Choices(elSelect, {\n            allowHTML: false,\n            removeItemButton: true,\n            editItems: true,\n            choices: options.filter(function (o) {\n              return o.value !== \"\";\n            })\n          });\n          elSelect.choicesjs = choices;\n        }\n        $(\"#\".concat(this.inputElID, \" ~ input.choices__input\")).attr('aria-labelledby', this.labelSelector);\n        break;\n      case 'orgchart_group':\n      case 'orgchart_position':\n      case 'orgchart_employee':\n        this.initializeOrgSelector(this.selType, this.indicator.indicatorID);\n        this.updateOrgselectorPreview();\n        break;\n      case 'checkbox':\n        (_document$getElementB2 = document.getElementById(this.inputElID + '_check0')) === null || _document$getElementB2 === void 0 ? void 0 : _document$getElementB2.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n      case 'checkboxes':\n      case 'radio':\n        (_document$querySelect = document.querySelector(\"#\".concat(this.printResponseID, \" .format-preview\"))) === null || _document$querySelect === void 0 ? void 0 : _document$querySelect.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n      default:\n        (_document$getElementB3 = document.getElementById(this.inputElID)) === null || _document$getElementB3 === void 0 ? void 0 : _document$getElementB3.setAttribute('aria-labelledby', this.labelSelector);\n        break;\n    }\n  },\n  methods: {\n    useAdvancedEditor: function useAdvancedEditor() {\n      $('#' + this.inputElID).trumbowyg({\n        btns: ['bold', 'italic', 'underline', '|', 'unorderedList', 'orderedList', '|', 'justifyLeft', 'justifyCenter', 'justifyRight', 'fullscreen']\n      });\n      $(\"#textarea_format_button_\".concat(this.indicator.indicatorID)).css('display', 'none');\n    },\n    updateOrgselectorPreview: function updateOrgselectorPreview() {\n      var _this$indicator3;\n      if ((_this$indicator3 = this.indicator) !== null && _this$indicator3 !== void 0 && _this$indicator3[\"default\"]) {\n        var _this$indicator4, _this$indicator5;\n        document.querySelector(\"#orgSel_\".concat(this.indicator.indicatorID, \" input\")).value = this.selType === 'group' ? \"group#\".concat((_this$indicator4 = this.indicator) === null || _this$indicator4 === void 0 ? void 0 : _this$indicator4[\"default\"]) : \"#\".concat((_this$indicator5 = this.indicator) === null || _this$indicator5 === void 0 ? void 0 : _this$indicator5[\"default\"]);\n      }\n    }\n  },\n  template: \"<div class=\\\"format-preview\\\">\\n        <input v-if=\\\"baseFormat === 'text'\\\" :id=\\\"inputElID\\\" type=\\\"text\\\" :value=\\\"strippedDefault\\\" class=\\\"text_input_preview\\\"/>\\n        <input v-if=\\\"baseFormat === 'number'\\\" :id=\\\"inputElID\\\" type=\\\"number\\\" :value=\\\"strippedDefault\\\" class=\\\"text_input_preview\\\"/>\\n\\n        <template v-if=\\\"baseFormat === 'currency'\\\">\\n            $&nbsp;<input :id=\\\"inputElID\\\" type=\\\"number\\\" :value=\\\"strippedDefault\\\"\\n            min=\\\"0.00\\\" step=\\\"0.01\\\" class=\\\"text_input_preview\\\"/>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'textarea'\\\">\\n            <textarea :id=\\\"inputElID\\\" rows=\\\"6\\\" class=\\\"textarea_input_preview\\\" :value=\\\"strippedDefault\\\"></textarea>\\n            <div :id=\\\"'textarea_format_button_' + indicator.indicatorID\\\"\\n                @click=\\\"useAdvancedEditor\\\" \\n                style=\\\"text-align: right; font-size: 12px\\\"><span class=\\\"link\\\">formatting options</span>\\n            </div>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'radio'\\\">\\n            <template v-for=\\\"o, i in truncatedOptions\\\" :key=\\\"'radio_prev_' + indicator.indicatorID + '_' + i\\\">\\n                <label class=\\\"checkable leaf_check\\\" :for=\\\"inputElID + '_radio' + i\\\">\\n                    <input type=\\\"radio\\\" :id=\\\"inputElID + '_radio' + i\\\" \\n                    :name=\\\"indicator.indicatorID\\\" class=\\\"icheck leaf_check\\\"\\n                    :checked=\\\"strippedDefault !== '' && strippedDefault === o\\\" />\\n                    <span class=\\\"leaf_check\\\"></span>{{ o }}\\n                </label>\\n            </template>\\n            <div v-if=\\\"indicator?.options?.length > 5\\\" style=\\\"padding-left: 0.4em\\\"><b> ...</b></div>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'checkboxes' || baseFormat === 'checkbox'\\\">\\n            <template v-for=\\\"o, i in truncatedOptions\\\" :key=\\\"'check_prev_' + indicator.indicatorID + '_' + i\\\">\\n                <label class=\\\"checkable leaf_check\\\" :for=\\\"inputElID + '_check' + i\\\">\\n                    <input type=\\\"checkbox\\\" :id=\\\"inputElID + '_check' + i\\\" :name=\\\"indicator.indicatorID\\\" class=\\\"icheck leaf_check\\\"  :checked=\\\"strippedDefault !== '' && strippedDefault === o\\\" />\\n                    <span class=\\\"leaf_check\\\"></span>{{ o }}\\n                </label>\\n            </template>\\n            <div v-if=\\\"indicator?.options?.length > 5\\\" style=\\\"padding-left: 0.4em\\\"><b> ...</b></div>\\n        </template>\\n        \\n        <fieldset v-if=\\\"baseFormat === 'fileupload' || baseFormat === 'image'\\\" \\n            style=\\\"padding: 0.5em;\\\"><legend>File Attachment(s)</legend>\\n            <p style=\\\"margin-bottom: 0.5em;\\\">Select File to attach:</p>\\n            <input :id=\\\"inputElID\\\" name=\\\"formPacket\\\" type=\\\"file\\\" />\\n        </fieldset>\\n\\n        <template v-if=\\\"baseFormat === 'date'\\\">\\n            <input type=\\\"text\\\" :id=\\\"inputElID\\\"\\n            :style=\\\"'background: white url(' + libsPath + 'dynicons/svg/office-calendar.svg) no-repeat 4px center; background-size: 16px;'\\\"\\n            style=\\\"padding-left: 24px; font-size: 1.3em; font-family: monospace;\\\" :value=\\\"indicator.default\\\" />\\n        </template>\\n\\n        <select v-if=\\\"baseFormat === 'dropdown'\\\" :id=\\\"inputElID\\\" style=\\\"width: 50%\\\" :value=\\\"strippedDefault\\\">\\n            <option v-for=\\\"o, i in truncatedOptions\\\" :key=\\\"'drop_prev_' + indicator.indicatorID + '_' + i\\\">\\n            {{o}}\\n            </option>\\n            <option v-if=\\\"indicator?.options?.length > 5\\\" style=\\\"padding-left: 0.4em\\\" disabled>(preview showing first 5)</option>\\n        </select>\\n        \\n        <select v-if=\\\"baseFormat === 'multiselect'\\\" multiple \\n            :id=\\\"inputElID\\\">\\n            :name=\\\"'multi_prev_' + indicator.indicatorID + '_multiselect[]'\\\"\\n            style=\\\"display:none\\\">\\n        </select>\\n        \\n        <template v-if=\\\"orgchartFormats.includes(baseFormat)\\\">\\n            <div :id=\\\"'orgSel_' + indicator.indicatorID\\\" style=\\\"min-height:30px\\\"></div>\\n        </template>\\n\\n        <template v-if=\\\"baseFormat === 'grid'\\\">\\n            <div class=\\\"tableinput\\\">\\n                <table class=\\\"table\\\" :id=\\\"'grid_' + indicator.indicatorID + '_' + indicator.series + '_input'\\\"\\n                    style=\\\"word-wrap: break-word; table-layout: fixed; height: 100%; display: table\\\">\\n\\n                    <thead :id=\\\"'gridTableHead_' + indicator.indicatorID\\\">\\n                        <tr>\\n                            <td v-for=\\\"o in gridOptions\\\" :key=\\\"'grid_head_' + o.name\\\">{{ o.name }}</td>\\n                        </tr>\\n                    </thead>\\n                    <tbody :id=\\\"'gridTableBody_' + indicator.indicatorID\\\">\\n                        <tr>\\n                            <td v-for=\\\"o in gridOptions\\\" style=\\\"min-width: 150px;\\\" :key=\\\"'grid_body_' + o.name\\\">\\n                                <input v-if=\\\"o.type === 'text'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\" />\\n                                <textarea v-if=\\\"o.type === 'textarea'\\\" rows=\\\"3\\\" style=\\\"resize:none; width: 100%;\\\" :aria-label=\\\"o.name\\\"></textarea>\\n                                <input type=\\\"date\\\" v-if=\\\"o.type === 'date'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\" />\\n                                <select v-if=\\\"o.type === 'dropdown'\\\" style=\\\"width: 100%;\\\" :aria-label=\\\"o.name\\\">\\n                                    <option v-for=\\\"option in o.options\\\" :key=\\\"'grid_drop_' + option\\\">{{option}}</option>\\n                                </select>\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n            </div>\\n        </template>\\n\\n    </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/components/form_editor_view/FormatPreview.js?");

/***/ }),

/***/ "./src/form_editor/views/FormEditorView.js":
/*!*************************************************!*\
  !*** ./src/form_editor/views/FormEditorView.js ***!
  \*************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm-bundler.js\");\n/* harmony import */ var _components_form_editor_view_FormBrowser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../components/form_editor_view/FormBrowser.js */ \"./src/form_editor/components/form_editor_view/FormBrowser.js\");\n/* harmony import */ var _components_form_editor_view_FormEditingDisplay_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../components/form_editor_view/FormEditingDisplay.js */ \"./src/form_editor/components/form_editor_view/FormEditingDisplay.js\");\n/* harmony import */ var _components_form_editor_view_FormIndexListing_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../components/form_editor_view/FormIndexListing.js */ \"./src/form_editor/components/form_editor_view/FormIndexListing.js\");\n/* harmony import */ var _components_form_editor_view_EditPropertiesPanel_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../components/form_editor_view/EditPropertiesPanel.js */ \"./src/form_editor/components/form_editor_view/EditPropertiesPanel.js\");\nfunction _typeof(obj) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && \"function\" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }, _typeof(obj); }\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(arg) { var key = _toPrimitive(arg, \"string\"); return _typeof(key) === \"symbol\" ? key : String(key); }\nfunction _toPrimitive(input, hint) { if (_typeof(input) !== \"object\" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || \"default\"); if (_typeof(res) !== \"object\") return res; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (hint === \"string\" ? String : Number)(input); }\n\n\n\n\n\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'form-editor-view',\n  data: function data() {\n    return {\n      dragLI_Prefix: 'index_listing_',\n      dragUL_Prefix: 'drop_area_parent_',\n      listTracker: {},\n      //{indID:{parID, newParID, sort, listindex,},}. for tracking parID and sort changes\n      allowedConditionChildFormats: ['dropdown', 'text', 'multiselect', 'radio', 'checkboxes'],\n      showToolbars: true,\n      sortOffset: 128,\n      //number to subtract from listindex when comparing sort value to curr list index, and when posting new sort value\n      sortLastUpdated: '',\n      updateKey: 0\n    };\n  },\n  components: {\n    FormEditingDisplay: _components_form_editor_view_FormEditingDisplay_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    FormIndexListing: _components_form_editor_view_FormIndexListing_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    EditPropertiesPanel: _components_form_editor_view_EditPropertiesPanel_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    FormBrowser: _components_form_editor_view_FormBrowser_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"]\n  },\n  inject: ['APIroot', 'CSRFToken', 'libsPath', 'setDefaultAjaxResponseMessage', 'appIsLoadingCategoryList', 'appIsLoadingForm', 'categories', 'internalFormRecords', 'selectedNodeIndicatorID', 'selectedFormNode', 'getFormByCategoryID', 'showLastUpdate', 'openFormHistoryDialog', 'newQuestion', 'editQuestion', 'focusedFormRecord', 'focusedFormTree', 'openNewFormDialog', 'currentFormCollection', 'stripAndDecodeHTML', 'truncateText'],\n  mounted: function mounted() {\n    //console.log('MOUNTED FORM EDITOR VIEW');\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.setDefaultAjaxResponseMessage();\n    });\n  },\n  provide: function provide() {\n    var _this = this;\n    return {\n      listTracker: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.listTracker;\n      }),\n      showToolbars: (0,vue__WEBPACK_IMPORTED_MODULE_0__.computed)(function () {\n        return _this.showToolbars;\n      }),\n      clearListItem: this.clearListItem,\n      addToListTracker: this.addToListTracker,\n      allowedConditionChildFormats: this.allowedConditionChildFormats,\n      startDrag: this.startDrag,\n      onDragEnter: this.onDragEnter,\n      onDragLeave: this.onDragLeave,\n      onDrop: this.onDrop,\n      moveListing: this.moveListing,\n      toggleToolbars: this.toggleToolbars,\n      makePreviewKey: this.makePreviewKey\n    };\n  },\n  computed: {\n    focusedFormID: function focusedFormID() {\n      var _this$focusedFormReco;\n      return ((_this$focusedFormReco = this.focusedFormRecord) === null || _this$focusedFormReco === void 0 ? void 0 : _this$focusedFormReco.categoryID) || '';\n    },\n    currentSectionNumber: function currentSectionNumber() {\n      var _this$selectedFormNod;\n      var indID = parseInt((_this$selectedFormNod = this.selectedFormNode) === null || _this$selectedFormNod === void 0 ? void 0 : _this$selectedFormNod.indicatorID);\n      var elHeaderItems = Array.from(document.querySelectorAll('#base_drop_area > li'));\n      var elThisItem = document.getElementById(\"index_listing_\".concat(indID));\n      var index = elHeaderItems.indexOf(elThisItem);\n      return index === -1 ? '' : index + 1;\n    },\n    sortOrParentChanged: function sortOrParentChanged() {\n      return this.sortValuesToUpdate.length > 0 || this.parentIDsToUpdate.length > 0;\n    },\n    sortValuesToUpdate: function sortValuesToUpdate() {\n      var indsToUpdate = [];\n      for (var i in this.listTracker) {\n        if (this.listTracker[i].sort !== this.listTracker[i].listIndex - this.sortOffset) {\n          indsToUpdate.push(_objectSpread({\n            indicatorID: parseInt(i)\n          }, this.listTracker[i]));\n        }\n      }\n      return indsToUpdate;\n    },\n    parentIDsToUpdate: function parentIDsToUpdate() {\n      var indsToUpdate = [];\n      //headers have null as their parentID, so newParentID is initialized with ''\n      for (var i in this.listTracker) {\n        if (this.listTracker[i].newParentID !== '' && this.listTracker[i].parentID !== this.listTracker[i].newParentID) {\n          indsToUpdate.push(_objectSpread({\n            indicatorID: parseInt(i)\n          }, this.listTracker[i]));\n        }\n      }\n      return indsToUpdate;\n    },\n    indexHeaderText: function indexHeaderText() {\n      var text = '';\n      if (this.focusedFormRecord.parentID !== '') {\n        text = 'Internal Form';\n      } else {\n        text = this.currentFormCollection.length > 1 ? 'Form Layout' : 'Primary Form';\n      }\n      return text;\n    }\n  },\n  methods: {\n    forceUpdate: function forceUpdate() {\n      this.updateKey += 1;\n    },\n    /**\n     * moves an item in the Form Index via the buttons that appear when the item is selected\n     * @param {Object} event \n     * @param {number} indID of the list item to move\n     * @param {boolean} moveup click/enter moves the item up (false moves it down)\n     */\n    moveListing: function moveListing() {\n      var _event$currentTarget,\n        _this2 = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var indID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var moveup = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      if ((event === null || event === void 0 ? void 0 : event.keyCode) === 32) event.preventDefault();\n      var parentEl = event === null || event === void 0 ? void 0 : (_event$currentTarget = event.currentTarget) === null || _event$currentTarget === void 0 ? void 0 : _event$currentTarget.closest('ul');\n      var elToMove = document.getElementById(\"index_listing_\".concat(indID));\n      var oldElsLI = Array.from(document.querySelectorAll(\"#\".concat(parentEl.id, \" > li\")));\n      var newElsLI = oldElsLI.filter(function (li) {\n        return li !== elToMove;\n      });\n      var listitem = this.listTracker[indID];\n      if (moveup) {\n        if (listitem.listIndex > 0) {\n          var _event$currentTarget2;\n          newElsLI.splice(listitem.listIndex - 1, 0, elToMove);\n          oldElsLI.forEach(function (li) {\n            return parentEl.removeChild(li);\n          });\n          newElsLI.forEach(function (li, i) {\n            var liIndID = parseInt(li.id.replace('index_listing_', ''));\n            parentEl.appendChild(li);\n            _this2.listTracker[liIndID].listIndex = i;\n          });\n          event === null || event === void 0 ? void 0 : (_event$currentTarget2 = event.currentTarget) === null || _event$currentTarget2 === void 0 ? void 0 : _event$currentTarget2.focus();\n        }\n      } else {\n        if (listitem.listIndex < oldElsLI.length - 1) {\n          var _event$currentTarget3;\n          newElsLI.splice(listitem.listIndex + 1, 0, elToMove);\n          oldElsLI.forEach(function (li) {\n            return parentEl.removeChild(li);\n          });\n          newElsLI.forEach(function (li, i) {\n            var liIndID = parseInt(li.id.replace('index_listing_', ''));\n            parentEl.appendChild(li);\n            _this2.listTracker[liIndID].listIndex = i;\n          });\n          event === null || event === void 0 ? void 0 : (_event$currentTarget3 = event.currentTarget) === null || _event$currentTarget3 === void 0 ? void 0 : _event$currentTarget3.focus();\n        }\n      }\n    },\n    /**\n     * posts sort and parentID values\n     */\n    applySortAndParentID_Updates: function applySortAndParentID_Updates() {\n      var _this3 = this;\n      var updateSort = [];\n      if (this.sortValuesToUpdate.length > 0) {\n        var sortData = [];\n        this.sortValuesToUpdate.forEach(function (item) {\n          sortData.push({\n            indicatorID: item.indicatorID,\n            sort: item.listIndex - _this3.sortOffset\n          });\n        });\n        updateSort.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(this.APIroot, \"formEditor/sort/batch\"),\n          data: {\n            sortData: sortData,\n            CSRFToken: this.CSRFToken\n          },\n          success: function success() {},\n          //returns array of updates, [{ indicatorID, sort },]\n          error: function error(err) {\n            return console.log('ind sort post err', err);\n          }\n        }));\n      }\n      var updateParentID = [];\n      this.parentIDsToUpdate.forEach(function (item) {\n        updateParentID.push($.ajax({\n          type: 'POST',\n          url: \"\".concat(_this3.APIroot, \"formEditor/\").concat(item.indicatorID, \"/parentID\"),\n          data: {\n            parentID: item.newParentID,\n            CSRFToken: _this3.CSRFToken\n          },\n          success: function success() {},\n          //returns null\n          error: function error(err) {\n            return console.log('ind parentID post err', err);\n          }\n        }));\n      });\n      var all = updateSort.concat(updateParentID);\n      Promise.all(all).then(function (res) {\n        if (res.length > 0) {\n          _this3.getFormByCategoryID(_this3.focusedFormID, _this3.selectedNodeIndicatorID).then(function () {\n            _this3.sortLastUpdated = new Date().toLocaleString();\n            _this3.showLastUpdate('form_index_last_update', \"last modified: \".concat(_this3.sortLastUpdated));\n            _this3.forceUpdate();\n          })[\"catch\"](function (err) {\n            return console.log(err);\n          });\n        }\n      })[\"catch\"](function (err) {\n        return console.log('an error has occurred', err);\n      });\n    },\n    /**\n     * adds initial sort and parentID values to app list tracker\n     * @param {number} indID remove a record from the tracker\n     */\n    clearListItem: function clearListItem() {\n      var indID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      if (this.listTracker[indID]) {\n        delete this.listTracker[indID];\n      }\n    },\n    /**\n     * adds initial sort and parentID values to app list tracker\n     * @param {Object} formNode from the Form Index listing\n     * @param {number|null} parentID parent ID of the index listing (null for form sections)\n     * @param {number} listIndex current index for that depth in the form index\n     */\n    addToListTracker: function addToListTracker() {\n      var formNode = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var parentID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      var listIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var indicatorID = formNode.indicatorID,\n        sort = formNode.sort;\n      var item = {\n        sort: sort,\n        parentID: parentID,\n        listIndex: listIndex,\n        newParentID: ''\n      };\n      this.listTracker[indicatorID] = item;\n    },\n    /**\n     * updates the listIndex and newParentID values for a specific indicator in listtracker when moved via the Form Index\n     * @param {number} indID \n     * @param {number|null} newParIndID null for form Sections\n     * @param {number} listIndex\n     */\n    updateListTracker: function updateListTracker() {\n      var indID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var newParIndID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n      var listIndex = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var item = _objectSpread({}, this.listTracker[indID]);\n      item.listIndex = listIndex;\n      item.newParentID = newParIndID;\n      this.listTracker[indID] = item;\n    },\n    startDrag: function startDrag() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (event !== null && event !== void 0 && event.dataTransfer) {\n        event.dataTransfer.dropEffect = 'move';\n        event.dataTransfer.effectAllowed = 'move';\n        event.dataTransfer.setData('text/plain', event.target.id);\n      }\n    },\n    onDrop: function onDrop() {\n      var _this4 = this;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (event !== null && event !== void 0 && event.dataTransfer && event.dataTransfer.effectAllowed === 'move') {\n        event.preventDefault();\n        var draggedElID = event.dataTransfer.getData('text');\n        var parentEl = event.currentTarget; //drop event is on the parent ul\n\n        var indID = parseInt(draggedElID.replace(this.dragLI_Prefix, ''));\n        var formParIndID = parentEl.id === \"base_drop_area\" ? null : parseInt(parentEl.id.replace(this.dragUL_Prefix, ''));\n        var elsLI = Array.from(document.querySelectorAll(\"#\".concat(parentEl.id, \" > li\")));\n        if (elsLI.length === 0) {\n          //if the drop ul has no lis, just append it\n          try {\n            parentEl.append(document.getElementById(draggedElID));\n            this.updateListTracker(indID, formParIndID, 0);\n            //TODO: not certain if needed - old parent list updates? (it would just batch on the next load otherwise)\n          } catch (error) {\n            console.log(error);\n          }\n        } else {\n          //otherwise, find the closest li to the droppoint to insert before\n          var dist = 9999;\n          var closestLI_id = null;\n          elsLI.forEach(function (el) {\n            var newDist = el.getBoundingClientRect().top - event.clientY;\n            if (el.id !== draggedElID && newDist > 0 && newDist < dist) {\n              dist = newDist;\n              closestLI_id = el.id;\n            }\n          });\n          try {\n            if (closestLI_id !== null) {\n              parentEl.insertBefore(document.getElementById(draggedElID), document.getElementById(closestLI_id));\n            } else {\n              //it's at the end of the list\n              parentEl.append(document.getElementById(draggedElID));\n            }\n            //check the new indexes\n            var newElsLI = Array.from(document.querySelectorAll(\"#\".concat(parentEl.id, \" > li\")));\n            newElsLI.forEach(function (li, i) {\n              var indID = parseInt(li.id.replace(_this4.dragLI_Prefix, ''));\n              _this4.updateListTracker(indID, formParIndID, i);\n            });\n          } catch (error) {\n            console.log(error);\n          }\n        }\n        if (parentEl.classList.contains('entered-drop-zone')) {\n          event.target.classList.remove('entered-drop-zone');\n        }\n      }\n    },\n    /**\n     * \n     * @param {Object} event removes the drop zone hilite if target is ul\n     */\n    onDragLeave: function onDragLeave() {\n      var _event$target;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (event !== null && event !== void 0 && (_event$target = event.target) !== null && _event$target !== void 0 && _event$target.classList.contains('form-index-listing-ul')) {\n        event.target.classList.remove('entered-drop-zone');\n      }\n    },\n    /**\n     * \n     * @param {Object} event adds the drop zone hilite if target is ul\n     */\n    onDragEnter: function onDragEnter() {\n      var _event$target2;\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      if (event !== null && event !== void 0 && event.dataTransfer && event.dataTransfer.effectAllowed === 'move' && event !== null && event !== void 0 && (_event$target2 = event.target) !== null && _event$target2 !== void 0 && _event$target2.classList.contains('form-index-listing-ul')) {\n        event.target.classList.add('entered-drop-zone');\n      }\n    },\n    toggleToolbars: function toggleToolbars() {\n      var event = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var indicatorID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n      event === null || event === void 0 ? void 0 : event.stopPropagation();\n      if ((event === null || event === void 0 ? void 0 : event.keyCode) === 32) event.preventDefault();\n      if (event.currentTarget.classList.contains('indicator-name-preview')) {\n        if (!this.showToolbars) {\n          var id = event.currentTarget.id;\n          var initialTop = event.currentTarget.getBoundingClientRect().top;\n          this.showToolbars = true;\n          setTimeout(function () {\n            var finalTop = document.getElementById(id).getBoundingClientRect().top;\n            window.scrollBy(0, finalTop - initialTop);\n          });\n        } else {\n          if (indicatorID) {\n            this.editQuestion(indicatorID);\n          }\n        }\n      } else {\n        this.showToolbars = !this.showToolbars;\n      }\n    },\n    /**\n     * //NOTE: uses XSSHelpers.js\n     * @param {string} categoryID \n     * @param {number} len \n     * @returns \n     */\n    shortFormNameStripped: function shortFormNameStripped() {\n      var catID = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      var len = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 21;\n      var form = this.categories[catID] || '';\n      var name = this.stripAndDecodeHTML((form === null || form === void 0 ? void 0 : form.categoryName) || '') || 'Untitled';\n      return this.truncateText(name, len).trim();\n    },\n    layoutBtnIsDisabled: function layoutBtnIsDisabled(form) {\n      return form.categoryID === this.focusedFormRecord.categoryID && this.selectedFormNode === null;\n    },\n    makePreviewKey: function makePreviewKey(node) {\n      var _node$options;\n      return \"\".concat(node.format).concat((node === null || node === void 0 ? void 0 : (_node$options = node.options) === null || _node$options === void 0 ? void 0 : _node$options.join()) || '', \"_\").concat((node === null || node === void 0 ? void 0 : node[\"default\"]) || '');\n    }\n  },\n  watch: {\n    sortOrParentChanged: function sortOrParentChanged(newVal, oldVal) {\n      if (newVal === true) {\n        this.applySortAndParentID_Updates();\n      }\n    }\n  },\n  template: \"<div id=\\\"formEditor_content\\\">\\n    <div v-if=\\\"appIsLoadingForm || appIsLoadingCategoryList\\\" style=\\\"border: 2px solid black; text-align: center; \\n        font-size: 24px; font-weight: bold; padding: 16px;\\\">\\n        Loading... \\n        <img src=\\\"../images/largespinner.gif\\\" alt=\\\"loading...\\\" />\\n    </div>\\n\\n    <template v-else>\\n        <FormBrowser v-if=\\\"focusedFormID===''\\\"></FormBrowser>\\n\\n        <template v-else>\\n            <!-- TOP INFO PANEL -->\\n            <edit-properties-panel :key=\\\"'panel_' + focusedFormID\\\"></edit-properties-panel>\\n\\n            <div id=\\\"form_index_and_editing\\\">\\n                <!-- FORM INDEX -->\\n                <div id=\\\"form_index_display\\\">\\n                    <div style=\\\"display:flex; align-items: center; justify-content: space-between; height: 28px; margin-bottom: 0.5rem;\\\">\\n                        <h3 style=\\\"margin: 0; color: black;\\\">{{ indexHeaderText }}</h3>\\n                        <img v-if=\\\"currentFormCollection.length > 1\\\" \\n                            :src=\\\"libsPath + 'dynicons/svg/emblem-notice.svg'\\\"\\n                            style=\\\"width: 16px; margin-left: 0.25rem; margin-right:auto;\\\" \\n                            title=\\\"Details for the selected form are shown below\\\" alt=\\\"\\\" />\\n                        <button type=\\\"button\\\" id=\\\"form_index_last_update\\\" @click.prevent=\\\"openFormHistoryDialog\\\"\\n                            :style=\\\"{display: sortLastUpdated==='' ? 'none' : 'flex'}\\\">\\n                        </button>\\n                    </div>\\n                    <!-- FORM LAYOUT OVERVIEW -->\\n                    <div v-if=\\\"currentFormCollection.length > 1\\\" :id=\\\"'layoutFormRecords_' + $route.query.formID\\\">\\n                        <ul>\\n                            <li v-for=\\\"form in currentFormCollection\\\" :key=\\\"'form_layout_item_' + form.categoryID\\\" draggable=\\\"false\\\">\\n                                <button type=\\\"button\\\" @click=\\\"getFormByCategoryID(form.categoryID)\\\"\\n                                    class=\\\"layout-listitem\\\" :disabled=\\\"layoutBtnIsDisabled(form)\\\"\\n                                    :title=\\\"'form ' + form.categoryID\\\">\\n                                    <span :style=\\\"{textDecoration: layoutBtnIsDisabled(form) ? 'none' : 'underline'}\\\">\\n                                        {{shortFormNameStripped(form.categoryID, 38)}}&nbsp;\\n                                    </span>\\n                                    <span v-if=\\\"form.formContextType === 'staple'\\\" role=\\\"img\\\" aria=\\\"\\\">\\uD83D\\uDCCC</span>\\n                                    <em v-show=\\\"form.categoryID === focusedFormID\\\" style=\\\"font-weight: normal; text-decoration: none;\\\">\\n                                        (selected)\\n                                    </em>\\n                                    <em v-show=\\\"form.categoryID === focusedFormRecord.parentID\\\" style=\\\"font-weight: normal; text-decoration: none;\\\">\\n                                        (parent)\\n                                    </em>\\n                                </button>\\n                                <!-- focused drop zone for collection -->\\n                                <ul v-if=\\\"form.categoryID === focusedFormID && focusedFormTree.length > 0\\\"\\n                                    id=\\\"base_drop_area\\\" :key=\\\"'drop_zone_collection_' + form.categoryID + '_' + updateKey\\\"\\n                                    class=\\\"form-index-listing-ul\\\"\\n                                    data-effect-allowed=\\\"move\\\"\\n                                    @drop.stop=\\\"onDrop\\\"\\n                                    @dragover.prevent\\n                                    @dragenter.prevent=\\\"onDragEnter\\\"\\n                                    @dragleave=\\\"onDragLeave\\\">\\n\\n                                    <form-index-listing v-for=\\\"(formSection, i) in focusedFormTree\\\"\\n                                        :id=\\\"'index_listing_'+formSection.indicatorID\\\"\\n                                        :depth=0\\n                                        :formNode=\\\"formSection\\\"\\n                                        :index=i\\n                                        :parentID=null\\n                                        :key=\\\"'index_list_item_' + formSection.indicatorID\\\"\\n                                        draggable=\\\"true\\\"\\n                                        @dragstart.stop=\\\"startDrag\\\">\\n                                    </form-index-listing>\\n                                </ul>\\n                            </li>\\n                        </ul>\\n                    </div>\\n                    <!-- focused drop zone for single form -->\\n                    <template v-else>\\n                        <ul v-if=\\\"focusedFormTree.length > 0\\\"\\n                            id=\\\"base_drop_area\\\" :key=\\\"'drop_zone_primary' + updateKey\\\"\\n                            class=\\\"form-index-listing-ul\\\"\\n                            data-effect-allowed=\\\"move\\\"\\n                            @drop.stop=\\\"onDrop\\\"\\n                            @dragover.prevent\\n                            @dragenter.prevent=\\\"onDragEnter\\\"\\n                            @dragleave=\\\"onDragLeave\\\">\\n\\n                            <form-index-listing v-for=\\\"(formSection, i) in focusedFormTree\\\"\\n                                :id=\\\"'index_listing_'+formSection.indicatorID\\\"\\n                                :depth=0\\n                                :formNode=\\\"formSection\\\"\\n                                :index=i\\n                                :parentID=null\\n                                :key=\\\"'index_list_item_' + formSection.indicatorID\\\"\\n                                draggable=\\\"true\\\"\\n                                @dragstart.stop=\\\"startDrag\\\">\\n                            </form-index-listing>\\n                        </ul>\\n                    </template>\\n\\n                    <div style=\\\"margin: 0.5rem 0 0 0\\\">\\n                        <button type=\\\"button\\\" class=\\\"btn-general\\\" style=\\\"width: 100%\\\" \\n                            @click=\\\"newQuestion(null)\\\"\\n                            id=\\\"add_new_form_section\\\"\\n                            title=\\\"Add new form section\\\">\\n                            + Add Section\\n                        </button>\\n                    </div>\\n                    <!-- INTERNAL FORMS SECTION -->\\n                    <div v-if=\\\"focusedFormRecord?.parentID === '' && focusedFormTree.length > 0\\\"\\n                        :id=\\\"'internalFormRecords_' + focusedFormID\\\"  style=\\\"margin-top: 0.5rem;\\\">\\n                        <ul>\\n                            <li>\\n                                <button type=\\\"button\\\" id=\\\"addInternalUse\\\" @click=\\\"openNewFormDialog($event, focusedFormRecord.categoryID)\\\"\\n                                    title=\\\"New Internal-Use Form\\\" style=\\\"color: black;\\\">\\n                                    Add Internal-Use&nbsp;<span role=\\\"img\\\" aria=\\\"\\\">\\u2795</span>\\n                                </button>\\n                            </li>\\n                            <li v-for=\\\"i in internalFormRecords\\\" :key=\\\"'internal_' + i.categoryID\\\">\\n                                <button @click=\\\"getFormByCategoryID(i.categoryID)\\\">\\n                                    <span class=\\\"internal\\\">\\n                                        {{shortFormNameStripped(i.categoryID, 45)}}\\n                                    </span>\\n                                </button>\\n                            </li>\\n                        </ul>\\n                    </div>\\n                </div>\\n\\n                <!-- NOTE: FORM EDITING AND ENTRY PREVIEW -->\\n                <template v-if=\\\"focusedFormTree.length > 0\\\">\\n                    <!-- ENTIRE FORM EDIT / PREVIEW -->\\n                    <div v-if=\\\"selectedFormNode === null\\\" id=\\\"form_entry_and_preview\\\">\\n                        <div class=\\\"form-section-header\\\" style=\\\"display: flex;\\\">\\n                            <h3 style=\\\"margin: 0; color: black;\\\">Form Editing and Preview</h3>\\n                            <button type=\\\"button\\\" id=\\\"indicator_toolbar_toggle\\\" class=\\\"btn-general\\\"\\n                                @click.stop=\\\"toggleToolbars($event)\\\">\\n                                {{showToolbars ? 'Preview This Section' : 'Edit This Section'}}\\n                            </button>\\n                        </div>\\n                        <template v-for=\\\"(formSection, i) in focusedFormTree\\\" :key=\\\"'editing_display_' + formSection.indicatorID\\\">\\n                            <div class=\\\"printformblock\\\">\\n                                <form-editing-display \\n                                    :depth=\\\"0\\\"\\n                                    :formNode=\\\"formSection\\\"\\n                                    :index=\\\"i\\\"\\n                                    :key=\\\"'FED_' + formSection.indicatorID + makePreviewKey(formSection)\\\">\\n                                </form-editing-display>\\n                            </div>\\n                        </template>\\n                    </div>\\n                    <!-- SUBSECTION EDIT / PREVIEW -->\\n                    <div v-else id=\\\"form_entry_and_preview\\\">\\n                        <div class=\\\"form-section-header\\\" style=\\\"display: flex;\\\">\\n                            <h3 style=\\\"margin: 0; color: black;\\\">Form {{currentSectionNumber !== '' ? 'Page ' + currentSectionNumber : 'Selection'}}</h3>\\n                            <button type=\\\"button\\\" id=\\\"indicator_toolbar_toggle\\\" class=\\\"btn-general\\\"\\n                                @click.stop=\\\"toggleToolbars($event)\\\">\\n                                {{showToolbars ? 'Preview This Section' : 'Edit This Section'}}\\n                            </button>\\n                        </div>\\n                        <div class=\\\"printformblock\\\">\\n                            <form-editing-display \\n                                :depth=\\\"0\\\"\\n                                :formNode=\\\"selectedFormNode\\\"\\n                                :index=\\\"-1\\\"\\n                                :key=\\\"'FED_' + selectedFormNode.indicatorID + makePreviewKey(selectedFormNode)\\\">\\n                            </form-editing-display>\\n                        </div>\\n                    </div>\\n                </template>\\n            </div>\\n        </template>\\n    </template>\\n</div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/views/FormEditorView.js?");

/***/ })

}]);