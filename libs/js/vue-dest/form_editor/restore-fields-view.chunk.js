"use strict";
/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunkleaf_vue"] = self["webpackChunkleaf_vue"] || []).push([["form_editor/restore-fields-view"],{

/***/ "./src/form_editor/views/RestoreFieldsView.js":
/*!****************************************************!*\
  !*** ./src/form_editor/views/RestoreFieldsView.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n  name: 'restore-fields-view',\n  data: function data() {\n    return {\n      disabledFields: null\n    };\n  },\n  inject: ['APIroot', 'CSRFToken', 'selectNewCategory', 'setDefaultAjaxResponseMessage'],\n  /**\n   * get all disabled or archived indicators for indID > 0 and update app disabledFields (array)\n   */\n  beforeMount: function beforeMount() {\n    var _this = this;\n    $.ajax({\n      type: 'GET',\n      url: \"\".concat(this.APIroot, \"form/indicator/list/disabled\"),\n      success: function success(res) {\n        _this.disabledFields = res.filter(function (obj) {\n          return parseInt(obj.indicatorID) > 0;\n        });\n      },\n      error: function error(err) {\n        return console.log(err);\n      },\n      cache: false\n    });\n  },\n  beforeRouteEnter: function beforeRouteEnter(to, from, next) {\n    next(function (vm) {\n      vm.selectNewCategory(); //update during more signif refactor of restorefields view - for now this prevents menu issues\n      vm.setDefaultAjaxResponseMessage();\n    });\n  },\n  methods: {\n    /**\n     * \n     * @param {number} indicatorID \n     */\n    restoreField: function restoreField(indicatorID) {\n      var _this2 = this;\n      $.ajax({\n        type: 'POST',\n        url: \"\".concat(this.APIroot, \"formEditor/\").concat(indicatorID, \"/disabled\"),\n        data: {\n          CSRFToken: CSRFToken,\n          disabled: 0\n        },\n        success: function success() {\n          _this2.disabledFields = _this2.disabledFields.filter(function (f) {\n            return parseInt(f.indicatorID) !== indicatorID;\n          });\n          alert('The field has been restored.');\n        },\n        error: function error(err) {\n          return console.log(err);\n        }\n      });\n    }\n  },\n  template: \"<div>\\n            <h3 style=\\\"margin: 0;\\\">List of disabled fields available for recovery</h3>\\n            <div>Deleted fields and associated data will be not display in the Report Builder</div>\\n            <div>\\n                <table v-if=\\\"disabledFields !== null\\\" class=\\\"usa-table leaf-whitespace-normal\\\">\\n                    <thead>\\n                        <tr>\\n                            <th>indicatorID</th>\\n                            <th>Form</th>\\n                            <th>Field Name</th>\\n                            <th>Input Format</th>\\n                            <th>Status</th>\\n                            <th>Restore</th>\\n                        </tr>\\n                    </thead>\\n                    <tbody id=\\\"fields\\\">\\n                        <tr v-for=\\\"f in disabledFields\\\" key=\\\"f.indicatorID\\\">\\n                            <td>{{ f.indicatorID }}</td>\\n                            <td>{{ f.categoryName }}</td>\\n                            <td>{{ f.name }}</td>\\n                            <td>{{ f.format }}</td>\\n                            <td>{{ f.disabled }}</td>\\n                            <td><button class=\\\"btn-general\\\" \\n                                @click=\\\"restoreField(parseInt(f.indicatorID))\\\">\\n                                Restore this field</button>\\n                            </td>\\n                        </tr>\\n                    </tbody>\\n                </table>\\n                <p v-else>Loading ...</p>\\n            </div>\\n        </div>\"\n});\n\n//# sourceURL=webpack://leaf_vue/./src/form_editor/views/RestoreFieldsView.js?");

/***/ })

}]);