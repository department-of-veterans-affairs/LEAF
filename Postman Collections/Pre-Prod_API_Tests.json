{
	"info": {
		"_postman_id": "0f46832f-6cb3-4dff-8150-55d06ea69a82",
		"name": "LEAF API PreProd",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "PP Portal - Base URL",
			"id": "25acef8d-a0ec-4986-aa8f-9cc9291b5613",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/"
			},
			"response": []
		},
		{
			"name": "PP - Form Trial & Error (Currently Categories) Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "9ec3efbf-24ef-416a-9a5a-593f62d6cce7",
						"exec": [
							"pm.test(\"Form-Categories.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r",
							"    console.log(catIDs);\r",
							"    pm.variables.set('catIDs', catIDs); //2nd catIDs is the var defined on line 3 - Only works in collection runner\r",
							"    \r",
							"\r",
							"//6:05 in vid\r",
							"    //pm.expect(jsonData.categoryID).to.eql(\"form_8bfe8\");\r",
							"//    pm.expect(catIDs.categoryID).to.eql(\"form_8bfe8\");\r",
							"\r",
							" //var jsonData = pm.response.json();\r",
							" //   console.log(jsonData.response);   \r",
							" //   pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");\r",
							"});\r",
							"\r",
							"/* \r",
							"His POST data to insert\r",
							"\"toolID\": 4643\r",
							"\r",
							"This ID then appears in a GET request\r",
							"\r",
							"const toolIDs = response.map(tool => tool.id);\r",
							"console.log(toolIDs);\r",
							"\r",
							"Valid CategoryID(s)\r",
							"0: \"form_854b7\"\r",
							"1: \"form_1542d\"\r",
							"2: \"form_8bfe8\"\r",
							"3: \"form_8aded\"\r",
							"4: \"form_e73f1\"\r",
							"5: \"form_945a0\"\r",
							"6: \"form_24f22\"\r",
							"7: \"form_55af0\"\r",
							"8: \"form_af5a3\"\r",
							"9: \"form_354e4\"\r",
							"10: \"form_66e4e\"\r",
							"\r",
							"\r",
							"*/\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"/* \r",
							"pm.test(\"Form-Categories.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.response);   \r",
							"    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r",
							"});\r",
							"*/\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"/*\r",
							"// saving the API Response as a variable\r",
							"let response = pm.response.json();\r",
							"\r",
							"// looping through each camera object\r",
							"response.data.ActiveCamera.forEach(function(cam) {\r",
							"    // checking if the camera has a property named \"RectilinearIR\"\r",
							"    if(cam.hasOwnProperty(\"RectilinearIR\")) {\r",
							"        // test if the ImageCenterX value in the object is equal to 0.5\r",
							"        pm.test(\"Test diameter for RectilinearIR\", function () {\r",
							"            let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r",
							"            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r",
							"        });\r",
							"    } \r",
							"    // checking if the camera has a property named \"Fisheye\"\r",
							"    if (cam.hasOwnProperty(\"Fisheye\")) {\r",
							"        // test if the ImageCenterX value in the object is equal to 0.5109375\r",
							"            pm.test(\"Test diameter for Fisheye\", function () {\r",
							"            let intrinsicCalibrationParams = cam.Fisheye.IntrinsicCalibration;\r",
							"            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5109375);\r",
							"        });\r",
							"    }\r",
							"});\r",
							"*/\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"//    \"categoryID\": \"form_11e07\",\r",
							"//    \"categoryName\": \"AUT (Copy)\"\r",
							"/*\r",
							"pm.test(\"Response time is less than limit\", function() {\r",
							"var limit = 10;\r",
							"pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r",
							"console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"});\r",
							"\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "16791558-61f5-4372-966a-20efc18141e8",
						"exec": [
							"//For POST request\r",
							"//const catIDs = pm.variables.get('catIDs');\r",
							"//pm.variables.set('currentCatID', catIDs.shift());    //get first element/Id in array and return it. Can put in _\r",
							"                                                     //array or modify original array (catIDs)\r",
							"        //Then set as a Global ID in Body\r",
							"\r",
							"\r",
							"/* \r",
							"const random = Math.random().toString(36).substring(2);\r",
							"const formCategories = \"formCategories \" + random;\r",
							"pm.collectionVariables.set(\"formCategories\", formCategories);\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "db31033e-226e-4fb5-ba34-abf0b9d628a7",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"categoryID\": {{currentCatID}},\r\n    \"categoryName\": \"PM API Test\"\r\n}\r\n\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "{{PreProd_URL}}/form/categories"
			},
			"response": []
		},
		{
			"name": "X PP Portal - Form Get Specific Form",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f30972a-6ff0-4e18-8f75-a2c07e40378a",
						"exec": [
							"pm.test(\"form/workflow - Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);  //Test for 200 OK\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f0e4b040-f1eb-4600-a7c5-2a8ba960dd28",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "{{PreProd_URL}}/categories/category&id='_form_a0c0f'"
			},
			"response": []
		},
		{
			"name": "PP - Forms",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f211c6f6-517d-47d4-9606-9a5eb5cdbb2e",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "aab58cd9-0ec4-4c39-a80b-ef6722282534",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "{{PreProd_URL}}/form/"
			},
			"response": []
		},
		{
			"name": "PP Portal - Form Categories",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f1e2e9ba-99d9-445d-810d-1c288935aa2c",
						"exec": [
							"\r",
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.categoryID);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(\"form_a0c0f\");  //    //form_854b7\r",
							"\r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "07a54ba3-1c1a-4e2b-bc59-36e549f16ebf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/categories"
			},
			"response": []
		},
		{
			"name": "PP - FIX Form Indicators Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c57ea32b-2a69-4e4a-a2c3-644fa0144d1d",
						"exec": [
							"pm.test(\"Form-Categories.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"JSON Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r",
							"    console.log(catIDs);\r",
							"    pm.variables.set('catIDs', catIDs); //2nd catIDs is the var defined on line 3 - Only works in collection runner\r",
							"});\r",
							"\r",
							"/* \r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.response);   \r",
							"    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r",
							"});\r",
							"*/\r",
							"\r",
							"\r",
							"\r",
							"//    \"categoryID\": \"form_11e07\",\r",
							"//    \"categoryName\": \"AUT (Copy)\"\r",
							"/*\r",
							"pm.test(\"Response time is less than limit\", function() {\r",
							"var limit = 10;\r",
							"pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r",
							"console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"});\r",
							"\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "94ef5633-60b5-466e-a324-38ce91df8460",
						"exec": [
							"/* const random = Math.random().toString(36).substring(2);\r",
							"const formCategories = \"formCategories \" + random;\r",
							"pm.collectionVariables.set(\"formCategories\", formCategories);\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "abc40f2a-d609-4a1d-a444-36b06db4d893",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"categoryID\": \"form_11e07\",\r\n    \"categoryName\": \"AUT (Copy)\"   \r\n}\r\n\r\nFOR POST REQUESTS",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://localhost/LEAF_Request_Portal/api/form/categories"
			},
			"response": []
		},
		{
			"name": "Local - FIX Create Form",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "f211c6f6-517d-47d4-9606-9a5eb5cdbb2e",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "fe299bb9-d9a4-4fec-b49e-c36056509f8a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"formID\": \"form_12307\",\r\n    \"requestData\": \"Test Form\"   \r\n}"
				},
				"url": {
					"raw": "https://leaf-preprod.va.gov/Academy/Demo1/api/new?formID=_form_12334&requestData=Test Request",
					"protocol": "https",
					"host": [
						"leaf-preprod",
						"va",
						"gov"
					],
					"path": [
						"Academy",
						"Demo1",
						"api",
						"new"
					],
					"query": [
						{
							"key": "formID",
							"value": "_form_12334"
						},
						{
							"key": "requestData",
							"value": "Test Request"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "PP Portal - Form Trial & Error",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "e624e4f8-8190-4965-997b-46a9e7d95089",
						"exec": [
							"pm.test(\"form/workflow - Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200))"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "f3557a1a-a33f-471f-b770-eba9e56a312d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/"
			},
			"response": []
		},
		{
			"name": "PP - FIX Form Indicators Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "c57ea32b-2a69-4e4a-a2c3-644fa0144d1d",
						"exec": [
							"pm.test(\"Form-Categories.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"JSON Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r",
							"    console.log(catIDs);\r",
							"    pm.variables.set('catIDs', catIDs); //2nd catIDs is the var defined on line 3 - Only works in collection runner\r",
							"});\r",
							"\r",
							"/* \r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    console.log(jsonData.response);   \r",
							"    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r",
							"});\r",
							"*/\r",
							"\r",
							"\r",
							"\r",
							"//    \"categoryID\": \"form_11e07\",\r",
							"//    \"categoryName\": \"AUT (Copy)\"\r",
							"/*\r",
							"pm.test(\"Response time is less than limit\", function() {\r",
							"var limit = 10;\r",
							"pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r",
							"console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r",
							"});\r",
							"\r",
							"*/"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "94ef5633-60b5-466e-a324-38ce91df8460",
						"exec": [
							"/* const random = Math.random().toString(36).substring(2);\r",
							"const formCategories = \"formCategories \" + random;\r",
							"pm.collectionVariables.set(\"formCategories\", formCategories);\r",
							"*/"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "67a4a9ea-1469-44c5-a0e8-820be34e55f1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{  \r\n    \"categoryID\": \"form_11e07\",\r\n    \"categoryName\": \"AUT (Copy)\"   \r\n}\r\n\r\nFOR POST REQUESTS",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/categories"
			},
			"response": []
		},
		{
			"name": "PP Portal - Workflow",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "39e8c2b4-f25f-4ce9-a5db-2e652aff448f",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.workflowID);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(70);  //    //form_854b7\r",
							"\r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "298514d6-d0b0-41a7-b91b-7fbdfd9559d4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/workflow"
			},
			"response": []
		},
		{
			"name": "PP Portal - Workflow userActions",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "d7e4bdfd-10c9-44f7-9de3-1e6dee67b99f",
						"exec": [
							"\r",
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.actionType);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(\"AcceptJob\");  //    //form_854b7\r",
							"\r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "01143b96-e4aa-456f-867d-2df3f188c5bf",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/workflow/userActions"
			},
			"response": []
		},
		{
			"name": "PP - TESTING",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2beb1a-4de9-477e-8265-51764d22069c",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"//pm.test(\"Contains expected value\", function () {\r",
							"//    const response = pm.response.json();\r",
							"//    const jsonIDs = response.map(jsonID => jsonID.2096);      //jsonIDs is the array containing IDs\r",
							"//    //console.log(jsonIDs);\r",
							"//    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"//    console.log(jsonIDs);\r",
							"\r",
							"//    let currentJsonID = jsonIDs.shift();\r",
							"//    console.log(currentJsonID);\r",
							"//    pm.expect(currentJsonID).to.eql(\"1\");  \r",
							"//});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a110cde0-86fc-443a-adf2-a94d5a187e52",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/"
			},
			"response": []
		},
		{
			"name": "PP - Form Get Specific Form Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2beb1a-4de9-477e-8265-51764d22069c",
						"exec": [
							"pm.test(\"Form-getSpecific Form.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200))"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c946375a-9dc0-4bbb-b9e7-26009e425cd3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/_form_d203e"
			},
			"response": []
		},
		{
			"name": "PP - Form Get Specific Form - Flat",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2beb1a-4de9-477e-8265-51764d22069c",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.2096);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(\"1\");  \r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "0b83699d-aa83-4934-934e-365da140035f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/_form_00882/flat"
			},
			"response": []
		},
		{
			"name": "PP - Form Get Specific Form - Export",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2beb1a-4de9-477e-8265-51764d22069c",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.2096);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(\"1\");  \r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "73ea360c-96c8-496c-99a9-26bf75aaf0a3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/_form_00882/export"
			},
			"response": []
		},
		{
			"name": "PP - Form Get Specific Form - Workflow",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2beb1a-4de9-477e-8265-51764d22069c",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.2096);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(\"1\");  \r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "c8496bc5-4918-44d1-9c45-03f5a5770f1e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/_form_00882/workflow"
			},
			"response": []
		},
		{
			"name": "PP - Form Get Specific Form Record - RecordInfo",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "7b2beb1a-4de9-477e-8265-51764d22069c",
						"exec": [
							"pm.test(\"Form-getAPI-URL.  Status = 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var time = pm.response.responseTime;\r",
							"\r",
							"pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r",
							"\r",
							"\r",
							"pm.test(\"Contains expected value\", function () {\r",
							"    const response = pm.response.json();\r",
							"    const jsonIDs = response.map(jsonID => jsonID.2096);      //jsonIDs is the array containing IDs\r",
							"    //console.log(jsonIDs);\r",
							"    pm.variables.set('jsonIDs', jsonIDs); //Creates a variable or updates an existing one.\r",
							"                                        //2nd jsonIDs is the var defined on line 3 - Only works in collection runner\r",
							"    console.log(jsonIDs);\r",
							"\r",
							"    let currentJsonID = jsonIDs.shift();\r",
							"    console.log(currentJsonID);\r",
							"    pm.expect(currentJsonID).to.eql(\"1\");  \r",
							"});\r",
							"\r",
							"  "
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "a24d3c29-c114-4454-8770-9c7139dc351d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true,
				"disabledSystemHeaders": {}
			},
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "CSRFToken",
						"value": "{{CSRFToken}}",
						"type": "text",
						"disabled": true
					}
				],
				"url": "https://leaf-preprod.va.gov/Academy/Demo1/api/form/50/recordinfo"
			},
			"response": []
		}
	],
	"auth": {
		"type": "ntlm",
		"ntlm": {}
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "596dc701-8eda-426c-a874-6e54e8778c40",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "289da744-98a8-47c4-b195-9bf821f89a5d",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "b0dc4209-204d-4171-8a0b-835a97ca5be4",
			"key": "CSFRToken",
			"value": "Input CSFR Token",
			"type": "string",
			"disabled": true
		}
	]
}