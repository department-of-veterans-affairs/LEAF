{"info":{"_postman_id":"45b15bc4-0e65-44c0-bf0b-c4f1957c5c3b","name":"TestCollection","schema":"https://schema.getpostman.com/json/collection/v2.1.0/collection.json"},"item":[{"name":"GET all Categories","event":[{"listen":"test","script":{"id":"5854469a-eb97-4f34-ba97-f366d75f12c2","exec":["/* \r","pm.test(\"Form-Categories.  Status = 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","var time = pm.response.responseTime;\r","pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","*/\r","\r","\r","//pm.test(\"Contains expected value\", function () {\r","    const response = pm.response.json();\r","    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r","    console.log(catIDs);\r","    pm.variables.set('catIDs', catIDs); //Creates a variable or updates an existing one.\r","                                        //2nd catIDs is the var defined on line 3 - Only works in collection runner\r"," //});          //Pickup here => Go back to 2:55\r","\r","//6:05 in vid\r","    //pm.expect(jsonData.categoryID).to.eql(\"form_8bfe8\");\r","//    pm.expect(catIDs.categoryID).to.eql(\"form_8bfe8\");\r","\r"," //var jsonData = pm.response.json();\r"," //   console.log(jsonData.response);   \r"," //   pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");\r","//});\r","\r","/* \r","His POST data to insert\r","\"toolID\": 4643\r","\r","This ID then appears in a GET request\r","\r","const toolIDs = response.map(tool => tool.id);\r","console.log(toolIDs);\r","\r","Valid CategoryID(s)\r","0: \"form_854b7\"\r","1: \"form_1542d\"\r","2: \"form_8bfe8\"\r","3: \"form_8aded\"\r","4: \"form_e73f1\"\r","5: \"form_945a0\"\r","6: \"form_24f22\"\r","7: \"form_55af0\"\r","8: \"form_af5a3\"\r","9: \"form_354e4\"\r","10: \"form_66e4e\"\r","\r","\r","*/\r","\r","\r","\r","\r","\r","\r","/* \r","pm.test(\"Form-Categories.  Status = 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","var time = pm.response.responseTime;\r","\r","pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","\r","\r","pm.test(\"Contains expected value\", function () {\r","    var jsonData = pm.response.json();\r","    console.log(jsonData.response);   \r","    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r","});\r","*/\r","\r","\r","\r","\r","\r","/*\r","// saving the API Response as a variable\r","let response = pm.response.json();\r","\r","// looping through each camera object\r","response.data.ActiveCamera.forEach(function(cam) {\r","    // checking if the camera has a property named \"RectilinearIR\"\r","    if(cam.hasOwnProperty(\"RectilinearIR\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5\r","        pm.test(\"Test diameter for RectilinearIR\", function () {\r","            let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r","        });\r","    } \r","    // checking if the camera has a property named \"Fisheye\"\r","    if (cam.hasOwnProperty(\"Fisheye\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5109375\r","            pm.test(\"Test diameter for Fisheye\", function () {\r","            let intrinsicCalibrationParams = cam.Fisheye.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5109375);\r","        });\r","    }\r","});\r","*/\r","\r","\r","\r","\r","//    \"categoryID\": \"form_11e07\",\r","//    \"categoryName\": \"AUT (Copy)\"\r","/*\r","pm.test(\"Response time is less than limit\", function() {\r","var limit = 10;\r","pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r","console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r","});\r","\r","*/"],"type":"text/javascript"}},{"listen":"prerequest","script":{"id":"0c5d56ec-2d8c-4a7b-bcd8-f55461935f24","exec":["\r","\r","/* \r","const random = Math.random().toString(36).substring(2);\r","const formCategories = \"formCategories \" + random;\r","pm.collectionVariables.set(\"formCategories\", formCategories);\r","*/"],"type":"text/javascript"}}],"id":"ca4d61a4-c722-42ae-9d7f-b5524666a98a","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"noauth"},"method":"GET","header":[{"key":"CSRFToken","value":"{{CSRFToken}}","type":"text","disabled":true}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"https://localhost/LEAF_Request_Portal/api/form/categories","protocol":"https","host":["localhost"],"path":["LEAF_Request_Portal","api","form","categories"]}},"response":[]},{"name":"POST Category","event":[{"listen":"test","script":{"id":"9ec3efbf-24ef-416a-9a5a-593f62d6cce7","exec":["//console.log(catIDs);\r","/*\r","pm.test(\"Contains expected value\", function () {\r","    const response = pm.response.json();\r","    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r","    console.log(catIDs);\r","    pm.variables.set('catIDs', catIDs); //2nd catIDs is the var defined on line 3 - Only works in collection runner\r"," });   \r","*/\r","\r","//Pickup at 6:46 in vid\r","\r","//    pm.expect(jsonData.categoryID).to.eql(\"form_8bfe8\");\r","//    pm.expect(catIDs.categoryID).to.eql(\"form_8bfe8\");\r","\r"," //var jsonData = pm.response.json();\r"," //   console.log(jsonData.response);   \r"," //   pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");\r","\r","\r","/* \r","His POST data to insert\r","\"toolID\": 4643\r","\r","This ID then appears in a GET request\r","\r","const toolIDs = response.map(tool => tool.id);\r","console.log(toolIDs);\r","\r","Valid CategoryID(s)\r","0: \"form_854b7\"\r","1: \"form_1542d\"\r","2: \"form_8bfe8\"\r","3: \"form_8aded\"\r","4: \"form_e73f1\"\r","5: \"form_945a0\"\r","6: \"form_24f22\"\r","7: \"form_55af0\"\r","8: \"form_af5a3\"\r","9: \"form_354e4\"\r","10: \"form_66e4e\"\r","\r","*/\r","\r","\r","/* \r","pm.test(\"Form-Categories.  Status = 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","var time = pm.response.responseTime;\r","pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","\r","\r","pm.test(\"Contains expected value\", function () {\r","    var jsonData = pm.response.json();\r","    console.log(jsonData.response);   \r","    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r","});\r","*/\r","\r","\r","\r","\r","\r","/*\r","// saving the API Response as a variable\r","let response = pm.response.json();\r","\r","// looping through each camera object\r","response.data.ActiveCamera.forEach(function(cam) {\r","    // checking if the camera has a property named \"RectilinearIR\"\r","    if(cam.hasOwnProperty(\"RectilinearIR\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5\r","        pm.test(\"Test diameter for RectilinearIR\", function () {\r","            let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r","        });\r","    } \r","    // checking if the camera has a property named \"Fisheye\"\r","    if (cam.hasOwnProperty(\"Fisheye\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5109375\r","            pm.test(\"Test diameter for Fisheye\", function () {\r","            let intrinsicCalibrationParams = cam.Fisheye.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5109375);\r","        });\r","    }\r","});\r","*/\r","\r","\r","\r","\r","//    \"categoryID\": \"form_11e07\",\r","//    \"categoryName\": \"AUT (Copy)\"\r","/*\r","pm.test(\"Response time is less than limit\", function() {\r","var limit = 10;\r","pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r","console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r","});\r","\r","*/"],"type":"text/javascript"}},{"listen":"prerequest","script":{"id":"16791558-61f5-4372-966a-20efc18141e8","exec":["//For POST request\r","//console.log(catIDs);\r","//Probably need to use the 'POST' address as listed in the LEAF API Documentation\r","\r","  \r","const catIDs = pm.variables.get('catIDs');\r","console.log('Pre-request from POST request ' + catIDs);\r","//pm.variables.set('currentCatID', catIDs.shift());    //get first element/Id in array and return it. Can put in _\r","pm.variables.set('currentCatID', catIDs.shift());    //array or modify original array (catIDs)\r","\r","if(Array.isArray(catIDs) && catIDs.length > 0) {\r","    postman.setNextRequest('POST Category');       //Where to go next, input next request name          VID: 7:08\r","    console.log('POST CATEGORY');                                               //Can also use in Test section\r","} else {\r","    postman.setNextRequest(null);\r","}\r","//console.log(catIDs);\r","//console.log(currentCatID);\r","        //Then set as a variable (currentCatID) in Body\r","    //6:04\r","\r","\r","\r","/* \r","const random = Math.random().toString(36).substring(2);\r","const formCategories = \"formCategories \" + random;\r","pm.collectionVariables.set(\"formCategories\", formCategories);\r","*/"],"type":"text/javascript"}}],"id":"24c4f7af-9a4f-46d3-b388-735cb696a163","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"noauth"},"method":"POST","header":[{"key":"CSRFToken","value":"{{CSRFToken}}","type":"text","disabled":true}],"body":{"mode":"raw","raw":"{\r\n     \"categoryID\": {{currentCatID}},\r\n     \"categoryName\": \"AUT (Copy)\",\r\n     \"categoryDescription\": \"Automation Test Description 11/09 15:59\"\r\n}","options":{"raw":{"language":"json"}}},"url":{"raw":"https://localhost/LEAF_Request_Portal/api/form/categories","protocol":"https","host":["localhost"],"path":["LEAF_Request_Portal","api","form","categories"]}},"response":[]},{"name":"GET all Categories Testing","event":[{"listen":"test","script":{"id":"5854469a-eb97-4f34-ba97-f366d75f12c2","exec":[" \r","pm.test(\"Form-Categories.  Status = 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","var time = pm.response.responseTime;\r","pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","\r","\r","\r","pm.test(\"Contains expected value\", function () {\r","    const response = pm.response.json();\r","    const catIDs = response.map(catID => catID.categoryID);         //catIDs is the array containing IDs\r","    //console.log(catIDs);\r","    pm.variables.set('catIDs', catIDs); //Creates a variable or updates an existing one.\r","                                        //2nd catIDs is the var defined on line 3 - Only works in collection runner\r","    console.log(catIDs);\r","    pm.variables.set('currentCatID', catIDs.shift());\r","\r","    let currentID = catIDs.shift();\r","    console.log(currentID);\r","    pm.expect(currentID).to.eql(\"form_7b278\");\r","\r","//Pickup here => \r","//Vid = 7:57\r","\r","});\r","\r","/* \r","His POST data to insert\r","\"toolID\": 4643\r","\r","This ID then appears in a GET request\r","\r","const toolIDs = response.map(tool => tool.id);\r","console.log(toolIDs);\r","\r","Valid CategoryID(s)\r","0: \"form_854b7\"\r","1: \"form_1542d\"\r","2: \"form_8bfe8\"\r","3: \"form_8aded\"\r","4: \"form_e73f1\"\r","5: \"form_945a0\"\r","6: \"form_24f22\"\r","7: \"form_55af0\"\r","8: \"form_af5a3\"\r","9: \"form_354e4\"\r","10: \"form_66e4e\"\r","\r","\r","*/\r","\r","\r","\r","\r","\r","\r","/* \r","pm.test(\"Form-Categories.  Status = 200\", function () {\r","    pm.response.to.have.status(200);\r","});\r","\r","var time = pm.response.responseTime;\r","\r","pm.test('Response time: ' + time + ' ms', () => pm.response.to.have.status(200));\r","\r","\r","pm.test(\"Contains expected value\", function () {\r","    var jsonData = pm.response.json();\r","    console.log(jsonData.response);   \r","    pm.expect(jsonData.categoryID).to.eql(\"form_11e07\");  //iterate through\r","});\r","*/\r","\r","\r","\r","\r","\r","/*\r","// saving the API Response as a variable\r","let response = pm.response.json();\r","\r","// looping through each camera object\r","response.data.ActiveCamera.forEach(function(cam) {\r","    // checking if the camera has a property named \"RectilinearIR\"\r","    if(cam.hasOwnProperty(\"RectilinearIR\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5\r","        pm.test(\"Test diameter for RectilinearIR\", function () {\r","            let intrinsicCalibrationParams = cam.RectilinearIR.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5);\r","        });\r","    } \r","    // checking if the camera has a property named \"Fisheye\"\r","    if (cam.hasOwnProperty(\"Fisheye\")) {\r","        // test if the ImageCenterX value in the object is equal to 0.5109375\r","            pm.test(\"Test diameter for Fisheye\", function () {\r","            let intrinsicCalibrationParams = cam.Fisheye.IntrinsicCalibration;\r","            pm.expect(intrinsicCalibrationParams.ImageCenterX).to.eql(0.5109375);\r","        });\r","    }\r","});\r","*/\r","\r","\r","\r","\r","//    \"categoryID\": \"form_11e07\",\r","//    \"categoryName\": \"AUT (Copy)\"\r","/*\r","pm.test(\"Response time is less than limit\", function() {\r","var limit = 10;\r","pm.expect(pm.response.responseTime, \"Response time was longer than \" + limit + \" ms.\").to.be.below(limit);\r","console.log(\"Response Time: \" + pm.response.responseTime + \" ms\" + \" / Response Date: \" + pm.response.headers.get(\"Date\"));\r","});\r","\r","*/"],"type":"text/javascript"}},{"listen":"prerequest","script":{"id":"0c5d56ec-2d8c-4a7b-bcd8-f55461935f24","exec":["\r","\r","/* \r","const random = Math.random().toString(36).substring(2);\r","const formCategories = \"formCategories \" + random;\r","pm.collectionVariables.set(\"formCategories\", formCategories);\r","*/"],"type":"text/javascript"}}],"id":"09d9b3c2-3358-4716-bcf1-219bbb8d32d3","protocolProfileBehavior":{"disableBodyPruning":true,"disabledSystemHeaders":{}},"request":{"auth":{"type":"noauth"},"method":"GET","header":[{"key":"CSRFToken","value":"{{CSRFToken}}","type":"text","disabled":true}],"body":{"mode":"raw","raw":"","options":{"raw":{"language":"json"}}},"url":{"raw":"https://localhost/LEAF_Request_Portal/api/form/categories","protocol":"https","host":["localhost"],"path":["LEAF_Request_Portal","api","form","categories"]}},"response":[]}],"event":[{"listen":"prerequest","script":{"id":"e598783e-78c3-4f0f-aa84-5e55ebaf0492","type":"text/javascript","exec":[""]}},{"listen":"test","script":{"id":"86bb029a-b546-44d8-bf96-f13f1db96099","type":"text/javascript","exec":[""]}}]}